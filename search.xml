<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DSL介绍和使用</title>
      <link href="/posts/a0e43f83/"/>
      <url>/posts/a0e43f83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的AST</title>
      <link href="/posts/15ddfa03/"/>
      <url>/posts/15ddfa03/</url>
      
        <content type="html"><![CDATA[<p>源代码语法结构的一种抽象表示，树状结构每个节点都表示源代码中的一种结构，我们熟知的babel、webpack、vue-cli 得都是依赖 AST 进行开发的，强大到称为前端顶级领域的基座知识点。</p><p>ast生成方式，从词法分析到语法分析，<strong>词法分析</strong>（扫描）生成 <code>token</code>，<strong>语法分析</strong>生成<code>ast树</code>。</p><p>词法的token是最小分割单元，虽然是逐字母字符读取，但是会与内建的关键词与符号比较，关键词会作为一个整体作为token，如<code>function、var、if</code>等等，最终生成token列表。</p><p>语法分析（parse）,将词法分析的token转成有特定语法的语法树结构。parse的工具有很多<code>babel</code>、<code>esprima</code>以及基于两者封装的<code>recast</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> recast <span class="keyword">from</span> <span class="string">'recast'</span></span><br><span class="line"><span class="keyword">var</span> sourcecode = <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">true<span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="recast"><a href="#recast" class="headerlink" title="recast"></a>recast</h2><h3 id="recast-parse"><a href="#recast-parse" class="headerlink" title="recast.parse"></a>recast.parse</h3><p>将代码全部拆解成ast结构对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> astTree = recast.parse(sourcecode)</span><br></pre></td></tr></table></figure><h3 id="recast-print-prettyPrint"><a href="#recast-print-prettyPrint" class="headerlink" title="recast.print[prettyPrint]"></a>recast.print[prettyPrint]</h3><p>输出ast对象，美化输出<code>prettyPrint</code>，输出<a href="https://github.com/benjamn/recast/blob/master/lib/options.ts" target="_blank" rel="noopener">配置文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(recast.print(astTree))</span><br><span class="line"><span class="comment">//console.log(recast.prettyPrint(astTree,&#123; tabWidth: 2 &#125;))</span></span><br></pre></td></tr></table></figure><p>输出源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(recast.print(astTree).code)</span><br><span class="line"><span class="comment">//console.log(recast.prettyPrint(astTree, &#123; tabWidth: 2 &#125;).code)</span></span><br></pre></td></tr></table></figure><h3 id="recast-run"><a href="#recast-run" class="headerlink" title="recast.run"></a>recast.run</h3><p>命令行文件读取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recast.run(<span class="function">(<span class="params">ast, printSource</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过 <code>fs.readFile</code> 进行文件读取，然后将获取到的 <code>code</code> 进行 <code>parse</code> 操作</p><p>源码有对<code>run</code>的实现，其中<code>printSource</code>方法本质就是<code>process.stdout.write</code>。<code>recast</code>没有详细的文档但是入口文件就已经告诉你所有的api以及对应的使用方式了（依赖包如ast-types有详细的使用文档）</p><h3 id="recast-types-builder"><a href="#recast-types-builder" class="headerlink" title="recast.types.builder"></a>recast.types.builder</h3><p><code>parse</code>可以把现有的代码拆解一块块ast对象，那么<code>builder</code>提供就是重新构建这些ast对象的工具。<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API#Node_objects" target="_blank" rel="noopener">AST对象文档</a>中定义的<strong>builders</strong>对象，具体的builder类型方法也可以使用<a href="https://github.com/benjamn/ast-types/blob/master/gen/builders.ts" target="_blank" rel="noopener">ast-types</a>的<strong>builders.ts</strong>。</p><h3 id="recast-visit"><a href="#recast-visit" class="headerlink" title="recast.visit"></a>recast.visit</h3><p>遍历ast对象</p><p> 拆解和拼接的工具都有了，还需要分类遍历巨量的ast的对象，从中取出需要的模块的工具–<code>visit</code>，一个根据ast对象类型进行分类遍历的方法。</p><p><code>parse</code>拆解出全部堆在一起，<code>visit</code>按照类型取出特定类型对象。只要在 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API#Node_objects" target="_blank" rel="noopener">AST对象文档</a>中定义的<strong>builders</strong>对象（也可以使用<a href="https://github.com/benjamn/ast-types/blob/master/gen/builders.ts" target="_blank" rel="noopener">ast-types</a>的<strong>builders.ts</strong>），在前面加visit，即可遍历，每个遍历函数后必须加上<code>return false</code>或者 <code>this.traverse(path)</code>，否则报错。</p><blockquote><p>Error: Must either call this.traverse or return false in visitFunctionDeclaration</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> recast  = <span class="built_in">require</span>(<span class="string">'recast'</span>)</span><br><span class="line"></span><br><span class="line">recast.run(<span class="function"><span class="keyword">function</span>(<span class="params">ast, printSource</span>) </span>&#123;</span><br><span class="line">  recast.visit(ast, &#123;</span><br><span class="line">      visitExpressionStatement: <span class="function"><span class="keyword">function</span>(<span class="params">&#123;node&#125;</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 解构node的属性方法是哪些取决于当前节点的ast对象类型</span></span><br><span class="line">        <span class="built_in">console</span>.log(node) <span class="comment">//输出ast对象</span></span><br><span class="line">        printSource(node) <span class="comment">// ast对象对应的源码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// required</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="recast-types-nameTypes"><a href="#recast-types-nameTypes" class="headerlink" title="recast.types.nameTypes"></a>recast.types.nameTypes</h3><p>两个常见的api：<code>assert()</code>  <code>check()</code>，具体用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assert 类型不匹配报错退出</span></span><br><span class="line">recast.types.namedTypes.assert()</span><br><span class="line"><span class="comment">// check 返回 boolean</span></span><br><span class="line">recast.types.namedTypes.check()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 用法 assert()  check()</span></span><br><span class="line"><span class="keyword">const</span> recast = <span class="built_in">require</span>(<span class="string">"recast"</span>);</span><br><span class="line"><span class="keyword">const</span> TNT = recast.types.namedTypes</span><br><span class="line">TNT[ASTObject].check(CamparedASTObject)  <span class="comment">// 对比ast对象 返回boolean</span></span><br><span class="line">TNT[ASTObject].assert(CamparedASTObject)  <span class="comment">// ast对象不一致报错退出</span></span><br></pre></td></tr></table></figure><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a><em>思考题</em></h4><p>将下面的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换成箭头函数导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常见的低效方式：fs.read读取文件、正则匹配替换文本、fs.write写入文件</p><p>利用ast进行转换 </p><h4 id="如何练习的心得"><a href="#如何练习的心得" class="headerlink" title="如何练习的心得"></a>如何练习的心得</h4><p>强化Parser API的训练有助于加强对语法树的认知，拿到一段代码就可以画在心里画出语法树，那么ast的掌握就差不多了。</p><p>自己随机写了几个常见的代码段，可以练习自己写出语法树，然后去ast explorer上验证。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> im100 = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> imtrue = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> imobject = &#123; <span class="attr">childKey</span>: <span class="string">'childVal'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> imarray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctionDeclaration</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VariableDeclaration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  BlockStatement</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> bs = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IfStatement</span></span><br><span class="line"><span class="keyword">if</span> (im100 === <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> is = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ForStatement</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key  ForInStatement</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> imobject) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举value ForOfStatement</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imarray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TryStatement</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(und)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123; <span class="comment">// CatchClause</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(error) <span class="comment">// ThrowStatement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SwitchStatement</span></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// BreakStatement</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressionStatement</span></span><br><span class="line"><span class="keyword">this</span>.axiosFetch(<span class="keyword">this</span>.formData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.handleClose()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拿最后一段<code>promise</code>异步代码段举个例子，以注释的方式进行分析，当然画图更直观。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码段</span></span><br><span class="line"><span class="keyword">this</span>.axiosFetch(<span class="keyword">this</span>.formData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.handleClose()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//语法树分析</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1 - this.axiosFetch().then().catch() ----  expressionStatement</span></span><br><span class="line"><span class="comment"> * 2 - [this.axiosFetch().then()].catch(() =&gt; &#123;this.loading = false&#125;) ----  callExpression</span></span><br><span class="line"><span class="comment"> *  * [this.axiosFetch().then().catch]  ----  callee: memberExpression</span></span><br><span class="line"><span class="comment"> *  * () =&gt; &#123;this.loading = false&#125; ----  arguments: arrowFunctionExpression</span></span><br><span class="line"><span class="comment"> *    * () ----  params: []</span></span><br><span class="line"><span class="comment"> *    * &#123;this.loading = false&#125;  ---- blockStatement</span></span><br><span class="line"><span class="comment"> *    * * this.loading = false ----  expressionStatement</span></span><br><span class="line"><span class="comment"> *    * * this.loading = false ----  assignmentExpression</span></span><br><span class="line"><span class="comment"> *    * * * * * this.loading ----  left: memberExpression</span></span><br><span class="line"><span class="comment"> *    * * * * * * this ----  object: thisExpression</span></span><br><span class="line"><span class="comment"> *    * * * * * * loading ----  property: identifier</span></span><br><span class="line"><span class="comment"> *    * * * * * false ----  right: literal</span></span><br><span class="line"><span class="comment"> *  * catch(() =&gt; &#123;this.loading = false&#125;) ----  callExpression</span></span><br><span class="line"><span class="comment"> * 3 - [this.axiosFetch()].then(res =&gt; &#123; this.loading = false; this.handleClose() &#125;) ----  callExpression</span></span><br><span class="line"><span class="comment"> *  * [this.axiosFetch()]  ----  callee</span></span><br><span class="line"><span class="comment"> *  * then(res =&gt; &#123; this.loading = false; this.handleClose() &#125;) ----  callExpression</span></span><br><span class="line"><span class="comment"> *  * * * res =&gt; &#123; this.loading = false; this.handleClose() &#125;  ----  arrowFunctionExpression</span></span><br><span class="line"><span class="comment"> *  * * * * res ---- blockStatement</span></span><br><span class="line"><span class="comment"> *  * * * * &#123; this.loading = false; this.handleClose() &#125;  ---- blockStatement</span></span><br><span class="line"><span class="comment"> *  * * * * * this.loading = false  ----  binaryExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * * this ----  thisExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * * loading ----  identifiy</span></span><br><span class="line"><span class="comment"> *  * * * * * this.handleClose() ----  callExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * * this ----  thisExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * * handleClose() ----  callExpression</span></span><br><span class="line"><span class="comment"> * 4 - this.axiosFetch() ----  callExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * this ----  thisExpression</span></span><br><span class="line"><span class="comment"> *  * * * * * axiosFetch() ----  callExpression</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="AST实践"><a href="#AST实践" class="headerlink" title="AST实践"></a>AST实践</h2><p>别担心，很简单，循序渐进，用recast创造目标代码段</p><p>要实现的一段箭头函数的声明，如下面这种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="语法树分析"><a href="#语法树分析" class="headerlink" title="语法树分析"></a>语法树分析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  program: &#123;</span><br><span class="line">    body: &#123;</span><br><span class="line">      type: <span class="string">'VariableDeclaration'</span>,</span><br><span class="line">      kind: <span class="string">'var'</span>,</span><br><span class="line">      declarations: [</span><br><span class="line">        &#123;</span><br><span class="line">          type: <span class="string">'variableDeclarator'</span>,</span><br><span class="line">          id: &#123;</span><br><span class="line">            type: <span class="string">'Identifier'</span>,</span><br><span class="line">            name: <span class="string">'add'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          init: &#123;</span><br><span class="line">            type: <span class="string">'ArrowFunctionExpression'</span>,</span><br><span class="line">            params: [&#123;</span><br><span class="line">              type: <span class="string">'Identifier'</span>,</span><br><span class="line">              name: <span class="string">'a'</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              type: <span class="string">'Identifier'</span>,</span><br><span class="line">              name: <span class="string">'b'</span></span><br><span class="line">            &#125;],</span><br><span class="line">            body: &#123;</span><br><span class="line">              type: <span class="string">'BlockStatement'</span>,</span><br><span class="line">              body: [&#123;</span><br><span class="line">                type: <span class="string">'ReturnStatement'</span>,</span><br><span class="line">                <span class="built_in">arguments</span>: &#123;</span><br><span class="line">                  type: <span class="string">'BinaryExpression'</span>,</span><br><span class="line">                  operator: <span class="string">'+'</span>,</span><br><span class="line">                  left: &#123;</span><br><span class="line">                    type: <span class="string">'Identifier'</span>,</span><br><span class="line">                    name: <span class="string">'a'</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  right: &#123;</span><br><span class="line">                    type: <span class="string">'Identifier'</span>,</span><br><span class="line">                    name: <span class="string">'b'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    sourceType: <span class="string">'script'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法树parser完事就知道如何<strong>逆向构建源代码</strong></p><h4 id="手撸实现"><a href="#手撸实现" class="headerlink" title="手撸实现"></a>手撸实现</h4><p>首先我们需要从<code>recast.types.builders</code>里找一些构建工具，下面的<code>parse api</code>都是语法树parser分析阶段出现的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> recast = <span class="built_in">require</span>(<span class="string">'recast'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  identifier: id,</span><br><span class="line">  variableDeclaration,</span><br><span class="line">  variableDeclarator,</span><br><span class="line">  binaryExpression,</span><br><span class="line">  returnStatement,</span><br><span class="line">  arrowFunctionExpression,</span><br><span class="line">  blockStatement</span><br><span class="line">&#125; = recast.types.builders</span><br></pre></td></tr></table></figure><p>新建一个空ast</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ast = recast.parse()</span><br></pre></td></tr></table></figure><p>逆向构建实现，api从这里找<a href="https://github.com/benjamn/ast-types/blob/master/gen/builders.ts" target="_blank" rel="noopener">ast-types-builders.ts</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> astBody = variableDeclaration(<span class="string">'var'</span>, [</span><br><span class="line">  variableDeclarator(id(<span class="string">'add'</span>),</span><br><span class="line">    arrowFunctionExpression([id(<span class="string">'a'</span>), id(<span class="string">'b'</span>)],</span><br><span class="line">      blockStatement([</span><br><span class="line">        returnStatement(</span><br><span class="line">          binaryExpression(<span class="string">'+'</span>, id(<span class="string">'a'</span>), id(<span class="string">'b'</span>))</span><br><span class="line">        )</span><br><span class="line">      ])</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>将构建好的ast对象body赋值给空的ast对象body，打印可以得到目标代码段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ast.program.body[<span class="number">0</span>] = astBody</span><br><span class="line"><span class="keyword">let</span> output = recast.print(ast).code</span><br><span class="line"><span class="built_in">console</span>.log(output)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// var add = (a, b) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return a + b;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure><p>这样的话，<strong>将里面的常量替换成其他ast对象上摘下来的变量就可以做很多事情</strong>。</p><p>比如将普通命名函数变成声明箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anyFnName</span> (<span class="params">anyParams</span>)</span>&#123;</span><br><span class="line">true <span class="comment">// return paramsBinaryExpression</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// transform =&gt;</span></span><br><span class="line"><span class="keyword">var</span> anyFnName = <span class="function">(<span class="params">anyParams</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// return paramsBinaryExpression</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到上面的代码段构建函数，如果函数体的<code>blockstatement</code>不变的话，就非常简单了，直接赋值给<code>arrowFunctionExpression</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> recast = <span class="built_in">require</span>(<span class="string">'recast'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  variableDeclaration,</span><br><span class="line">  variableDeclarator,</span><br><span class="line">  arrowFunctionExpression</span><br><span class="line">&#125; = recast.types.builders</span><br><span class="line">recast.run(<span class="function"><span class="keyword">function</span> (<span class="params">ast, printSource</span>) </span>&#123;</span><br><span class="line">  recast.visit(ast, &#123;</span><br><span class="line">    visitFunctionDeclaration (path) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; node &#125; = path</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">id</span>: functionDeaclareId, <span class="attr">params</span>: functionDeaclareParams, <span class="attr">body</span>: functionDeaclareBody &#125; = node</span><br><span class="line">      <span class="comment">// 用到上面的代码段构建函数</span></span><br><span class="line">      <span class="keyword">let</span> newAstBody = variableDeclaration(<span class="string">'var'</span>, [</span><br><span class="line">        variableDeclarator(functionDeaclareId,</span><br><span class="line">          arrowFunctionExpression(functionDeaclareParams, functionDeaclareBody)</span><br><span class="line">        )</span><br><span class="line">      ])</span><br><span class="line">      path.replace(newAstBody)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(printSource(ast))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出声明的箭头函数</span></span><br></pre></td></tr></table></figure><p>做法比较简单，可能复杂点还涉及ast对象的校验以及<code>blockstatement</code>里面代码行判断和修改，总之理论上可以实现任意代码的转换。</p><h2 id="AST-Explorer"><a href="#AST-Explorer" class="headerlink" title="AST Explorer"></a><a href="https://astexplorer.net/" target="_blank" rel="noopener">AST Explorer</a></h2><p>选择合适的parser进行js代码语法树的查看工具平台，可以支持所有的es6新特性转换。</p><p>Paste or drop some JavaScript here and explore the syntax tree created by chosen parser. You can use all the cool new features from ES6 and even more</p><h2 id="syntax-amp-statements-amp-expressions"><a href="#syntax-amp-statements-amp-expressions" class="headerlink" title="syntax &amp; statements &amp; expressions"></a>syntax &amp; statements &amp; expressions</h2><p><strong>语法（syntax） 、语句（statements）、表达式语句（expression statements）、 表达式（expressions）之间的关系</strong></p><p>任何语句存在的地方都可以使用一个表达式或者代替，这叫做表达式语句（expression statements）；但是表达式存在的地方往往不可以使用语句代替或者使用语句。</p><p>syntax 语法</p><ul><li>statements语句<ul><li>expression statements 表达式语句</li></ul></li><li>expressions 表达式</li></ul><p>Statement  通常一个语句是为了完成某个任务<strong>可以独立存在</strong>的</p><p>expressions  <strong>表达式会生产一个值</strong>，使用表达式的地方期望得到一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全是Statement</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">if</span> (y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  x = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  x = -y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (y &gt;= 0 ? y : -y) 是expressions</span></span><br><span class="line"><span class="keyword">var</span> x=(y &gt;= <span class="number">0</span> ? y : -y)</span><br></pre></td></tr></table></figure><h2 id="常用AST对象"><a href="#常用AST对象" class="headerlink" title="常用AST对象"></a><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API#Builder_objects" target="_blank" rel="noopener">常用AST对象</a></h2><h3 id="Statement（语句）"><a href="#Statement（语句）" class="headerlink" title="Statement（语句）"></a>Statement（语句）</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BlockStatement</span></span><br><span class="line"><span class="keyword">EmptyStatement</span></span><br><span class="line"><span class="keyword">ExpressionStatement</span></span><br><span class="line"><span class="keyword">IfStatement</span></span><br><span class="line"><span class="keyword">LabeledStatement</span></span><br><span class="line"><span class="keyword">BreakStatement</span></span><br><span class="line"><span class="keyword">ContinueStatement</span></span><br><span class="line"><span class="keyword">WithStatement</span></span><br><span class="line"><span class="keyword">SwitchStatement</span></span><br><span class="line"><span class="keyword">ReturnStatement</span></span><br><span class="line"><span class="keyword">TryStatement</span></span><br><span class="line"><span class="keyword">ThrowStatement</span></span><br><span class="line"><span class="keyword">WhileStatement</span></span><br><span class="line"><span class="keyword">DoWhileStatement</span></span><br><span class="line"><span class="keyword">ForInStatement</span></span><br><span class="line"><span class="keyword">ForOfStatement</span></span><br><span class="line"><span class="keyword">LetStatement</span></span><br><span class="line"><span class="keyword">DebuggerStatement</span></span><br></pre></td></tr></table></figure><p>接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> BlockStatement &lt;: Statement &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"BlockStatement"</span>;</span><br><span class="line">    body: [ Statement ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ExpressionStatement &lt;: Statement &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ExpressionStatement"</span>;</span><br><span class="line">    expression: Expression;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ReturnStatement &lt;: Statement &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ReturnStatement"</span>;</span><br><span class="line">    argument: Expression | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ForInStatement &lt;: Statement &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ForInStatement"</span>;</span><br><span class="line">    left: VariableDeclaration |  Expression;</span><br><span class="line">    right: Expression;</span><br><span class="line">    body: Statement;</span><br><span class="line">    each: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FunctionDeclaration</span><br><span class="line">VariableDeclaration</span><br><span class="line">VariableDeclarator <span class="comment">// 声明符</span></span><br></pre></td></tr></table></figure><p>接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FunctionDeclaration &lt;: Function, Declaration &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"FunctionDeclaration"</span>;</span><br><span class="line">    id: Identifier;</span><br><span class="line">    params: [ Pattern ];</span><br><span class="line">    defaults: [ Expression ];</span><br><span class="line">    rest: Identifier | <span class="literal">null</span>;</span><br><span class="line">    body: BlockStatement | Expression;</span><br><span class="line">    generator: <span class="built_in">boolean</span>;</span><br><span class="line">    expression: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> VariableDeclaration &lt;: Declaration &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"VariableDeclaration"</span>;</span><br><span class="line">    declarations: [ VariableDeclarator ];</span><br><span class="line">    kind: <span class="string">"var"</span> | <span class="string">"let"</span> | <span class="string">"const"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> VariableDeclarator &lt;: Node &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"VariableDeclarator"</span>;</span><br><span class="line">    id: Pattern;</span><br><span class="line">    init: Expression | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Expression（表达式）"><a href="#Expression（表达式）" class="headerlink" title="Expression（表达式）"></a>Expression（表达式）</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ThisExpression</span></span><br><span class="line"><span class="symbol">ArrayExpression</span></span><br><span class="line"><span class="symbol">ObjectExpression</span></span><br><span class="line"><span class="symbol">FunctionExpression</span></span><br><span class="line"><span class="symbol">SequenceExpression</span></span><br><span class="line"><span class="symbol">UnaryExpression</span></span><br><span class="line"><span class="keyword">BinaryExpression</span></span><br><span class="line"><span class="keyword">AssignmentExpression</span></span><br><span class="line"><span class="keyword">LogicalExpression</span></span><br><span class="line"><span class="keyword">ConditionalExpression</span></span><br><span class="line"><span class="keyword">NewExpression</span></span><br><span class="line"><span class="keyword">MemberExpression</span></span><br><span class="line"><span class="keyword">YieldExpression</span></span><br><span class="line"><span class="keyword">ComprehensionExpression</span></span><br><span class="line"><span class="keyword">graphExpression</span></span><br></pre></td></tr></table></figure><p>接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FunctionExpression &lt;: Function, Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"FunctionExpression"</span>;</span><br><span class="line">    id: Identifier | <span class="literal">null</span>;</span><br><span class="line">    params: [ Pattern ];</span><br><span class="line">    defaults: [ Expression ];</span><br><span class="line">    rest: Identifier | <span class="literal">null</span>;</span><br><span class="line">    body: BlockStatement | Expression;</span><br><span class="line">    generator: <span class="built_in">boolean</span>;</span><br><span class="line">    expression: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ArrowExpression &lt;: Function, Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ArrowExpression"</span>;</span><br><span class="line">    params: [ Pattern ];</span><br><span class="line">    defaults: [ Expression ];</span><br><span class="line">    rest: Identifier | <span class="literal">null</span>;</span><br><span class="line">    body: BlockStatement | Expression;</span><br><span class="line">    generator: <span class="built_in">boolean</span>;</span><br><span class="line">    expression: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Property &lt;: Node &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"Property"</span>;</span><br><span class="line">    key: Literal | Identifier;</span><br><span class="line">    value: Expression;</span><br><span class="line">    kind: <span class="string">"init"</span> | <span class="string">"get"</span> | <span class="string">"set"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ThisExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ThisExpression"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ObjectExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ObjectExpression"</span>;</span><br><span class="line">    properties: [ Property ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ArrayExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ArrayExpression"</span>;</span><br><span class="line">    elements: [ Expression | <span class="literal">null</span> ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> AssignmentExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"AssignmentExpression"</span>;</span><br><span class="line">    operator: AssignmentOperator;</span><br><span class="line">    left: Pattern;</span><br><span class="line">    right: Expression;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ConditionalExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"ConditionalExpression"</span>;</span><br><span class="line">    test: Expression;</span><br><span class="line">    alternate: Expression;</span><br><span class="line">    consequent: Expression;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> MemberExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"MemberExpression"</span>;</span><br><span class="line">    object: Expression;</span><br><span class="line">    property: Identifier | Expression;</span><br><span class="line">    computed: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> CallExpression &lt;: Expression &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"CallExpression"</span>;</span><br><span class="line">    callee: Expression;</span><br><span class="line">    <span class="built_in">arguments</span>: [ Expression ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他Recast信息参考文档"><a href="#其他Recast信息参考文档" class="headerlink" title="其他Recast信息参考文档"></a>其他Recast信息参考文档</h2><p><a href="https://www.npmjs.com/package/ast-types" target="_blank" rel="noopener">https://www.npmjs.com/package/ast-types</a></p><p><a href="https://www.npmjs.com/package/esprima" target="_blank" rel="noopener">https://www.npmjs.com/package/esprima</a></p><p><a href="https://www.babeljs.cn/docs/babel-parser" target="_blank" rel="noopener">https://www.babeljs.cn/docs/babel-parser</a></p><p><a href="https://www.babeljs.cn/docs/babel-types" target="_blank" rel="noopener">https://www.babeljs.cn/docs/babel-types</a></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的babel</title>
      <link href="/posts/97b701ae/"/>
      <url>/posts/97b701ae/</url>
      
        <content type="html"><![CDATA[<p>当你在使用babel的时候是否只知道webpack里的babel-loader,以及极不情愿的babel-polyfill(很不幸的告诉你这个已经弃用了 如果你使用稍微高一点的babel版本)，或者知道babel的配置文件放在工程的根目录，以及使用es2015以及stage0-4这种preset（又很不幸这个又已经是过时产品）。当你对babel的理解只停留在babel-loader那么很快就会被一大堆babel相关的概念弄晕，加上webpack4之前的一大堆配置，从0-1去搭建项目只能依靠前人已经搭建好的脚手架了。本文不深都是你知道或者不知道的基础概念，从配置项入手再延伸到新旧对比，知道哪些已经是弃用的，了解哪些就可以解决绝大数基础项目的转义问题。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>第一种方式，在项目的根目录创建配置文件，<a href="https://babeljs.io/docs/en/config-files#project-wide-configuration" target="_blank" rel="noopener">babel.config.json</a>（推荐）或者 <a href="https://babeljs.io/docs/en/config-files#file-relative-configuration" target="_blank" rel="noopener">.babelrc</a>，在其中填入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">"presets"</span>: [...],</span><br><span class="line">  <span class="attr">"plugins"</span>:[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式，也可以直接在<code>package.json</code>里加入babel的配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-package"</span>,  </span><br><span class="line"> <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,  </span><br><span class="line"> <span class="attr">"babel"</span>: &#123;    </span><br><span class="line">     <span class="attr">"presets"</span>: [ ... ],   </span><br><span class="line">     <span class="attr">"plugins"</span>: [ ... ],  </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上述配置中常用的两个配置字段<strong>Plugins</strong>和<strong>Preset</strong>。在使用Babel（构建工具、CLI、Broswer Script）常见的配置项。</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>告诉Babel如何进行转换，分为<strong>转义插件</strong>和<strong>语法相关插件</strong>。</p><p><strong>语法插件（Syntax Plugins）</strong>仅允许 Babel 解析特定类型的语法，而不具备转换能力，负责把源码(包含JS解析器不能解析的奇怪语法)解析成 AST。</p><p>命名方式为<code>plugin-syntax-*</code></p><p><strong>转义插件（Transform Plugins）</strong>会对AST进行转义，把新特性<strong>转换成</strong>目前合法标准的语法，其会自动启用语法插件进行AST解析。转义插件根据命名方式还分为：</p><p><code>plugin-transform-*</code>- 该转义插件转换的是Stage 4或者正式发布的特性。</p><p> <code>plugin-proposal-*</code> - 该转义插件转换的不是年度正式发布的特性，也就是Stage 0-3，该插件的转换特性一旦升到Stage 4以及之后阶段，那么名称是会发生变化的。</p><h4 id="用法：-babel-plugin-xxx"><a href="#用法：-babel-plugin-xxx" class="headerlink" title="用法：@babel/plugin-xxx"></a>用法：<strong>@babel/plugin-xxx</strong></h4><p>以箭头函数转换的插件<code>@babel/plugin-transform-arrow-functions</code> ，介绍插件的安装配置和用法。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S @babel/plugin-transform-arrow-functions</span><br></pre></td></tr></table></figure><h3 id="使用声明"><a href="#使用声明" class="headerlink" title="使用声明"></a>使用声明</h3><h4 id="1、通过配置文件"><a href="#1、通过配置文件" class="headerlink" title="1、通过配置文件"></a>1、通过配置文件</h4><p>配置文件主要指的是，上文提到的项目根目录的<code>babel.config.json</code> 或者 <code>.babelrc.json</code>文件，<strong>用配置文件方式来进行Babel使用一直都是官方推荐的一种方式。</strong></p><p>不需要配置参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-transform-arrow-functions"</span>] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要配置参数，这和单个Preset的配置方式一样</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-transform-arrow-functions"</span>, &#123; <span class="attr">"spec"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名字既可以是<code>node_modules</code>中插件的名字，也可以是绝对地址如<code>./node_modules/dist/plugin</code></p><p>需要注意的是，如果配置中同时存在Presets和Plugins，Plugins会比Presets优先执行，Plugins中插件是按顺序执行，Presets里的预设则是逆向执行（根据用户习惯确保向后兼容性，大多数用户习惯把常用的如”es2015”写在不常用的如”stage-0”前面，那么按照顺序执行就有问题，”es2015”转换不了”stage-0”的语法）。</p><h4 id="2、通过命令行交互使用"><a href="#2、通过命令行交互使用" class="headerlink" title="2、通过命令行交互使用"></a>2、通过命令行交互使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel --plugins @babel/plugin-transform-arrow-functions test.js</span><br></pre></td></tr></table></figure><p>以上命令使用的前提是，你的设备中需要全局安装babel，包括<code>@babel/core</code> <code>@babel/cli</code>等，但是不推荐全局安装以及使用，下文会说明原因以及推荐的cli用法。</p><h4 id="3、通过Node-API使用"><a href="#3、通过Node-API使用" class="headerlink" title="3、通过Node API使用"></a>3、通过Node API使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">"@babel/core"</span>)</span><br><span class="line">babel.transform(<span class="string">"x=&gt;2x"</span>, &#123;</span><br><span class="line">  plugins: [<span class="string">"@babel/plugin-transform-arrow-functions"</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面就是直接调用<code>@babel/core</code>的<code>transform</code>方法进行字符串的转义，在第二个参数进行转义配置。<code>@babel/core</code>的介绍下文会进一步提及。</p><h4 id="4、plugin简写"><a href="#4、plugin简写" class="headerlink" title="4、plugin简写"></a>4、plugin简写</h4><p>如果<code>preset</code>安装包是以<code>babel-plugin-</code>作为前缀命名的，你就可以使用它的简写（同样适用于scoped packages）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"myPlugin"</span>,</span><br><span class="line">    <span class="string">"babel-plugin-myPlugin"</span>, // <span class="number">1</span>、<span class="number">2</span>相等</span><br><span class="line">    <span class="string">"@babel/myPlugin"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-myPlugin"</span>,// <span class="number">3</span>、<span class="number">4</span>相等</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#### </p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">  _name: <span class="string">"Bob"</span>,</span><br><span class="line">  _friends: [<span class="string">"Sally"</span>, <span class="string">"Tom"</span>],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    <span class="keyword">this</span>._friends.forEach(<span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>._name + <span class="string">" knows "</span> + f));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bob = &#123;</span><br><span class="line">  _name: <span class="string">"Bob"</span>,</span><br><span class="line">  _friends: [<span class="string">"Sally"</span>, <span class="string">"Tom"</span>],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>._friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(_this._name + <span class="string">" knows "</span> + f);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里顺便安利一个plugin，<strong>@babel/plugin-proposal-optional-chaining</strong> </p><p>不知道大家在客户端和webview桥接的时候，使用其挂载在全局的方法postMessage会不会这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit &amp;&amp;</span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers &amp;&amp;</span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.MobileNavi &amp;&amp;</span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.MobileNavi.postMessage(&#123;</span><br><span class="line">   <span class="string">'method'</span>: <span class="string">'configNavigationBar'</span>,</span><br><span class="line">   <span class="string">'params'</span>: <span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>那么如果你关注js新特性就会知道Null Propagation Operator 现在叫做Proposal-optional-chaining （空传运算符）。当时在这个还在stage1的时候就因为它特性太好用了就关注了，现在你可以使用@babel/plugin-proposal-optional-chaining 插件使用了，其目前已经到了stage4阶段，有望尽快发布，下面就是满怀已久法力无边空传的运算符的写法，是不是方便了很多。符号：<code>?.</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.webkit?.messageHandlers?.MobileNavi?.postMessage?.(&#123;</span><br><span class="line">   <span class="string">'method'</span>: <span class="string">'configNavigationBar'</span>,</span><br><span class="line">   <span class="string">'params'</span>: <span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>更多其他的使用和 <code>plugins</code>列表 <a href="https://babeljs.io/docs/en/plugins" target="_blank" rel="noopener">plugins列表</a></p><p>高级教程babel-plugins的开发<a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noopener">Babel插件开发</a> </p><h2 id="Presets"><a href="#Presets" class="headerlink" title="Presets"></a>Presets</h2><p>避免大量一个个增加<code>plugin</code>去满足转换需求，可以使用预设<code>preset</code>；<code>preset</code>在用户不用配置的情况下满足对(ES2015, ES2016, etc.)的转换要求。但如果你想要个性化配置，preset也支持进行用户自定义。</p><p>如果没有preset，那么基本实现一个babel-preset-env就需要引入下面这些plugins，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"@babel/helper-plugin-utils"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-async-generator-functions"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-dynamic-import"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-json-strings"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-nullish-coalescing-operator"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-numeric-separator"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-object-rest-spread"</span>: <span class="string">"^7.9.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-optional-catch-binding"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-optional-chaining"</span>: <span class="string">"^7.9.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-unicode-property-regex"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-async-generators"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-dynamic-import"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-json-strings"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-nullish-coalescing-operator"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-numeric-separator"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-object-rest-spread"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-optional-catch-binding"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-optional-chaining"</span>: <span class="string">"^7.8.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-syntax-top-level-await"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-arrow-functions"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-async-to-generator"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-block-scoped-functions"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-block-scoping"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-classes"</span>: <span class="string">"^7.9.5"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-computed-properties"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-destructuring"</span>: <span class="string">"^7.9.5"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-dotall-regex"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-duplicate-keys"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-exponentiation-operator"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-for-of"</span>: <span class="string">"^7.9.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-function-name"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-literals"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-member-expression-literals"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-modules-amd"</span>: <span class="string">"^7.9.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-modules-commonjs"</span>: <span class="string">"^7.9.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-modules-systemjs"</span>: <span class="string">"^7.9.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-modules-umd"</span>: <span class="string">"^7.9.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-named-capturing-groups-regex"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-new-target"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-object-super"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-parameters"</span>: <span class="string">"^7.9.5"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-property-literals"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-regenerator"</span>: <span class="string">"^7.8.7"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-reserved-words"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-shorthand-properties"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-spread"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-sticky-regex"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-template-literals"</span>: <span class="string">"^7.8.3"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-typeof-symbol"</span>: <span class="string">"^7.8.4"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-unicode-regex"</span>: <span class="string">"^7.8.3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法：<strong>@babel/preset-xxx</strong> 。</p><h4 id="1、官方支持的preset"><a href="#1、官方支持的preset" class="headerlink" title="1、官方支持的preset"></a>1、官方支持的preset</h4><p>支持React JSX语法 <a href="https://babeljs.io/docs/en/babel-preset-react" target="_blank" rel="noopener">@babel/preset-react</a></p><p>支持typescript语法  <a href="https://babeljs.io/docs/en/babel-preset-typescript" target="_blank" rel="noopener">@babel/preset-typescript</a></p><p>满足对(ES2015, ES2016, etc.)的转换要求 <a href="https://babeljs.io/docs/en/babel-preset-env" target="_blank" rel="noopener">@babel/preset-env</a></p><p>支持flow语法 <a href="https://babeljs.io/docs/en/babel-preset-flow" target="_blank" rel="noopener">@babel/preset-flow</a></p><p>社区还有其他的优秀preset,比如</p><p>服务于<a href="https://cli.vuejs.org/config/" target="_blank" rel="noopener">vue-cli</a> 的<a href="https://www.npmjs.com/package/@vue/babel-preset-app" target="_blank" rel="noopener">@vue/babel-preset-app</a>，</p><p>服务于Vue JSX的<a href="https://www.npmjs.com/package/@vue/babel-preset-jsx" target="_blank" rel="noopener">@vue/babel-preset-jsx</a></p><p>服务现代浏览器preset <a href="https://www.npmjs.com/package/babel-preset-modern-browsers" target="_blank" rel="noopener">babel-preset-modern-browsers</a></p><p>服务NodeJS断言库preset <a href="https://www.npmjs.com/package/babel-preset-power-assert" target="_blank" rel="noopener">babel-preset-power-assert</a></p><h4 id="2、stage-X"><a href="#2、stage-X" class="headerlink" title="2、stage-X"></a>2、stage-X</h4><p>@babel/preset-stage-x</p><p>官方针对还未发布的js特性进行preset，使得一些比较前沿的js提案特性可以像已发版一样正常使用，preset-stage-x每年都会根据 TC39 会议动态变化，提案也是分阶段的，所以preset也会按照阶段进行区分。但是这个Stage Preset在Babel V7 版本中，和年份Preset（如es2015）一样，会被<strong>逐渐弃用</strong>。</p><p>拓展芝士：</p><ul><li><a href="https://babeljs.io/docs/en/babel-preset-stage-0" target="_blank" rel="noopener">Stage 0</a> - TC39成员一些想法提案能解决或者优化现有的问题</li><li><a href="https://babeljs.io/docs/en/babel-preset-stage-1" target="_blank" rel="noopener">Stage 1</a> - 上一阶段的一些比较靠谱而且被论证值得实现的提案</li><li><a href="https://babeljs.io/docs/en/babel-preset-stage-2" target="_blank" rel="noopener">Stage 2</a> - 到达草案阶段</li><li><a href="https://babeljs.io/docs/en/babel-preset-stage-3" target="_blank" rel="noopener">Stage 3</a> - 提案规范补充完整，一些浏览器已经开始支持</li><li>Stage 4 - 明确下一年度版本会添加这个阶段的更新，称为ECMAScript 标准</li></ul><p>现有的stage0-4提案都在这  <a href="https://github.com/tc39/proposals" target="_blank" rel="noopener">https://github.com/tc39/proposals</a></p><h4 id="3、创建自定义preset"><a href="#3、创建自定义preset" class="headerlink" title="3、创建自定义preset"></a>3、创建自定义preset</h4><p>只需<strong>export</strong>配置内容，包含数个已有的<strong>plugins</strong>和<strong>presets</strong>（记得在<code>package.json</code>中引入相应的包），publish到<code>npm</code>上，就可以像使用其他preset一样使用。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// custom-preset package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"babel-preset-custom-preset"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Joacyz &lt;joacycode@163.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-class-properties"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-object-rest-spread"</span>: <span class="string">"^6.3.15"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//custom-preset index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"@babel/preset-env"</span>),</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="built_in">require</span>(<span class="string">"@babel/plugin-proposal-class-properties"</span>), &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"@babel/plugin-proposal-object-rest-spread"</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这比自己开发Babel插件容易的多，可以参考这里开发一个自定义preset <a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/user-handbook.md#making-your-own-preset" target="_blank" rel="noopener">Making your own preset</a></p><p>如果不推送到npm，也可以在项目中使用绝对或者相对路径引用它们。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  <span class="attr">"presets"</span>: [<span class="string">"./myProject/custom-preset"</span>] &#125;</span><br></pre></td></tr></table></figure><h4 id="4、preset简写"><a href="#4、preset简写" class="headerlink" title="4、preset简写"></a>4、preset简写</h4><p>如果<code>preset</code>安装包是以<code>babel-preset-</code>作为前缀命名的，你就可以使用它的简写（同样适用于scoped packages）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"myPreset"</span>,</span><br><span class="line">    <span class="string">"babel-preset-myPreset"</span>, // <span class="number">1</span>、<span class="number">2</span>相等</span><br><span class="line">    <span class="string">"@aszero/myPreset"</span>,</span><br><span class="line">    <span class="string">"@aszero/babel-preset-myPreset"</span>,// <span class="number">3</span>、<span class="number">4</span>相等</span><br><span class="line">    <span class="string">"@babel/myPreset"</span>,</span><br><span class="line">    <span class="string">"@babel/preset-myPreset"</span>,// <span class="number">5</span>、<span class="number">6</span>相等</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、（逆向）执行顺序"><a href="#5、（逆向）执行顺序" class="headerlink" title="5、（逆向）执行顺序"></a>5、（逆向）执行顺序</h4><p>按照从后往前的逆向执行，确保向后兼容。比如大部分用户会把”es2015” 放在在 “stage-0”之前写，因为 “stage-0”相对于”es2015”会解析更为复杂、前沿或者说是更”不靠谱”的语法，可以理解为越靠前的preset解析就越基础、越普适。</p><h4 id="6、preset配置"><a href="#6、preset配置" class="headerlink" title="6、preset配置"></a>6、preset配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"presetA"</span>,</span><br><span class="line">    [<span class="string">"presetA"</span>],</span><br><span class="line">    [<span class="string">"presetA"</span>, &#123;&#125;], //三种写法相等</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h2><p>当前官方最重要的预设，满足对(ES2015, ES2016, etc.)的智能转换要求，可以让我们使用最新的js语法特性，这里的智能指的是可以根据当前你想要满足的环境要求进行<strong>最低开销</strong>的转义适配：对于最新高版本环境已经支持了的新特性，直接采用该新特性的写法，对于低版本不支持新特性的语法的环境则自动polyfill。</p><p>preset-env依赖一些优秀的开源库如 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener"><code>browserslist</code></a>, <a href="https://github.com/kangax/compat-table" target="_blank" rel="noopener"><code>compat-table</code></a>, and <a href="https://github.com/Kilian/electron-to-chromium" target="_blank" rel="noopener"><code>electron-to-chromium</code></a>。从这些数据源获得相应的环境与JS之间的支持匹配，从而智能的进行转义和polyfill。但是过分依赖这些数据源会导致，比如一些浏览器bug没有被compat-table标记上，那么preset-env依赖的core-js就不会对这些问题进行polyfill，即使core-js已经修复了这些问题。所以core-js从v3开始，使用自己的用于提供数据支持的库core-js-compat，以确保兼容可信度。</p><p><strong>值得注意的是</strong>，preset-env是不支持proposal阶段（stagex）的plugin的，也就是说这个预设不包含proposal的插件去支持该阶段的特性，默认不会对该阶段进行polyfill，所以如果明确要使用这个阶段的特性需要自己手动添加plugin或者修改配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">      corejs: &#123;</span><br><span class="line">        version: <span class="number">3</span>, </span><br><span class="line">        proposals: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>preset-env预设常用配置（options）</p><h4 id="1、target"><a href="#1、target" class="headerlink" title="1、target"></a>1、target</h4><blockquote><p>string | Array | { [string]: string }, defaults to {}.</p></blockquote><p>用来描述你的目标运行环境，如果不存在该配置字段默认采用<a href="https://github.com/browserslist/browserslist#query-composition" target="_blank" rel="noopener">Browserslist</a>的配置，Browserslist配置也没有就会默认转换所有的ES2015+的特性，这个我们开发时候要注意，转换所有的ES2015+的特性将会影响打包体积和性能。</p><p>可以用queries字符串形式（不区分大小写）你可以在这里看到query出来的设备有哪些<a href="https://browserl.ist/?q=&gt;+1%%2C+last+2+versions%2C+not+ie+&lt;%3D+8" target="_blank" rel="noopener">browser queries</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>%, last <span class="number">2</span> versions, not ie &lt;= <span class="number">8</span></span><br></pre></td></tr></table></figure><p>也可以明确列出设备和版本号（不区分大小写）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"iOS"</span>: <span class="string">"9"</span>,</span><br><span class="line">   <span class="attr">"Android"</span>: <span class="string">"4"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="常用安装：既需要transforming新语法，又需要polyfilling缺失的features"><a href="#常用安装：既需要transforming新语法，又需要polyfilling缺失的features" class="headerlink" title="常用安装：既需要transforming新语法，又需要polyfilling缺失的features"></a>常用安装：既需要transforming新语法，又需要polyfilling缺失的features</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br><span class="line"></span><br><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><h4 id="2、spec"><a href="#2、spec" class="headerlink" title="2、spec"></a>2、spec</h4><p>更加严格遵循规范转义，生成出来的代码质量更为优秀，但是潜在的问题是体积会更大，更为臃肿，这个参数会传递给preset下面所有的plugins，如果当前plugin支持这个参数。boolean，默认false。</p><h4 id="3、loose"><a href="#3、loose" class="headerlink" title="3、loose"></a>3、loose</h4><p>松散模式转义，并不严格遵循ES6语义上的要求规范，会转义成更为简单的ES5代码，这个参数会传递给preset下面所有的plugins，如果当前plugin支持这个参数。boolean，默认false。<a href="https://2ality.com/2015/12/babel6-loose-mode.html" target="_blank" rel="noopener">loose模式和正常模式的转义后的区别</a></p><h4 id="4、modules"><a href="#4、modules" class="headerlink" title="4、modules"></a>4、modules</h4><blockquote><p>“amd” | “umd” | “systemjs”  | “cjs” | “auto” | false</p></blockquote><p>指定将ES6模块转换成其他模块类型，默认auto</p><h4 id="5、debug"><a href="#5、debug" class="headerlink" title="5、debug"></a>5、debug</h4><p> 是否将preset配置信息打印出来，如果开启将会打印包括<code>target</code>列表，使用的<code>plugins</code>信息，<code>modules</code>，<code>useBuiltIns</code>，对你的哪些文件做了哪些polyfills等等。boolean，默认是false。</p><p><img src="/Users/zhangxiao15/Desktop/babel/debug_log.jpg" alt="debug_log"></p><h4 id="6、corejs"><a href="#6、corejs" class="headerlink" title="6、corejs"></a>6、corejs</h4><blockquote><p><code>2</code>, <code>3</code> or <code>{ version: 2 | 3, proposals: boolean }</code>, 默认为 <code>2</code></p></blockquote><p>Babelv7.4开始不再推荐用 <a href="https://babeljs.io/docs/en/babel-polyfill" target="_blank" rel="noopener">@babel/polyfill</a>，如果在以上的版本安装会收到警告让你去<strong>直接使用</strong><code>core-js</code> <code>regenerator-runtime</code>做polyfill。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">warning @babel/polyfill@7.8.7:  As of Babel 7.4.0, this</span><br><span class="line">package has been deprecated in favor of directly</span><br><span class="line">including core-js/stable (to polyfill ECMAScript</span><br><span class="line">features) and regenerator-runtime/runtime</span><br><span class="line">(needed to use transpiled generator functions):</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> import <span class="string">"core-js/stable"</span>;</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> import <span class="string">"regenerator-runtime/runtime"</span>;</span></span><br></pre></td></tr></table></figure><p>所以preset-env需要你装这些包做polyfill，这里<strong>注意两点</strong>，第一<code>core-js</code> <code>regenerator-runtime</code> 是做polyfill的需要在你的源码之前运行，必须装在dependency里而非devDependency，第二preset-env默认不支持Stage 4 以下的proposals的polyfill，需要启用参数proposals: true 。</p><h4 id="7、useBuiltIns"><a href="#7、useBuiltIns" class="headerlink" title="7、useBuiltIns"></a>7、useBuiltIns</h4><blockquote><p>“usage” | “entry” | false, 默认 false</p></blockquote><p><code>false</code> 只做了语法转换，在精确知道哪些特性需要polyfill，熟悉core-js前提下，自己手动引入polyfill包也可，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"core-js/es/promise"</span></span><br></pre></td></tr></table></figure><p> <code>entry</code> 会注入core-js所有的 modules引用，但现实情况是绝大部分都用不上，代码体积比较大。</p><p> <code>usage</code> 会自动检测代码（依赖target配置）在需要的地方进行modules注入polyfill（推荐这种方式）</p><p>注意所有的polyfill<strong>注入</strong>都是基于转换后的代码。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="Babel转换核心库-babel-core"><a href="#Babel转换核心库-babel-core" class="headerlink" title="Babel转换核心库  @babel/core"></a>Babel转换核心库  <a href="https://babeljs.io/docs/en/babel-core" target="_blank" rel="noopener">@babel/core</a></h4><h4 id="polyfill环境缺失特性-babel-polyfill"><a href="#polyfill环境缺失特性-babel-polyfill" class="headerlink" title="polyfill环境缺失特性  @babel/polyfill"></a>polyfill环境缺失特性  <a href="https://babeljs.io/docs/en/babel-polyfill" target="_blank" rel="noopener">@babel/polyfill</a></h4><p>介绍preset-env的配置参数core-js中提到，<strong>Babelv7.4开始不再推荐用</strong> <a href="https://babeljs.io/docs/en/babel-polyfill" target="_blank" rel="noopener">@babel/polyfill</a>，如果在以上的版本安装会收到警告让你去直接使用<code>core-js</code> <code>regenerator-runtime</code>做polyfill，配合preset-env进行<strong>最低开销</strong>的polyfill才是当下和未来的polyfill趋势。</p><p>所以如果使用7.4版本以上的Babel就可以暂时忽略使用这个方式polyfill，在stable的基础上尽量用新（版本）不用旧（版本）。</p><p><a href="https://babeljs.io/docs/en/v7-migration" target="_blank" rel="noopener">7.x升级方案</a></p><h4 id="命令行中使用babel-babel-cli"><a href="#命令行中使用babel-babel-cli" class="headerlink" title="命令行中使用babel  @babel/cli"></a>命令行中使用babel  <a href="https://babeljs.io/docs/en/babel-cli" target="_blank" rel="noopener">@babel/cli</a></h4><p>可以全局安装（global）也可以局部（<strong>locally</strong>）安装，更推荐后者。因为不同的项目在同一台机器上可能依赖的Babel版本不同，局部安装你可以单独去升级操作，而且项目环境中没有隐藏的依赖项，会让你的项目更方便独立操作。其他配置参数见文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel xx.js --watch --out-file xx-compiled.js</span><br></pre></td></tr></table></figure><h3 id="webpack中简单使用babel"><a href="#webpack中简单使用babel" class="headerlink" title="webpack中简单使用babel"></a>webpack中简单使用babel</h3><p>最基本的<code>babel-loader</code> <code>@babel/core</code>  <code>@babel/preset-env</code>，配合配置文件进行配置以及上述的官方支持的preset列表，满足大多数转换场景的使用，流程为<strong>安装-配置-使用</strong>。</p><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core  @babel/preset-env</span><br></pre></td></tr></table></figure><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那一年前端招人的部分笔试题</title>
      <link href="/posts/e87e7952/"/>
      <url>/posts/e87e7952/</url>
      
        <content type="html"><![CDATA[<p>部门人员补充秋招结束，当时自己贡献的几道笔试题也可以放出来了，主要是针对T2-T5职级研发使用的。主要涉及正则运用、git使用、linux了解、webpack使用、简单css能力、前端自驱力、js基础等考察，笔试并没有对react、vue、redux等框架运用和核心原理源码的涉及，但是在面试过程中这些框架有点到面的深入沟通。  </p><a id="more"></a><p>前端这个职业，首先最重要的是思维（解决问题的方式），比如实现业务的方式有无数种，你选择的那种是不是最优雅、最健壮、最拓展性，100行代码能解决的业务问题，你能不能50行甚至20行就解决，顺带实现前面提到的优雅、健壮、可拓展的问题；其次是基础的深入以及扎实程度，有扎实的基础才能透过现象看本质，才能看懂各种神奇的源码，就像一个孩子手中的积木多了才有可能搭建更稳固和好玩的东西；最后才是各种框架和库的熟练使用程度，使用框架是为了提高效率，而不是为了偷懒。如果一遇到问题就想有没有api可以调，那么工作中拔高程度就很有限，做的再优秀也只是个api调用工程师。</p><p>仅供参考，每个部门不同时间笔试题都不一样，只能参考我们秋招(社)出题思路是啥样的，笔试还是回归到力库刷题吧~（=。=）</p><blockquote><p>时间45分钟</p></blockquote><h4 id="使用正则去除价格小数位末尾无效’0’-例如-90-10-201-00-转换成-90-1和-201"><a href="#使用正则去除价格小数位末尾无效’0’-例如-90-10-201-00-转换成-90-1和-201" class="headerlink" title="使用正则去除价格小数位末尾无效’0’, 例如$90.10, $201.00, 转换成$90.1和$201"></a>使用正则去除价格小数位末尾无效’0’, 例如$90.10, $201.00, 转换成$90.1和$201</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trimZero = <span class="function">(<span class="params">_price</span>)=&gt;</span>&#123;</span><br><span class="line">true<span class="keyword">if</span>(<span class="keyword">typeof</span> _price !== <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> _price !== <span class="string">'number'</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'type error'</span>)</span><br><span class="line">true<span class="keyword">let</span> price = <span class="built_in">String</span>(_price)</span><br><span class="line">true<span class="keyword">let</span> priceArr = price.split(<span class="string">'.'</span>)</span><br><span class="line">true<span class="keyword">let</span> priceArrLen = priceArr.length</span><br><span class="line">true<span class="keyword">if</span> (priceArrLen === <span class="number">1</span>) <span class="keyword">return</span> price</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/0+\b/g</span></span><br><span class="line">true<span class="keyword">let</span> intPrice = priceArr[<span class="number">0</span>]</span><br><span class="line">true<span class="keyword">let</span> floatPrice = priceArr[<span class="number">1</span>]</span><br><span class="line">true<span class="keyword">let</span> freshFloatPrice = floatPrice.replace(reg,<span class="string">''</span>)</span><br><span class="line">true<span class="keyword">if</span>(freshFloatPrice)&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> intPrice+<span class="string">'.'</span>+freshFloatPrice</span><br><span class="line">true&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> intPrice</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用CSS写出实心三角形-▲-和一个箭头-gt-以及三字型状菜单图标-≡"><a href="#使用CSS写出实心三角形-▲-和一个箭头-gt-以及三字型状菜单图标-≡" class="headerlink" title="使用CSS写出实心三角形 ▲ 和一个箭头 &gt;  以及三字型状菜单图标 ≡"></a>使用CSS写出实心三角形 ▲ 和一个箭头 &gt;  以及三字型状菜单图标 ≡</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实心 */</span></span><br><span class="line">   &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 箭头 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#000</span> <span class="number">#000</span> transparent transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 菜单三字图片 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写出迁移Git仓库的流程的Git命令-假设原git仓库地址为git-jd-com-a-migration-git-新仓拟定为coding-jd-com-b-migration-git"><a href="#写出迁移Git仓库的流程的Git命令-假设原git仓库地址为git-jd-com-a-migration-git-新仓拟定为coding-jd-com-b-migration-git" class="headerlink" title="写出迁移Git仓库的流程的Git命令 , 假设原git仓库地址为git.jd.com/a/migration.git, 新仓拟定为coding.jd.com/b/migration.git"></a>写出迁移Git仓库的流程的Git命令 , 假设原git仓库地址为<code>git.jd.com/a/migration.git</code>, 新仓拟定为<code>coding.jd.com/b/migration.git</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> –bare https://git.jd.com/a/migration.git</span><br><span class="line"><span class="built_in">cd</span> migration.git</span><br><span class="line">git push –mirror https://coding.jd.com/b/migration.git</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf  migration.git</span><br><span class="line">git <span class="built_in">clone</span> https://coding.jd.com/b/migration.git</span><br></pre></td></tr></table></figure><h4 id="Javascript-中Set-Map的用法，以及应用场景"><a href="#Javascript-中Set-Map的用法，以及应用场景" class="headerlink" title="Javascript 中Set, Map的用法，以及应用场景"></a>Javascript 中Set, Map的用法，以及应用场景</h4><p>可以替代switch枚举，具有极快查找速度<br>set不存储value,key值不能重复<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Var dataMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">0</span>, ‘llily’).set(<span class="number">1</span>,’jim’)</span><br><span class="line">dataMap.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><h4 id="浏览器标签之间实时的通信方式"><a href="#浏览器标签之间实时的通信方式" class="headerlink" title="浏览器标签之间实时的通信方式"></a>浏览器标签之间实时的通信方式</h4><p>Postmessage      window.opener     window Parent     onmessage</p><p>同域名考虑使用onstorage</p><h4 id="请将如下数组-7-1-3-8-5-6-2-4-“拍平””排序”“删除最大数”-输出数组-1-2-3-4-5-6-7"><a href="#请将如下数组-7-1-3-8-5-6-2-4-“拍平””排序”“删除最大数”-输出数组-1-2-3-4-5-6-7" class="headerlink" title="请将如下数组[7,[1,3],[8,[5,6,[2,4]]]] “拍平””排序”“删除最大数”,  输出数组[1,2,3,4,5,6,7]"></a>请将如下数组<code>[7,[1,3],[8,[5,6,[2,4]]]]</code> “拍平””排序”“删除最大数”,  输出数组<code>[1,2,3,4,5,6,7]</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getRes = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getSingleArr = <span class="function">(<span class="params">originArr</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = []</span><br><span class="line">      <span class="keyword">const</span> generFn = <span class="function">(<span class="params">arr</span>)=&gt;</span> arr.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))&#123;</span><br><span class="line">              generFn(item)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              result.push(item)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      generFn(originArr)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> singleArr = getSingleArr(a)</span><br><span class="line">  <span class="keyword">const</span> sortsingleArr = singleArr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">  &#125;)</span><br><span class="line">  sortsingleArr.pop()</span><br><span class="line">  <span class="keyword">return</span> s<span class="string">`ortsingleArr</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Webpack打包构建可以采取哪些优化，提升构建速度和缩小打包体积-和Rollup的区别？"><a href="#Webpack打包构建可以采取哪些优化，提升构建速度和缩小打包体积-和Rollup的区别？" class="headerlink" title="Webpack打包构建可以采取哪些优化，提升构建速度和缩小打包体积 和Rollup的区别？"></a>Webpack打包构建可以采取哪些优化，提升构建速度和缩小打包体积 和Rollup的区别？</h4><p>很多方法，用过的优化plugin列出来，比如<code>dllPlugin</code>等</p><h4 id="你最近所了解的前瞻性的前端技术或者方向有哪些？"><a href="#你最近所了解的前瞻性的前端技术或者方向有哪些？" class="headerlink" title="你最近所了解的前瞻性的前端技术或者方向有哪些？"></a>你最近所了解的前瞻性的前端技术或者方向有哪些？</h4><p>如果关注前端圈的发展，其实很简单，随便说一些东西，比如GraphQL、serverLess、webAssembly、TypeScript项目、Vue3.0、PWA、DENO、Tink等等</p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell编程来实现一些自动化-基础篇</title>
      <link href="/posts/6b76c6f6/"/>
      <url>/posts/6b76c6f6/</url>
      
        <content type="html"><![CDATA[<p><code>Shell</code> 是一个用 <strong>C 语言编写的应用程序</strong>，该应用程序提供了一个界面，用户通过这个界面<strong>访问操作系统内核的服务</strong>，如可以让用户使用 <strong>Linux 命令</strong>。</p><p><code>Shell script</code>，是一种<strong>为 shell 编写的脚本程序</strong>。<code>shell</code> 和 <code>shell script</code> 是两个不同的概念，加以区分。后缀名一般是<code>.sh</code>。</p><p>常见的Linux的shell，以及默认的解释路径如下：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li></ul><p>常用的shell为前两种，<strong>bash为LinuxOS 默认的</strong>，它是 Bourne Shell （sh）的扩展。 <strong>与 Bourne Shell 完全兼容</strong>，并且在 Bourne Shell 的基础上增加了很多特性。可以提供命令补全，命令编辑和命令历史等功能。它还包含了很多 C Shell 和 Korn Shell 中的优点，有灵活和强大的编辑接口，同时又很友好的用户界面。</p><p>最简单的shell脚本的文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello theo !"</span></span><br></pre></td></tr></table></figure><p>其中第一行的<code>#!</code> 用来指定后面的shell脚本的解释程序路径，<code>/bin/bash</code>就是解释Shell 程序路径。</p><h3 id="执行shell脚本"><a href="#执行shell脚本" class="headerlink" title="执行shell脚本"></a>执行shell脚本</h3><p>现有一个shell脚本文件<code>theo.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello theo !"</span></span><br></pre></td></tr></table></figure><h4 id="如果在第一行声明了解释器的路径，linux-shell中可以直接使用sh命令运行shell脚本"><a href="#如果在第一行声明了解释器的路径，linux-shell中可以直接使用sh命令运行shell脚本" class="headerlink" title="如果在第一行声明了解释器的路径，linux shell中可以直接使用sh命令运行shell脚本"></a>如果在第一行声明了解释器的路径，linux shell中可以直接使用<code>sh</code>命令运行shell脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh theo.sh</span></span><br></pre></td></tr></table></figure><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><p>可以参考以前说过的<code>chmod</code>命令，可以改变文件的读写以及可执行权限，这里就可以把这个bash文件变成可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -x ./theo.sh</span><br><span class="line">$ ./theo.sh</span><br></pre></td></tr></table></figure><h4 id="直接将文件作为解释器的参数去运行解释器"><a href="#直接将文件作为解释器的参数去运行解释器" class="headerlink" title="直接将文件作为解释器的参数去运行解释器"></a>直接将文件作为解释器的参数去运行解释器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这种情况下不需要在文件第一行声明解释器路径</span></span><br><span class="line">$ /bin/bash ./theo.sh</span><br></pre></td></tr></table></figure><h3 id="在shell脚本中写命令"><a href="#在shell脚本中写命令" class="headerlink" title="在shell脚本中写命令"></a>在shell脚本中写命令</h3><p>用 <strong>``</strong>符号或者<strong>$()</strong>包裹起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure><h3 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>shell变量和熟知的其他语言的变量略微不同，如变量名不需要声明类型、不需要加特殊标识符号、变量名和值之间的等号不能有空格。命名只能使用英文字母，数字和下划线组成，首字符不能是数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#合法</span></span><br><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="comment">#非法</span></span><br><span class="line">USER_NAME = <span class="string">"theo"</span></span><br><span class="line">100_USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="variable">$USER_NAME</span>=<span class="string">"theo"</span></span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>定义过的变量前加<code>$</code>符号，即可使用变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$USER_NAME</span></span><br><span class="line"><span class="comment">#或推荐加上花括号，识别变量边界，bian</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;USER_NAME&#125;</span></span><br></pre></td></tr></table></figure><h4 id="覆盖变量"><a href="#覆盖变量" class="headerlink" title="覆盖变量"></a>覆盖变量</h4><p>变量定义之后，该变量非<strong>只读变量</strong>，就可以重新被定义覆盖原始值。只读变量不可被重新定义，否则报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;USER_NAME&#125;</span></span><br><span class="line">USER_NAME=<span class="string">"TheoCode"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;USER_NAME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只读变量</span></span><br><span class="line"><span class="built_in">readonly</span> USER_NAME</span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p>删除变量后变量就如同没有定义一样，输出空，注意不能删除只读变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line">_READONLY_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="built_in">unset</span> USER_NAME</span><br><span class="line"><span class="comment">#只读变量</span></span><br><span class="line"><span class="built_in">readonly</span> _READONLY_NAME</span><br><span class="line"><span class="comment">#删除只读变量 报错 unset: _READONLY_NAME: cannot unset: readonly variable</span></span><br><span class="line"><span class="built_in">unset</span> _READONLY_NAME</span><br></pre></td></tr></table></figure><h3 id="Shell传参与运算"><a href="#Shell传参与运算" class="headerlink" title="Shell传参与运算"></a>Shell传参与运算</h3><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p>脚本有些时候需要根据shell执行人的意志传入一些动态参数，满足不同场景下的执行方案。shell的传参和获取也非常便捷，入参就在调用的该shell文件后面增加，多个参数用空格分隔；获取参数时候用<strong>$n</strong>，<strong>$0</strong>表示文件名，其他数字按顺序表示入参。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh test.sh fst sec</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"文件名：<span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数: <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个参数: <span class="variable">$2</span>"</span></span><br><span class="line"><span class="comment">#文件名：test.sh</span></span><br><span class="line"><span class="comment">#第一个参数: fst</span></span><br><span class="line"><span class="comment">#第二个参数: sec</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$[N]</td><td style="text-align:left">文件名以及入参信息</td></tr><tr><td style="text-align:center">$@</td><td style="text-align:left">分别显示所有入参</td></tr><tr><td style="text-align:center">$*</td><td style="text-align:left">一个字符串显示所有入参</td></tr><tr><td style="text-align:center">$#</td><td style="text-align:left">入参数量</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"文件名：<span class="variable">$#</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"所有参数: $*"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"所有参数: <span class="variable">$@</span>"</span></span><br><span class="line"><span class="comment">#文件名：2</span></span><br><span class="line"><span class="comment">#所有参数: fst sec</span></span><br><span class="line"><span class="comment">#所有参数: fst sec</span></span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A=99</span><br><span class="line">B=999</span><br><span class="line">STRING_TEST=<span class="string">"ImZero"</span></span><br></pre></td></tr></table></figure><p><strong>算术运算符，</strong>shell中支持算术运算需要借助 <code>expr 表达式</code>命令或者在<strong>mac中</strong>shell使用<code>$((表达式))</code>，才能完成算术运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VAL=`expr <span class="variable">$A</span> + <span class="variable">$B</span>`</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">VAL=$((<span class="variable">$A</span> + <span class="variable">$B</span>))</span><br></pre></td></tr></table></figure><p><mark>注意</mark> 算术运算的乘法<strong>*</strong>要使用转义字符，且运算符左右两边都要留有空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VAL=`expr <span class="variable">$A</span> \* <span class="variable">$B</span>`</span><br></pre></td></tr></table></figure><p><strong>关系运算符</strong>，主要有相等 <code>-eq</code>、不相等<code>-ne</code>、大于(等于)<code>-gt</code> <code>-ge</code>、小于(等于)<code>-lt</code> <code>-le</code>几种关系，其中等于和不等于条件表达式可以用算术运算符表示。条件表达式需要用 <code>[]</code>包裹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [ <span class="variable">$A</span> -eq <span class="variable">$B</span> ] <span class="comment"># [$A == $B]</span></span><br><span class="line"><span class="built_in">echo</span> [ <span class="variable">$A</span> -ne <span class="variable">$B</span> ]  <span class="comment"># [$A != $B]</span></span><br></pre></td></tr></table></figure><p><strong>布尔运算符</strong>，与或非，分别用<code>-a</code> <code>-o</code> <code>!</code>表示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示判断A小于100且要B大于1000是否成立</span></span><br><span class="line"><span class="built_in">echo</span> [ <span class="variable">$A</span> -lt 100 -a <span class="variable">$B</span> -gt 1000 ]</span><br><span class="line"><span class="comment"># 表示判断A小于100或B大于1000是否成立</span></span><br><span class="line"><span class="built_in">echo</span> [ <span class="variable">$A</span> -lt 100 -o <span class="variable">$B</span> -gt 1000 ]</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符</strong>，与或，分别用<code>&amp;&amp;</code> <code>||</code>表示，条件逻辑运算要使用<code>[[条件逻辑运算]]</code><strong>双中括号</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示判断A小于100且要B大于1000是否成立</span></span><br><span class="line"><span class="built_in">echo</span> [[ <span class="variable">$A</span> -lt 100 &amp;&amp; <span class="variable">$B</span> -gt 1000 ]]</span><br><span class="line"><span class="comment"># 表示判断A小于100或B大于1000是否成立</span></span><br><span class="line"><span class="built_in">echo</span> [[ <span class="variable">$A</span> -lt 100 || <span class="variable">$B</span> -gt 1000 ]]</span><br></pre></td></tr></table></figure><p>关于<strong>单中括号</strong>、<strong>双中括号</strong>其他说明：在 <code>[]</code> 表达式中，常见的 <code>&gt;</code>, <code>&lt;</code> 需要加转义字符，逻辑运算符 <code>||</code> 、<code>&amp;&amp;</code> ，它需要用 <code>-a[and]</code> <code>–o[or]</code> 表示。<code>[[]]</code> 运算符只是 <code>[]</code> 运算符的扩充，能够支持 &gt;, &lt; 符号运算不需要转义符，支持逻辑运算符<code>||</code> <code>&amp;&amp;</code> ，不再使用 <code>-a[and]</code> <code>–o[or]</code> 。</p><p><strong>字符串运算符</strong>，检测当前字符串的语法糖符号，比如字符串为不为空，字符串长度是否为0，是否相等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测字符串是否为空</span></span><br><span class="line"><span class="built_in">echo</span> [<span class="variable">$STRING_TEST</span>] <span class="comment">#不为空返回 true</span></span><br><span class="line"><span class="comment"># 检测字符串长度是否为0</span></span><br><span class="line"><span class="built_in">echo</span> [-z <span class="variable">$STRING_TEST</span>] <span class="comment">#长度为0返回 true</span></span><br></pre></td></tr></table></figure><p><strong>文件测试运算符</strong>，文件测试运算符用于检测 Unix 文件的各种属性。<strong>常用</strong>的操作符如下：</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:left">检测文件是否是目录，如果是，则返回 true。</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:left">检测文件是否可读，如果是，则返回 true</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:left">检测文件是否可写，如果是，则返回 true</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:left">检测文件是否可执行，如果是，则返回 true</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:left">检测文件（包括目录）是否存在，如果是，则返回 true。</td></tr></tbody></table><h3 id="Shell字符串"><a href="#Shell字符串" class="headerlink" title="Shell字符串"></a>Shell字符串</h3><h4 id="字符串定义"><a href="#字符串定义" class="headerlink" title="字符串定义"></a>字符串定义</h4><p>shell中字符串可以用单引号也可以用双引号，两者的用法还是有区别的。单引号表示字符串，内部不能包含变量，所有字符都会原样输出；双引号表示字符串，内部可以包含变量，出现转义字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line">USER_JOB=<span class="string">'does something interesting'</span></span><br><span class="line">theo_JOB=<span class="string">"<span class="variable">$&#123;USER_NAME&#125;</span> does something interesting"</span></span><br></pre></td></tr></table></figure><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><p>获取字符串长度，使用方法：<code>\${\#[String]}</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#USER_NAME&#125;</span> <span class="comment">#输出6</span></span><br></pre></td></tr></table></figure><p>提取子字符串，使用方法：${[String]:Index:Length}，从什么地方开始截取多少字符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;USER_NAME:0:2&#125;</span> <span class="comment">#as</span></span><br></pre></td></tr></table></figure></p><p>查找子字符串位置，使用方法：<code>expr index &quot;[String]&quot; [String_child]</code>，执行命令用的``或者$()都可以。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER_NAME=<span class="string">"theo"</span></span><br><span class="line"><span class="built_in">echo</span>  `expr index <span class="string">"<span class="variable">$USER_NAME</span>"</span> z` <span class="comment">#输出3</span></span><br></pre></td></tr></table></figure></p><h3 id="Shell数组"><a href="#Shell数组" class="headerlink" title="Shell数组"></a>Shell数组</h3><p>shell支持一维数组，用括号来表示数组，数组元素用”空格”符号分割开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组名=(值1 值2 ... 值n)</span></span><br><span class="line">STU_NAMES=(<span class="string">"Ella"</span> <span class="string">"Zrus"</span> <span class="string">"Coco"</span>)</span><br><span class="line"><span class="comment"># 单独定义</span></span><br><span class="line">STU_NAMES[0]=<span class="string">"Ella"</span></span><br><span class="line">STU_NAMES[1]=<span class="string">"Zrus"</span></span><br><span class="line">STU_NAMES[2]=<span class="string">"Coco"</span></span><br></pre></td></tr></table></figure><p>输出数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出全部</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;STU_NAMES[@]&#125;</span></span><br><span class="line"><span class="comment"># 按下标输出 从0开始</span></span><br><span class="line"><span class="built_in">echo</span> $&#123;STU_NAMES[n]</span><br></pre></td></tr></table></figure><p>获取数组长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array_name[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Shell函数"><a href="#Shell函数" class="headerlink" title="Shell函数"></a>Shell函数</h3><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] <span class="function"><span class="title">funname</span></span>()&#123;</span><br><span class="line">    action;</span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>return后面跟<strong>数值0-255</strong>，不能超过这个范围，如果没有return，将以最后一条命令运行结果，作为返回值。</li><li>所有函数在<strong>使用前必须定义</strong>。</li><li>函数<strong>返回值</strong>在调用该函数后通过 <strong>$?</strong> 来获得，<strong>$?</strong> 仅对其上一条指令负责。</li><li>函数入参直接连在函数名后面，多个参数空格隔开。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fn</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"第一个函数参数：<span class="variable">$1</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"全部函数参数个数：<span class="variable">$#</span>"</span></span><br><span class="line">  <span class="built_in">return</span> 249</span><br><span class="line">&#125;</span><br><span class="line">fn 1 2 3</span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment">#第一个函数参数：1</span></span><br><span class="line"><span class="comment">#全部函数参数个数：3</span></span><br><span class="line"><span class="comment">#249</span></span><br></pre></td></tr></table></figure><h3 id="Shell流程控制"><a href="#Shell流程控制" class="headerlink" title="Shell流程控制"></a>Shell流程控制</h3><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line"><span class="keyword">elif</span> <span class="comment"># else-if</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">command3</span><br><span class="line"><span class="keyword">fi</span>  <span class="comment"># 结束标记</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>输出<code>/etc</code>下面所有的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br></pre></td></tr></table></figure></p><p>顺序输出当前列表中的数字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value is: <span class="variable">$loop</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo "单行注释"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fn</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"多行注释"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shell中常用的linux命令"><a href="#shell中常用的linux命令" class="headerlink" title="shell中常用的linux命令"></a>shell中常用的linux命令</h3><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><h4 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h4><h4 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h4><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见模块化规范研究记录</title>
      <link href="/posts/e7485c24/"/>
      <url>/posts/e7485c24/</url>
      
        <content type="html"><![CDATA[<p>虽然对模块化这些规范很熟悉，因为频繁遇到所以还是重新梳理一遍，有疑问的地方做个实践论证。重点研究分析EsModule和cjs，cmd、amd、umd则会只研究基本概念和常用方案。<br><a id="more"></a></p><h2 id="ES-Module-重点"><a href="#ES-Module-重点" class="headerlink" title="ES Module(重点)"></a>ES Module(重点)</h2><ul><li>旨在成为浏览器和服务器通用的模块化解决方案，模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</li><li><code>import</code>命令会被 JavaScript 引擎静态分析。当遇到模块加载命令<code>import</code>，会生成一个只读引用（ES6的模块不是对象而是值的引用），等运行时，再根据这个只读引用去被加载的模块取值。所以编译时候就引入了模块代码，而非代码运行时引入，所以无法实现执行条件加载或者字符串拼接路径之类的，这种加载称为<strong>编译时加载</strong>。</li><li>ESM的模块输出的是值的引用而非拷贝，所以内部改变变量会改变export出的值。</li></ul><h3 id="与CommonJs的引入关系"><a href="#与CommonJs的引入关系" class="headerlink" title="与CommonJs的引入关系"></a>与CommonJs的引入关系</h3><p><code>ES Module</code> import也可以引入<code>Commonjs</code>的模块，模块得使用Commonjs规范编写，后缀名为<code>.cjs</code>或者模块自身的package.json中设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"type": "commonJs”</span><br></pre></td></tr></table></figure><h3 id="在Node环境中支持情况"><a href="#在Node环境中支持情况" class="headerlink" title="在Node环境中支持情况"></a>在Node环境中支持情况</h3><p>Node版本 &gt;=13.2.0 直接支持 </p><p>Node版本 &lt;13.2.0 如12的版本添加<code>--experimental-module</code> ，低于12版本的则不支持</p><p>Node环境中的加载支持都需要用<code>.mjs</code>扩展后缀或者在<code>package.json</code>中设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"type": "module"</span><br></pre></td></tr></table></figure><h3 id="在浏览器环境支持情况"><a href="#在浏览器环境支持情况" class="headerlink" title="在浏览器环境支持情况"></a>在浏览器环境支持情况</h3><ul><li>安全策略更严格，<strong>非同域脚本</strong>的加载受 CORS 策略限制</li><li>服务器端提供 ES Module 资源时，必须返回有效的属于 JavaScript 类型的 Content-Type 头如<code>text/javascript</code></li></ul><p>目前主流浏览器都已经对于ES Module支持。 给 <code>script</code> 标签添加 <code>type=module</code> 属性，就可以让浏览器以 ES Module 的方式加载脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">src</span>=<span class="string">'x'</span> /&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span>&gt;</span><span class="undefined"></span></span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// do something</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对非内联script的<code>defer</code>和<code>async</code>，无论在什么位置都不会阻塞HTML的解析，它们的区别是<code>async</code>是下载完立刻执行不会按照脚本在页面上的顺序，<code>defer</code>是按脚本的顺序执行。内联script的<code>defer</code>和<code>async</code>不生效。</p><p> module的script下载和执行同样不阻塞HTML解析器，无论内联还是外联，模块之间是按照顺序执行的。给 script 标签显式指定 <code>async</code>  <code>defer</code> 行为属性。但添加<code>defer</code>并没有意义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">src</span>=<span class="string">'x'</span> <span class="attr">async</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// do something</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>远程 script 根据 URL 作为判断唯一性的 Key，决定进行一次还是多次执行。URL 是<strong>同一路径下</strong>的模块多次加载只会进行一次执行，<code>div#counter</code>的<code>data-count</code>属性值是<code>1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'counter'</span>);</span><br><span class="line"><span class="keyword">const</span> countNum = <span class="built_in">parseInt</span>(el.dataset.count.trim() || <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">el.dataset.count = countNum++;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">src</span>=<span class="string">'./a.js'</span> <span class="attr">async</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">src</span>=<span class="string">'./a.js'</span> <span class="attr">async</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">module</span> <span class="attr">src</span>=<span class="string">'./a.js'</span> <span class="attr">async</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES-Module循环引用的问题"><a href="#ES-Module循环引用的问题" class="headerlink" title="ES Module循环引用的问题"></a>ES Module循环引用的问题</h3><p>ES6模块不会缓存运行结果，而是动态地去被加载的模块取值，以及变量总是绑定其所在的模块。<strong>ES6根本不会关心是否发生了”循环加载”，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</strong></p><p><mark>注意!!</mark> ES Module循环引用一定要有<strong>跳出机制</strong>，不然就会堆栈溢出，像下面这样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RangeError: Maximum call stack size exceeded</span><br><span class="line">    at afn (file:///Users/aszero/sourcecode/lab/modules/a.mjs:3:20)</span><br><span class="line">    at bfn (file:///Users/aszero/sourcecode/lab/modules/b.mjs:4:3)</span><br><span class="line">    at afn (file:///Users/aszero/sourcecode/lab/modules/a.mjs:4:3)</span><br><span class="line">    at bfn (file:///Users/aszero/sourcecode/lab/modules/b.mjs:4:3)</span><br><span class="line">    at afn (file:///Users/aszero/sourcecode/lab/modules/a.mjs:4:3)</span><br><span class="line">    at bfn (file:///Users/aszero/sourcecode/lab/modules/b.mjs:4:3)</span><br><span class="line">    at afn (file:///Users/aszero/sourcecode/lab/modules/a.mjs:4:3)</span><br><span class="line">    at bfn (file:///Users/aszero/sourcecode/lab/modules/b.mjs:4:3)</span><br><span class="line">    at afn (file:///Users/aszero/sourcecode/lab/modules/a.mjs:4:3)</span><br><span class="line">    at bfn (file:///Users/aszero/sourcecode/lab/modules/b.mjs:4:3)</span><br></pre></td></tr></table></figure><p>举个循环应用的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; bfn &#125; <span class="keyword">from</span> <span class="string">'./b.mjs'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">afn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'afn执行，开始调用bfn'</span>)</span><br><span class="line">  bfn()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'afn执行完毕'</span>)</span><br><span class="line">&#125;</span><br><span class="line">afn()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; afn &#125; <span class="keyword">from</span> <span class="string">'./a.mjs'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bfn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> randomNum = <span class="built_in">Math</span>.random()</span><br><span class="line">  <span class="built_in">console</span>.log(randomNum &gt; <span class="number">0.5</span> ? <span class="string">'bfn进入条件'</span> : <span class="string">'bfn返回空'</span>)</span><br><span class="line">  <span class="keyword">if</span> (randomNum &gt; <span class="number">0.5</span>) &#123; <span class="comment">// 随机跳出机制</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bfn执行，开始调用afn'</span>)</span><br><span class="line">    afn()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bfn执行完毕'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的随机数就是循环引用的跳出机制</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node a.mjs</span></span><br></pre></td></tr></table></figure><p>打印的结果有很多种可能性，因为是根据随机数的条件随机退出的，我们取一组数据看一下运行流程</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">afn执行，开始调用bfn <span class="comment">// a</span></span><br><span class="line">bfn进入条件 <span class="comment">// a - b</span></span><br><span class="line">bfn执行，开始调用afn <span class="comment">// a - b</span></span><br><span class="line">afn执行，开始调用bfn <span class="comment">// a - b - a</span></span><br><span class="line">bfn返回空 <span class="comment">// a - b - a - b 退出机制返回空</span></span><br><span class="line">afn执行完毕 <span class="comment">// a - b - a</span></span><br><span class="line">bfn执行完毕 <span class="comment">// a - b</span></span><br><span class="line">afn执行完毕 <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>上面可以看出ES module执行的时候是忽略<code>import</code>加载，<strong>模块加载命令import时不会去执行模块</strong>，只是生成一个指向被加载模块的引用，需要开发者保证真正取值时能够取到值，只要引用是存在的，代码就能执行。</p><p>上面的字母表示了执行的流程，分析如下，首先执行<code>afn</code> (<strong>链路a</strong>)，调用bfn，进入<code>bfn</code>(<strong>链路a-b</strong>)如果满足条件进入循环引用调用<code>afn</code>，此时回到<code>afn</code>(<strong>链路a-b-a</strong>)再调用<code>bfn</code>，进入<code>bfn</code>(<strong>链路a-b-a-b</strong>)不满足进入循环引用的条件退出循环，返回空，那么上一层<code>afn</code>(<strong>链路a-b-a</strong>)继续执行完毕，再上一层引用这个<code>afn</code>的bfn(<strong>链路a-b</strong>)也执行完毕，同时引用这个<code>bfn</code>的<code>afn</code>(<strong>链路a</strong>)也执行完毕。</p><h2 id="CommonJs-重点"><a href="#CommonJs-重点" class="headerlink" title="CommonJs (重点)"></a>CommonJs (重点)</h2><ul><li><strong>同步加载机制，常见于NodeJs</strong>。在Node环境使用<code>module</code>、<code>exports</code>、<code>require</code>、 <code>filename</code>、 <code>dirname</code>提供模块化支持。</li><li>CommonJS 的模块<strong>输出的是值的浅拷贝</strong>，内部改变变量不会改变exports出的值。模块就是对象（即<code>module.exports</code>属性），等到运行时才把模块挂载在exports之上，加载模块其实就是查找对象属性，这种加载称为<strong>运行时加载</strong>。node中模块导入require是一个内置的函数，因此只有在运行后我们才可以得知模块导出内容，无法做静态分析。</li><li>同步加载，代码在本地，加载时间基本等于硬盘读取时间。浏览器环境不支持CommonJS。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="exports-vs-module-exports"><a href="#exports-vs-module-exports" class="headerlink" title="exports vs module.exports"></a>exports vs module.exports</h3><ul><li>module.exports 默认值为{}</li><li>exports 是 module.exports 的引用</li><li>exports 默认指向 module.exports 的内存空间</li><li>require() 返回的是 module.exports 而不是 exports</li><li>若对 exports 重新赋值，则断开了 exports 对 module.exports 的指向</li></ul><h3 id="commonJS循环引用的问题"><a href="#commonJS循环引用的问题" class="headerlink" title="commonJS循环引用的问题"></a>commonJS循环引用的问题</h3><p>CommonJS模块的重要特性是加载时执行，即脚本代码在<code>require</code>的时候，就会全部执行。<strong>CommonJS的做法是，一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</strong> 下面我做了个图方便理解，图中序号是执行顺序。</p><blockquote><p>例如 a.js引用b.js，b.js中也引用了a.js，那么a.js代码在执行到引用b.js的时候<strong>require(b.js)</strong>(图中流程2节点)，停止执行下面的代码去加载b.js并执行，在b.js中执行到又引用a.js的时候<strong>require(a.js)</strong>(图中流程4节点)，这时候a.js已经执行了多少输出b.js就引入多少(图中流程1节点输出)，b.js保持继续执行直到执行完毕(图中流程5节点)，这时候就回到a.js(图中流程6节点)加载执行b.js中断执行的地方继续执行，这时候也可以用b.js的输出值(图中流程5节点输出)。</p></blockquote><p><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/esmod-circle_cjs.jpg" width="100%"></p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><ul><li><strong>异步加载机制</strong>，模块的加载不影响后面语句的执行。依赖部分会在执行完成之后的回调中定义。</li><li>AMD举例<strong>require.js</strong>实现AMD规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。</li><li>AMD/CMD是CommonJS在浏览器端的解决方案。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网页中引入require.js及main.js</span></span><br><span class="line">&lt;script src=<span class="string">"js/require.js"</span> data-main=<span class="string">"js/main"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// config()指定各模块路径和引用名</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">  baseUrl: <span class="string">"js/lib"</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,  <span class="comment">//实际路径为js/lib/jquery.min.js</span></span><br><span class="line">    <span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 引用模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"underscore"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,_</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义的模块本身如果也需要依赖</span></span><br><span class="line">define([<span class="string">'underscore'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">_</span>)</span>&#123;</span><br><span class="line">   <span class="comment">// some code here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD是另一种js模块化方案，它与AMD很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD推崇<strong>依赖就近、延迟执行</strong>。CMD举例<strong>sea.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** AMD写法 **/</span></span><br><span class="line">define([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d, e, f</span>) </span>&#123; </span><br><span class="line">     <span class="comment">// 等于在最前面声明并初始化了要用到的所有模块</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 即便没用到某个模块 b，但 b 还是提前执行了</span></span><br><span class="line">        b.doSomething()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** CMD写法 **/</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); <span class="comment">//在需要时申明</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">        b.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/** sea.js **/</span></span><br><span class="line"><span class="comment">// 定义模块 math.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>);</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    exports.add = add;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.use([<span class="string">'math.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = math.add(<span class="number">1</span>+<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>是AMD和CommonJS的糅合，跨平台的解决方案。</p><p><code>AMD</code> 模块以浏览器第一的原则发展，异步加载模块。 <code>CommonJS</code> 模块以服务器第一原则发展，选择同步加载。它的模块无需包装(unwrapped modules)。 这迫使人们又想出另一个更通用的模式 <code>UMD</code>（Universal Module Definition)，实现跨平台的解决方案。<code>UMD</code> 先判断支持 <code>Node.js</code> 的模块（<code>exports</code>）是否存在，存在则使用 <code>Node.js</code> 模块模式。再判断是否支持 <code>AMD</code>（<code>define</code> 是否存在），存在则使用 <code>AMD</code> 方式加载模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">     </span><br><span class="line">        define(factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="built_in">window</span>.eventUtil = factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//module ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的rollup</title>
      <link href="/posts/7b16fe01/"/>
      <url>/posts/7b16fe01/</url>
      
        <content type="html"><![CDATA[<p>简单总结打包工具选择：应用的打包选择webpack，模块和库的打包选择rollup更为合适。</p><p>rollup的打包小体积的代码速度更快，体积更小。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --global rollup</span></span><br></pre></td></tr></table></figure><p> 项目内安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev rollup</span><br></pre></td></tr></table></figure><p>当然也可以使用<code>yarn</code>进行安装，安装方式和npm类似。</p><p>使用rollup有两种方式，<code>command line interface</code>或者<code>js api</code>，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用配置文件</span></span><br><span class="line">$ rollup -c rollup.config.js</span><br><span class="line"><span class="comment"># 或者命令行参数</span></span><br><span class="line">$ rollup src/index.js --file dist/index.js --format umd --name soundbarCore</span><br></pre></td></tr></table></figure><p>命令行参数其实就是rollup的运行配置，告诉rollup如何进行运行，如入口文件，输出文件，打包输出格式以及名称等等。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下面就研究下rollup的配置，整个rollup的了解就基本到位了。</p><p>官方文档的配置列表里，截取了满足绝大数场景常用的配置参数，下面列举配置文件和命令行常用的配置参数。其他更多参数也很少用，如果需要可以去官网查字典。</p><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input, # 入口文件 类似webpack string | string [] | &#123; [entryName: string]: string &#125;</span><br><span class="line">  output:&#123;</span><br><span class="line">    dir, # 输出的包所在目录，当多个包生成时候是必要的</span><br><span class="line">    name, # 模块名可以代表你输出的模块 在iife/umd 打包类型下使用</span><br><span class="line">truetruefile, # 输出文件名，在只有一个包生成时候使用</span><br><span class="line">    format, # 打包类型，下面详解</span><br><span class="line">    globals, # 配合external使用全局变量，下面详解</span><br><span class="line">    assetFileNames,</span><br><span class="line">    chunkFileNames,</span><br><span class="line">    sourcemap</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[], # 强大的插件机制，下面详解</span><br><span class="line">  cache, # 高级用法</span><br><span class="line">  external, # 打包需要排除的文件、模块或者文件夹，第三方外部依赖(string | RegExp)[] | RegExp | string </span><br><span class="line">  treeshake, # 高级用法</span><br><span class="line">  watch:&#123;</span><br><span class="line">  buildDelay,</span><br><span class="line">    chokidar,</span><br><span class="line">    clearScreen,</span><br><span class="line">    skipWrite,</span><br><span class="line">    exclude,</span><br><span class="line">    include</span><br><span class="line">true&#125; | <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件中的这些配置在命令行中基本都有对应的配置参数，往往缩写较为常见，如<code>-o</code> 等同于<code>file</code>，<code>-f</code>等同于<code>format</code>等等。如果在命令行中使用这些参数，这些参数的值优先级会高于配置文件<code>rollup.config.js</code>，即<strong>命令行参数会覆盖掉配置文件的相同配置项</strong>。</p><h4 id="CLI配置"><a href="#CLI配置" class="headerlink" title="CLI配置"></a>CLI配置</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">c, --config &lt;filename&gt;     指定配置文件，默认rollup.config.js</span></span><br><span class="line"><span class="ruby">-d, --dir &lt;dirname&gt;         chunks目录</span></span><br><span class="line"><span class="ruby">-e, --external &lt;ids&gt;        Comma-separate list of <span class="class"><span class="keyword">module</span> <span class="title">IDs</span> <span class="title">to</span> <span class="title">exclude</span></span></span></span><br><span class="line"><span class="ruby">-f, --format &lt;format&gt;       输出类型 (amd, cjs, es, iife, umd, system)</span></span><br><span class="line"><span class="ruby">-g, --globals &lt;pairs&gt;       Comma-separate list of <span class="string">`moduleID:Global`</span> pairs</span></span><br><span class="line"><span class="ruby">-i, --input &lt;filename&gt;      入口文件</span></span><br><span class="line"><span class="ruby">-m, --sourcemap             Generate sourcemap (<span class="string">`-m inline`</span> <span class="keyword">for</span> inline map)</span></span><br><span class="line"><span class="ruby">-n, --name &lt;name&gt;           输出类型选择UMD时，输出的模块名称</span></span><br><span class="line"><span class="ruby">-o, --file &lt;output&gt;         输出文件</span></span><br><span class="line"><span class="ruby">-p, --plugin &lt;plugin&gt;       指定使用的插件</span></span><br><span class="line"><span class="ruby">-v, --version               rollup版本号</span></span><br><span class="line"><span class="ruby">-w, --watch                 Watch files <span class="keyword">in</span> bundle <span class="keyword">and</span> rebuild on changes</span></span><br></pre></td></tr></table></figure><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>Type:  <code>string | string [] | { [entryName: string]: string }</code></p><p>入口文件，也是必要配置之一，可以是字符串（单入口），也可以是数组（多入口），如果<code>output.file</code>没有设置那么会根据入口文件进行打包输出，输出名会依据<code>output.entryFileNames</code>进行设定。举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="comment">// input: 'src/main-a.js',</span></span><br><span class="line">  input: &#123;</span><br><span class="line">    a: <span class="string">'src/main-a.js'</span>,</span><br><span class="line">    <span class="string">'b/index'</span>: <span class="string">'src/main-b.js'</span> <span class="comment">//注意key值写法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    entryFileNames: <span class="string">'entry-[name].js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果入口文件是字符串，那么output的<code>[name]</code>就是文件名，如果是对象<code>[name]</code>就是每一个子元素的属性。</p><p><code>entry-b</code>为一个文件夹，在没有指定<code>output.file</code>的情况下，上述配置将会按照<code>input</code>和<code>entryFileNames</code>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── entry-<span class="selector-tag">a</span>.js</span><br><span class="line">└── entry-b</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure><p>当使用<code>CLI</code>的时候，<code>--input</code>如果在首参位置可以省略，在之后每个入口值之前都需要加<code>--input</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rollup --format es --input src/entry1.js --input src/entry2.js</span><br><span class="line"><span class="comment"># is equivalent to</span></span><br><span class="line">$ rollup src/entry1.js src/entry2.js --format es</span><br></pre></td></tr></table></figure><p>文件名中<strong>含有空格</strong>是合法的，但是记得要用引号括起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup <span class="string">"src/entry 1.js"</span> <span class="string">"src/entry 2.js"</span> --format es</span><br></pre></td></tr></table></figure><h4 id="output-globals"><a href="#output-globals" class="headerlink" title="output.globals"></a>output.globals</h4><p>Type: <code>{ [id: string]: string } | ((id: string) =&gt; string)</code></p><p>外部依赖包的全局变量别名配置，尤其当使用<code>iife</code> <code>umd</code>打包类型，引入了外部依赖包，要告知rollup当前模块id对应的全局变量是什么，比如引入的<code>jquery</code>，rollup打包之后全局使用<code>$</code>等同于使用<code>jquery</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  external: [<span class="string">'jquery'</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    format: <span class="string">'iife'</span>,</span><br><span class="line">    name: <span class="string">'MyBundle'</span>,</span><br><span class="line">    globals: &#123;</span><br><span class="line">      jquery: <span class="string">'$'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyBundle = (<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code goes here '$' means jquery</span></span><br><span class="line">&#125;($));</span><br></pre></td></tr></table></figure><p>CLI中这么使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rollup  src/main.js -g jquery:$</span><br></pre></td></tr></table></figure><p>本地一些不想被打包的模块也可以使用<code>external</code>和<code>globals</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">const</span> externalId = path.resolve( __dirname, <span class="string">'src/some-local-file-that-should-not-be-bundled.js'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  external: [externalId],</span><br><span class="line">  output: &#123;</span><br><span class="line">    format: <span class="string">'iife'</span>,</span><br><span class="line">    name: <span class="string">'MyBundle'</span>,</span><br><span class="line">    globals: &#123;</span><br><span class="line">      [externalId]: <span class="string">'globalVariable'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="output-format"><a href="#output-format" class="headerlink" title="output.format"></a>output.format</h4><p>在不同场景中使用，采用<code>--format</code>参数进行包类型转换，<code>iife</code>适用于浏览器直接使用<code>script</code>标签引用，<code>cjs</code>是<code>commonjs</code>缩写适用于node环境的调用，使用<code>require(&#39;mypkg&#39;)</code>引入，<code>umd</code>兼容浏览器和node环境。</p><p>直接拉官网的列表，很简单无需翻译</p><ul><li><code>amd</code> – Asynchronous Module Definition, used with module loaders like RequireJS</li><li><code>cjs</code> – CommonJS, suitable for Node and other bundlers (alias: <code>commonjs</code>)</li><li><code>es</code> – Keep the bundle as an ES module file, suitable for other bundlers and inclusion as a <code>&lt;script type=module&gt;</code> tag in modern browsers (alias: <code>esm</code>, <code>module</code>)</li><li><code>iife</code> – A self-executing function, suitable for inclusion as a <code>&lt;script&gt;</code> tag. (If you want to create a bundle for your application, you probably want to use this.)</li><li><code>umd</code> – Universal Module Definition, works as <code>amd</code>, <code>cjs</code> and <code>iife</code> all in one</li><li><code>system</code> – Native format of the SystemJS loader (alias: <code>systemjs</code>)</li></ul><p><strong>在浏览器中使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> compile to a &lt;script&gt; containing a self-executing <span class="keyword">function</span> (<span class="string">'iife'</span>)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rollup main.js --file bundle.js --format iife</span></span><br></pre></td></tr></table></figure><p><strong>在Nodejs中使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> compile to a CommonJS module (<span class="string">'cjs'</span>)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rollup main.js --file bundle.js --format cjs</span></span><br></pre></td></tr></table></figure><p><strong>兼容浏览器和Node.js使用场景</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> UMD format requires a bundle name</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rollup main.js --file bundle.js --format umd --name <span class="string">"myBundle"</span></span></span><br></pre></td></tr></table></figure><h3 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h3><p>rollup和webpack不同之处在于，要使用好它的<code>plugin</code>，<strong>插件的作用是非常大的</strong>。</p><p>比如webpack中常见的<code>alias</code>，在rollup中需要使用<code>@rollup/plugin-alias</code>插件完成，babel的转换也是通过<code>@rollup/plugin-babel</code>完成的。错误的插件会被忽略。<strong>注意</strong>区分生产环境和开发环境的插件的使用，插件是可以影响打包速度的，如非生产环境就非必要使用压缩插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'@rollup/plugin-node-resolve'</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'@rollup/plugin-commonjs'</span>;</span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">'production'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (<span class="keyword">async</span> () =&gt; (&#123;</span><br><span class="line">  input: <span class="string">'main.js'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(),</span><br><span class="line">    commonjs(),</span><br><span class="line">    isProduction &amp;&amp; (<span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'rollup-plugin-terser'</span>)).terser() <span class="comment">// 按需异步引入生产环境使用terser压缩</span></span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">'bundle.js'</span>,</span><br><span class="line">    format: <span class="string">'cjs'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))()</span><br></pre></td></tr></table></figure><p><strong>常用的插件列举一下</strong></p><p>处理node_modules里第三方模块，否则可以打包成功但是报<code>Unresolved dependencies</code>错误，且包中没有第三方依赖。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@rollup/plugin-<span class="keyword">node</span><span class="title">-resolve</span></span><br></pre></td></tr></table></figure></p><p>将CommonJS 模块转换成 ES6，如果使用<code>resolve()</code>会对node_modules引入模块处理，如果没有此插件肯定报错。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">rollup</span>/<span class="keyword">plugin</span>-<span class="keyword">commonjs</span></span><br></pre></td></tr></table></figure></p><p>可以使用别名，参考wenpack的别名使用<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">rollup</span>/<span class="keyword">plugin</span>-<span class="keyword">alias</span></span><br></pre></td></tr></table></figure></p><p>使用babel以及babel的配置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">rollup</span>/<span class="keyword">plugin</span>-<span class="keyword">babel</span></span><br></pre></td></tr></table></figure></p><p>将json文件转换成ES6，例如在引用<code>package.json</code>获取版本号、包名称、作者信息等等时候必须加上此插件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">rollup</span>/<span class="keyword">plugin</span>-<span class="keyword">json</span></span><br></pre></td></tr></table></figure></p><p>使用typescript<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">rollup</span>/<span class="keyword">plugin</span>-<span class="keyword">typescript</span></span><br></pre></td></tr></table></figure></p><p>官方其实是没有这些插件的列表的，但是需要的东西总能找出来，rollup现在绝大数的插件的<code>scope</code>都是<code>@rollup</code>，所以在<strong>npmjs上搜一下这个scope</strong>就能看到几乎所有的插件。</p><p><code>plugins</code>使用方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'@rollup/plugin-node-resolve'</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'@rollup/plugin-commonjs'</span></span><br><span class="line"><span class="keyword">import</span> alias <span class="keyword">from</span> <span class="string">'@rollup/plugin-alias'</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'@rollup/plugin-babel'</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">'rollup-plugin-terser'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">true...,</span><br><span class="line">  plugins: [</span><br><span class="line">    commonjs(),</span><br><span class="line">    resolve(),</span><br><span class="line">    terser(),</span><br><span class="line">    babel(&#123; <span class="attr">babelHelpers</span>: <span class="string">'bundled'</span> &#125;),</span><br><span class="line">    alias(&#123;</span><br><span class="line">      entries: [</span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">'@core'</span>, <span class="attr">replacement</span>: path.resolve(__dirname, <span class="string">'src/core'</span>) &#125;,</span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">'@lib'</span>, <span class="attr">replacement</span>: path.resolve(__dirname, <span class="string">'src/lib'</span>) &#125;,</span><br><span class="line">        &#123; <span class="attr">find</span>: <span class="string">'@config'</span>, <span class="attr">replacement</span>: path.resolve(__dirname, <span class="string">'src/config'</span>) &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面会专门开一篇研究一下如何手撸一个<strong>rollup custom plugin</strong></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器标签之间的通信</title>
      <link href="/posts/ad3abf2b/"/>
      <url>/posts/ad3abf2b/</url>
      
        <content type="html"><![CDATA[<p>第一种考虑的是<code>postMessage</code> ，方法可以安全地实现跨源通信<br><a id="more"></a></p><h2 id="postmessage"><a href="#postmessage" class="headerlink" title="postmessage"></a>postmessage</h2><h3 id="预备属性值"><a href="#预备属性值" class="headerlink" title="预备属性值"></a>预备属性值</h3><p><code>window.opener</code>返回打开当前窗口的源窗口的引用，如果当前窗口不是由其他窗口打开的，则返回null<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener</span><br></pre></td></tr></table></figure></p><p><code>window.parent</code>返回当前窗口的父窗口对象，一般用在<code>iframe</code>对嵌入它的父窗口引用上，若无父窗口返回自身引用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent</span><br></pre></td></tr></table></figure></p><p><code>window.top</code>当前窗口的最顶层窗口<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.top</span><br></pre></td></tr></table></figure></p><p><code>window.frameElement</code>返回嵌入当前窗口的iframe对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.frameElement</span><br></pre></td></tr></table></figure></p><p><code>window.frameElement</code> 返回嵌入窗口的元素，如果未嵌入窗口，则返回null<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.frameElement</span><br></pre></td></tr></table></figure></p><p><code>window.frames</code> 返回当前窗口中所有子窗体的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.frames</span><br></pre></td></tr></table></figure></p><h3 id="通信方法"><a href="#通信方法" class="headerlink" title="通信方法"></a>通信方法</h3><ol><li><p>发送窗口引用目标窗口使用<code>postmessage</code>,目的是用来触发目标窗口<code>message</code>的监听事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">originWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure></li><li><p>窗口通信接受方使用<code>onMessage</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">originWindow.onmessage = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>messageEvent</code>的值打印如下：<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/postmsg-console.jpg" width="100%"> </p><h3 id="获取目标窗口常用的方法"><a href="#获取目标窗口常用的方法" class="headerlink" title="获取目标窗口常用的方法"></a>获取目标窗口常用的方法</h3><ol><li>引用父窗口<code>window.parent</code></li><li>引用打开源窗口<code>window.opener</code></li><li>引用打开源窗口<code>window.top</code></li><li>监听<code>message</code>事件，回调参数的<code>source</code>字段</li><li>直接<code>open</code>新窗口的值</li><li><code>window.frames</code>获取子框架集合</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://origin.com</span></span><br><span class="line"><span class="keyword">var</span> targetWindow = <span class="built_in">window</span>.open(<span class="string">'http://target.com'</span>)</span><br><span class="line">targetWindow.postMessage(<span class="string">'origin data'</span>,<span class="string">'http://target.com'</span>)</span><br><span class="line"><span class="comment">// http://target.com</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,(event)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(event.origin !== <span class="string">'http://origin.com'</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 接受到的信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.data) <span class="comment">// origin data</span></span><br><span class="line">  <span class="comment">// 把event.source作为回信对象，并且把event.origin作为targetOrigin</span></span><br><span class="line">  event.source.postMessage(<span class="string">'target data'</span>,event.origin)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><mark>使用注意</mark>:<br>使用<code>postMessage</code>将数据发送到其他窗口时，始终指定精确的目标origin，而不是*；接收消息时候要验证当前消息的<code>source</code>来源。否则可能会导致引起跨站点脚本攻击。</p><h2 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h2><p>第二种考虑的是<code>localstorage</code>，之所以用这个是因为无意中发现storage也是可以监听的，这样的话就可以通过监听当前同源的storage实现同源不同标签之间的通信刷新。<br>调用<code>localStorage.setItem()</code>触发事件，但是在当前事件监听页面用此方法是不能触发事件的，<strong>必须在不同的同源标签页面，且两次更新的值不变也不会触发事件</strong>。<br>监听事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onstorage = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(e)&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, (e) =&gt; <span class="built_in">console</span>.log(e))</span><br></pre></td></tr></table></figure></p><p>触发事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'key'</span>,<span class="string">'value'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>还有能想到的前端实现通信的方法是使用cookie,本质上和storage是一回事，但是没有监听方法，唯一的可以实现通信的方式就是定时器轮询cookie是否更新，而且cookie也同样受限制于同源种cookie,每次发送请求携带多余的cookie增加通信负担，<strong>是一种比较低效的不推荐的方式</strong>。</p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>涉及到服务层，以前做过websocket的相关聊天工具，这个就不止是标签之间的通信，而是任意一个浏览器和浏览器之间的标签页面通信。我们可以用node启动一个websocket服务。以下简单模拟下聊天室的websocket搭建，使得连接ws服务的页面之间可以通信。</p><h3 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聊天ws数据接口&#123;msg,type&#125; msg[string]消息 type[string]消息类型</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>)</span><br><span class="line"><span class="keyword">const</span> wsSever = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8088</span> &#125;)</span><br><span class="line"><span class="comment">// 消息广播</span></span><br><span class="line">wsSever.broadcast = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  wsSever.clients.forEach(<span class="function"><span class="keyword">function</span> <span class="title">each</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (client.readyState === WebSocket.OPEN) &#123;</span><br><span class="line">      client.send(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">wsSever.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span> (<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ws.nickName = `游客$&#123;i++&#125;`</span></span><br><span class="line">  <span class="comment">// console.log('%s 进入聊天室', ws.nickName)</span></span><br><span class="line">  wsSever.broadcast(&#123;</span><br><span class="line">    system: <span class="string">`<span class="subst">$&#123;ws.nickName&#125;</span>号进入聊天室`</span>,</span><br><span class="line">    type: <span class="string">'system'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> exsitGroup = []</span><br><span class="line">  <span class="comment">// 聊天室里所有连接的信息的昵称呈现给新加入的连接人</span></span><br><span class="line">  <span class="comment">// wsSever.clients.forEach(function each (client) &#123;</span></span><br><span class="line">  <span class="comment">//   if (client.readyState === WebSocket.OPEN &amp;&amp; client.nickName) &#123;</span></span><br><span class="line">  <span class="comment">//     exsitGroup.push(client.nickName)</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="keyword">if</span> (exsitGroup.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      type: <span class="string">'exsit'</span>,</span><br><span class="line">      data: exsitGroup</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听消息事件</span></span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server Received Message:<span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; type, data &#125; = <span class="built_in">JSON</span>.parse(message)</span><br><span class="line">    <span class="built_in">console</span>.log(type, data)</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'join'</span>) &#123;</span><br><span class="line">      wsSever.broadcast(&#123;</span><br><span class="line">        type,</span><br><span class="line">        data</span><br><span class="line">      &#125;)</span><br><span class="line">      ws.nickName = data</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'chat'</span>) &#123;</span><br><span class="line">      wsSever.broadcast(&#123;</span><br><span class="line">        type,</span><br><span class="line">        data: ws.nickName + <span class="string">'说: '</span> + data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 结束事件</span></span><br><span class="line">  ws.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code, reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`客户端关闭连接：code（<span class="subst">$&#123;code&#125;</span>），reason（<span class="subst">$&#123;reason&#125;</span>）`</span>)</span><br><span class="line">    wsSever.broadcast(&#123;</span><br><span class="line">      type: <span class="string">'quit'</span>,</span><br><span class="line">      data: ws.nickName</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="client端"><a href="#client端" class="headerlink" title="client端"></a>client端</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.chat-wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 500px;</span></span><br><span class="line"><span class="undefined">    height: 500px;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#chat</span>&#123;</span></span><br><span class="line"><span class="undefined">    height: 450px;</span></span><br><span class="line"><span class="undefined">    overflow-y: hidden;</span></span><br><span class="line"><span class="undefined">    overflow-x: hidden;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#chat</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="undefined">    word-break: break-all;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#chat</span> <span class="selector-class">.msg-normal</span>&#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#chat</span> <span class="selector-class">.msg-system</span>&#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="attribute">color</span>: <span class="built_in">rgb</span>(255, 122, 14) &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.user-area</span>&#123; <span class="attribute">display</span>: flex; <span class="attribute">height</span>: <span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.user-area</span> <span class="selector-class">.msg</span>&#123;<span class="attribute">flex</span>:<span class="number">4</span>;<span class="attribute">font-size</span>: <span class="number">16px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.user-area</span> <span class="selector-class">.send</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;<span class="attribute">background</span>: <span class="built_in">rgba</span>(66, 130, 240, 0.933);<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">text-align</span>: center;<span class="attribute">line-height</span>: <span class="number">50px</span>;<span class="attribute">cursor</span>: pointer;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.pre-info</span>&#123;<span class="attribute">margin-bottom</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>ws-client-chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pre-info"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"tyname"</span> <span class="attr">class</span>=<span class="string">"tyname"</span> <span class="attr">placeholder</span>=<span class="string">"请先输入昵称"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"enter"</span> <span class="attr">class</span>=<span class="string">"enter"</span> <span class="attr">disabled</span>&gt;</span>进入聊天<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chat"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-area"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"send"</span> <span class="attr">class</span>=<span class="string">"send"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">'#tyname'</span>).addEventListener(<span class="string">'input'</span>,(e)=&gt;&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(e.target.value.length &gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.querySelector(<span class="string">'#enter'</span>).disabled = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.querySelector(<span class="string">'#enter'</span>).disabled = <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">'#enter'</span>).addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span></span><br><span class="line"><span class="actionscript">        e.target.disabled = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 连接一个ws服务</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws:localhost:8088"</span>);</span></span><br><span class="line"><span class="actionscript">        ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">(evt)</span> </span>&#123; </span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"Connection open ..."</span>)</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 向ws发送消息 输送昵称</span></span></span><br><span class="line"><span class="javascript">          ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">document</span>.querySelector(<span class="string">'#tyname'</span>).value, </span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'join'</span></span></span><br><span class="line"><span class="undefined">          &#125;))</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听服务关闭</span></span></span><br><span class="line"><span class="actionscript">        ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">(evt)</span>  </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"Connection close ..."</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听服务发来的消息</span></span></span><br><span class="line"><span class="actionscript">        ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log( <span class="string">"Client Received Message: "</span> + evt.data);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> &#123;type, data&#125; = <span class="built_in">JSON</span>.parse(evt.data)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> chatItem = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(type, data)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(type === <span class="string">'chat'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            chatItem.className = <span class="string">'msg-normal'</span></span></span><br><span class="line"><span class="undefined">            chatItem.innerHTML = data</span></span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'system'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            chatItem.className = <span class="string">'msg-system'</span></span></span><br><span class="line"><span class="undefined">            chatItem.innerHTML = data</span></span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'join'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            chatItem.className = <span class="string">'msg-system'</span></span></span><br><span class="line"><span class="javascript">            chatItem.innerHTML = <span class="string">`<span class="subst">$&#123;data&#125;</span>进入聊天室`</span></span></span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'quit'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            chatItem.className = <span class="string">'msg-system'</span></span></span><br><span class="line"><span class="javascript">            chatItem.innerHTML = <span class="string">`<span class="subst">$&#123;data&#125;</span>退出聊天室`</span></span></span><br><span class="line"><span class="actionscript">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'exsit'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            chatItem.className = <span class="string">'msg-system'</span></span></span><br><span class="line"><span class="javascript">            chatItem.innerHTML = <span class="string">`和 <span class="subst">$&#123;data.join(<span class="string">' '</span>)&#125;</span> 他们打声招呼吧`</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.querySelector(<span class="string">'#chat'</span>).appendChild(chatItem)</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'#send'</span>).addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 向ws发送消息</span></span></span><br><span class="line"><span class="javascript">          ws.send(<span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">            data: <span class="built_in">document</span>.querySelector(<span class="string">'#msg'</span>).value, </span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'chat'</span></span></span><br><span class="line"><span class="undefined">          &#125;))</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.querySelector(<span class="string">'#msg'</span>).value = <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当前标签离开事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="string">'确认离开？'</span> <span class="comment">//输入什么无所谓，规避欺骗风险这个自定义文字弹窗已经不被厂商支持</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">          ws.close(<span class="string">'1000'</span>,<span class="string">'Leave or refresh page'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的yarn</title>
      <link href="/posts/30ba4d06/"/>
      <url>/posts/30ba4d06/</url>
      
        <content type="html"><![CDATA[<p>Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，yarn的诞生是为了弥补 npm 的一些缺陷，比如提高了包安装速度（通过并行方式安装）和增加yarn.lock文件（解决了大小版本号升级的不一致性）以及更简洁友好的输出等等，但是yarn拉取还是npm仓库的包，它只是作为一个包管理工具提供了npm之外的另一种选择而已。是一条不断推动npm进步的”鲶鱼“。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>以前就有npm包管理器，可以通过npm全局安装<code>yarn</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g yarn</span></span><br></pre></td></tr></table></figure><ul><li>通过Homebrew进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install yarn</span><br></pre></td></tr></table></figure><ul><li>通过shell script进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version [version]</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p><strong>yarn init</strong>    初始化使用方式和<code>npm init</code>相同</p></li><li><p><strong>yarn add <package...></package...></strong> 安装包，类似于<code>npm install &lt;package...&gt;</code>，<strong>注意：</strong>使用<code>yarn add</code> 安装一个package之后才会生成<code>yarn.lock</code>。 <code>yarn install</code> 并不会生成，lock文件是后者的非必要的安装依赖之一。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add &lt;package...&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装特定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add &lt;package...&gt;@&lt;version&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖参数 默认安装 —S</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add &lt;package...&gt; [-D|--dev][-P|--peer][-E|--exact]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>yarn install</strong>    安装 <code>package.json</code> 中<strong>所有依赖包</strong>，用法和npm类似，但是注意yarn这里的install可以省略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">yarn</span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash">yarn install</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>yarn publish</strong>     发布包</p></li><li><p><strong>yarn remove</strong>     移除包</p></li><li><p><strong>yarn run</strong>    运行指定的<code>script</code>命令</p></li><li><p><a href="https://yarn.bootcss.com/docs/cli/" target="_blank" rel="noopener">查看其他CLI命令</a> </p></li></ul><p>注意，yarn也可以切换镜像源，但是没有类似<code>nrm</code>的快速切换工具，只能手动设置源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><p>查看版本和升级版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前使用版本</span></span><br><span class="line">$ yarn --version</span><br><span class="line"><span class="comment"># 升级到最新版本, 非跨主版本升级</span></span><br><span class="line">$ yarn <span class="built_in">set</span> version latest</span><br></pre></td></tr></table></figure><h3 id="工作区（workspaces）"><a href="#工作区（workspaces）" class="headerlink" title="工作区（workspaces）"></a>工作区（workspaces）</h3><ul><li>各个workspace中的依赖包会被提到根目录的node_modules 中安装，这可以使得安装变得更快、总体的安装占用体积也更小。</li><li>如果根目录的依赖包和workspace中的依赖包版本冲突则不会被提取出来。</li></ul><h4 id="yarn-workpace"><a href="#yarn-workpace" class="headerlink" title="yarn workpace"></a>yarn workpace</h4><p>指定<code>workspace</code>运行<code>yarn</code>的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn workpace &lt;workspace_name&gt; &lt;<span class="built_in">command</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yarn-workpaces"><a href="#yarn-workpaces" class="headerlink" title="yarn workpaces"></a>yarn workpaces</h4><p>这里从workspace变成了workspaces，意味着从指定操作单个工作区变成了操作所有工作区。</p><p>列出当前项目下<strong>所有的工作区的依赖关系</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn workspaces info</span></span><br></pre></td></tr></table></figure><p>每一个<code>workspace</code>运行<code>yarn</code>的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn workspaces run &lt;<span class="built_in">command</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>开启yarn的workspace模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn config <span class="built_in">set</span> workspaces-experimental <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><ul><li>package.json中加入workspaces配置，<code>private</code>属性一定要设置成true，保证工作区不会被发布暴露出去，存在多个工作区的工程也没有意义和必要发布。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"private": true, # the private: true is required</span><br><span class="line">"workspaces": [</span><br><span class="line">true"packages/*", # 之所以这么写 是配合learn用法</span><br><span class="line">  "workspace-a" # 常见的和当前配置文件平级的工作区文件夹名称</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>如果使用<code>lerna</code>，则在<code>lerna.json</code>中配置，通过yarn去管理项目依赖（bootstrap）,会根据根目录package.json的workspaces配置。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"packages"</span>: [</span><br><span class="line">    <span class="string">"packages/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"useWorkspaces"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"npmClient"</span>: <span class="string">"yarn"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="管理workspaces"><a href="#管理workspaces" class="headerlink" title="管理workspaces"></a>管理workspaces</h4><p>添加或者移除一个包可以进入当前的workspace中，也可以 <code>yarn workpace &lt;workspace_name&gt;</code>解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入指定的workspace再操作</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> packages/ &lt;workspace_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add  &lt;package_name&gt;</span></span><br></pre></td></tr></table></figure><p>或者直接指定要操作的工作区，指定工作区<code>yarn workpace &lt;workspace_name&gt;</code>再 <code>add &lt;package_name&gt;</code>进行命令操作<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接指定要操作的工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workpace &lt;workspace_name&gt; add &lt;package_name&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>/package.json:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">true<span class="attr">"private"</span>: <span class="literal">true</span>, </span><br><span class="line">true<span class="attr">"workspaces"</span>: [</span><br><span class="line">  <span class="string">"workspace-a"</span>,</span><br><span class="line">  <span class="string">"workspace-b"</span>,</span><br><span class="line">true]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>/workspace-a/package.json:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"workspace-a-pkgname"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"5.0.5"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>/workspace-b/package.json:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"workspace-b-pkgname"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"5.0.5"</span>,</span><br><span class="line">    <span class="attr">"workspace-a"</span>: <span class="string">"1.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>yarn install</code> ，所有的依赖会被放在<code>node_modules</code>中。</p><p><code>workspace-a</code>通过symlink别名成了<code>/node_modules/workspace-a-pkgname</code> ，这样就可以在工程的各个工作区像引入正常的npm包一样引入本地包。我把package.json中的name和工作区的名字有所区分，用来表明<code>node_modules</code>使用的并不是目录的名称而是每个工作区下<code>package.json#name</code>，就像发布npm包一样，pkg名称是<code>package.json#name</code>。</p><p>执行<code>tree -L 3</code>，看一下目录结构</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">│   ├── workspace-a-pkgname -&gt; ../workspace-a</span><br><span class="line">│   └── workspace-b-pkgname -&gt; ../workspace-b</span><br><span class="line">├── package.json</span><br><span class="line">├── workspace-a</span><br><span class="line">│   └── package.json</span><br><span class="line">├── workspace-b</span><br><span class="line">│   └── package.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>后面会结合yarn的<code>workspaces</code>和<code>lerna</code>对<code>monorepo</code>进行深入研究。</p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对于同步异步和阻塞非阻塞理解</title>
      <link href="/posts/5ece973c/"/>
      <url>/posts/5ece973c/</url>
      
        <content type="html"><![CDATA[<p>经常遇到这些概念，有时候给刚毕业入职同学分享的时候，感觉很多还是没有理解透。后来我就做个比喻，解释这个几个概念，有时间再画个图吧。</p><p><code>zero</code>去蛋糕店买蛋糕，但是蛋糕现做需要一段时间，时间不确定，时间取决于甜点师心情和订的蛋糕难度。</p><h4 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h4><p><code>zero</code>订完蛋糕后，甜点师没有告诉<code>zero</code>需要多久，<code>zero</code>在店里坐着干等，两眼放空不做任何事情，直到蛋糕做好，<code>zero</code>才走。</p><h4 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h4><p><code>zero</code>订完蛋糕后，甜点师没有告诉<code>zero</code>需要多久，<code>zero</code>就去旁边的书店看书，时不时的回来看看有没有做好。这样一来读书效率肯定不高。</p><h4 id="异步阻塞"><a href="#异步阻塞" class="headerlink" title="异步阻塞"></a>异步阻塞</h4><p><code>zero</code>订完蛋糕后，甜点师立即告诉<code>zero</code>需要一段时间，这段时间你可以出去玩，等好了我会发微信告诉你的。但是<code>zero</code>选择哪也不去在店里枯等。</p><h4 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h4><p><code>zero</code>订完蛋糕后，甜点师立即告诉<code>zero</code>需要一段时间，这段时间你可以出去玩，等好了我会发微信告诉你的。<code>zero</code>于是去旁边的书店看书，一段时间后蛋糕店发微信通知他取蛋糕。</p><p>总结：<br>同异步通常也是指单线程的任务处理方式。同步任务指的是主线程上只有前一个任务处理完，才能处理后面的任务；异步任务不进入主线程执行栈（Execution Context Stack）而是任务队列（Task Queue），从而不影响主线程其他任务执行，等主线程任务执行完毕，进行事件循环（Event Loop）来观察任务队列中要执行的事件回调，如果有事件就取出相关回调放入执行栈中由主线程执行。<br>另外还有同步异步和并发概念，感觉一样但是完全不同，注意区分。<br>阻塞和非阻塞在上述比喻中针对是<code>zero</code>本身行为（任务），要不要在等待中去做其他的事情。</p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 同步异步 </tag>
            
            <tag> 阻塞非阻塞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于REST风格的查询API的DSL设计[github回音壁]</title>
      <link href="/posts/a23c0926/"/>
      <url>/posts/a23c0926/</url>
      
        <content type="html"><![CDATA[<p>在REST中，资源的返回结构与返回数量是由服务端决定；在GraphQL，服务端只负责定义哪些资源是可用的，由客户端自己决定需要得到什么资源,所谓的api查询。我们的想法是在REST中服务端决定的资源，其实也是通过客户端所给予的信息来进行反馈（资源定位和http的动作），如果客户端和服务端之间有一套约定，这个约定框架下客户端给的信息足够多，那么也可以让服务端来满足客户端的查询需求，即<code>按需请求</code>和<code>按需返回</code>，这个和GraphQL的思想是一致的。<br>至于为什么不统一使用GraphQL，每个公司的大背景下会有每种不同的实际情况，满足多端的需求又尽快的让服务端和客户端每个人都熟悉GraphQL，成本比较大；当然在有条件的额情况下统一使用GraphQL是最好的。所以我们就想用中间层和传统的REST来改造现有数据接口，又符合GraphQL的思想，在客户端的查询条件下，满足合并模块数据、过滤筛选冗余数据，选取特定数据的需求。</p><h2 id="查询附加符号定义"><a href="#查询附加符号定义" class="headerlink" title="查询附加符号定义"></a>查询附加符号定义</h2><table><thead><tr><th>符号</th><th>定义</th></tr></thead><tbody><tr><td>$&amp;</td><td>与，默认，独立逻辑符号，不与任何字符连接使用</td></tr><tr><td>$&#124;</td><td>或，条件满足其一即可，merge专用，独立逻辑符号，不与任何字符连接使用</td></tr><tr><td>$^</td><td>非，剔除此条件下的当前数据，独立逻辑符号，不与任何字符连接使用</td></tr><tr><td>$.</td><td>定位深度，类似于this. 只适用于mergeRule中</td></tr><tr><td>$&lt;</td><td>小于，适用于数值或者数组的长度</td></tr><tr><td>$&gt;</td><td>大于，适用于数值或者数组的长度</td></tr><tr><td>$&lt;=</td><td>小于等于，适用于数值或者数组的长度</td></tr><tr><td>$&gt;=</td><td>大于等于，适用于数值或者数组的长度</td></tr><tr><td>$=</td><td>等于，默认等于条件，不必写</td></tr><tr><td>$!=</td><td>不等于，不等于条件成立</td></tr><tr><td>$&lt;&gt;</td><td>区间，适用于数值或者数组的长度</td></tr><tr><td>$$</td><td>正则匹配符号，表示当前条件为正则表达式</td></tr></tbody></table><p><strong>$&amp;</strong>  查询组里条目之间的关系默认是与的关系，当B且C满足条件，A才满足条件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"B"</span>: <span class="string">"conditionB"</span>,</span><br><span class="line">    <span class="attr">"C"</span>: <span class="string">"conditionC"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于<code>B &amp; C</code></p><p><strong>$|</strong>  查询组里条目之间的是或的关系，当B或C且D满足条件，A才被提取出来，注意只有在merge规则里使用或逻辑，filter规则里不必使用或关系。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"B"</span>: <span class="string">"conditionB"</span>,</span><br><span class="line">    <span class="attr">"$|"</span>: &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"conditionC"</span>,</span><br><span class="line">      <span class="attr">"D"</span>: <span class="string">"conditionC"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于 <code>B | ( C &amp; D )</code> </p><p><strong>$^</strong>  满足B的情况下过滤掉A字段中的C和D字段，再提取出A，<code>$^</code>的value为数组，数组中的值为需要排除的字段。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"B"</span>: <span class="string">"conditionB"</span>,</span><br><span class="line">    <span class="attr">"$^"</span>: [<span class="string">"C"</span>,<span class="string">"D"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过滤A字段中的C和D字段<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"$^"</span>: [<span class="string">"C"</span>,<span class="string">"D"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>$&lt; $&lt;= $&gt; $&gt;= $&lt; $&lt;&gt;</strong>   适用于数值或者数组长度的比较<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"$&gt;=B"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"$&lt;&gt;C"</span>: [<span class="number">1</span>,<span class="number">100</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设B为数值，C为数组，那么A字段中的B大于等于100且C的长度在1到100区间，就提取A字段数据。  </p><p><strong>$!=</strong>   不等于符号<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"A"</span>: &#123;</span><br><span class="line">    <span class="attr">"B"</span>: <span class="string">"conditionB"</span>,</span><br><span class="line">    <span class="attr">"$!=C"</span>: <span class="string">"conditionC"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果B等于<code>conditionB</code>，且C不等于<code>conditionC</code>，那么提取A段数据。  </p><p><strong>$$</strong>   正则匹配符号，后面的筛选条件为正则表达式数组，数组第一项为正则表达式，第二项为标志；原数据中的数据会和正则表达式进行match匹配。<br>语法：  <figure class="highlight plain"><figcaption><span>[pattern[,flag]]```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;A&quot;: &#123;</span><br><span class="line">    &quot;B&quot;: &quot;conditionB&quot;,</span><br><span class="line">    &quot;$$C&quot;: [&quot;/condition(?:C|D)/&quot;,&quot;g&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果B等于<code>conditionB</code>，且C中含有<code>conditionC</code>或者<code>conditionD</code>，那么提取A段数据</p><p><strong>$.</strong>  在<code>mergeRule</code>中定位深度，类似于this.，则只适用于<mark>mergeRule</mark>中进行查找筛选然后合并数据，不使用的该符号默认为原数据结构的根目录查找起点。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mergeGroupA"</span>: &#123;</span><br><span class="line">    "$.prarent.child"&#123;</span><br><span class="line">      "B": "conditionB",</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>$.prarent.child</code>表示，在根目录下查找<code>parent</code><br>1.<code>parent</code>是<code>对象</code>则继续查找<code>parent</code>下的<code>child</code><br>2.<code>parent</code>是<code>数组</code>则继续查找<code>parent</code>里有<code>child</code>的子项<br>3.如果整个链式查找出错或者找不到期望的筛选深度，则废弃该合并字段，找不到<code>parent</code>或者<code>child</code>,mergeGroupA就会被废弃，返回数据中不会存在此字段<br>4.<code>root &gt; prarent &gt; child</code> 中满足B等于<code>conditionB</code>的<code>child</code>会被合并到<code>mergeGroupA</code>中</p><p><strong>注意：</strong>  </p><ol><li>逻辑符号<code>或</code> <code>非</code> <code>且</code>表达逻辑关系时候，符号<code>$|</code> <code>$^</code> <code>$&amp;</code>都需要<mark>作为单独的Key值写,</mark>，以便于分组，不可和字段连在一起写。</li><li>逻辑查询，为了兼顾性能，只适用于简单类型的条件比较，字符串，数值，布尔，undefined,null等，不适用于复杂类型的判断。例如以上的<code>condition</code>条件可以为字符串，数值，布尔值，空等，不可以为对象，函数，数组。</li></ol><h2 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h2><h3 id="url-string"><a href="#url-string" class="headerlink" title="url [string]"></a>url [string]</h3><p>接口地址，必传。中间层会代理请求当前地址，按照规则将处理的数据返回，必要时需要传<code>params</code>作为透传参数。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://api.xx.com/client.action1"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="params-object"><a href="#params-object" class="headerlink" title="params [object]"></a>params [object]</h3><p>接口相应的参数，默认为空。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://api.xx.com/client.action1"</span>,</span><br><span class="line">  <span class="attr">"params"</span>:&#123;</span><br><span class="line">    <span class="attr">"client"</span>: <span class="string">"wh5"</span>,</span><br><span class="line">    <span class="attr">"functionId"</span>: <span class="string">"list"</span>,</span><br><span class="line">    <span class="attr">"clientVersion"</span>: <span class="string">"10.0.0"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="filterWithoutMerge-boolean"><a href="#filterWithoutMerge-boolean" class="headerlink" title="filterWithoutMerge [boolean]"></a>filterWithoutMerge [boolean]</h3><p>输出的过滤模块(filter)中是否要排除掉整合模块中(merge)的数据,默认值<code>true</code> 。<br>例如，所有数据为<code>A</code>，过滤数据为<code>F</code>，整合数据为<code>M</code>，我们会在<code>A</code>-<code>M</code>的基础上再去得到<code>F</code>，也就是说<code>F</code>&#8745;<code>M</code>为空。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"filterWithoutMerge"</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="mergeRule-object"><a href="#mergeRule-object" class="headerlink" title="mergeRule [object]"></a>mergeRule [object]</h3><p>需要整合的数据规则，不需要整合则不用传该参数<br>规则为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  merge:&#123;</span><br><span class="line">    mergeModuleName: conditions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>mergeModuleName</strong>  [string]<br>分组的名称，例如你可能需要把所有的标题整合到<code>titles</code>的分组中，以便于你接收数据时候可以从<code>res.merge.titles</code>里取出你期望整合过的数据。<br><strong>conditions</strong>  [array | object]<br>分组整合查询条件,以原始数据的根节点为查询源点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mergeRule"</span>: &#123;</span><br><span class="line">    <span class="attr">"titles"</span>: &#123;</span><br><span class="line">      <span class="attr">"$.result.list"</span>:&#123;</span><br><span class="line">        <span class="attr">"id"</span>: [<span class="string">"665,666"</span>,<span class="string">"667,668"</span>],</span><br><span class="line">        <span class="attr">"$!=content"</span>: <span class="string">"img"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"skucards"</span>: &#123;</span><br><span class="line">      <span class="attr">"$.result.des"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"5"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"scrollers"</span>: &#123;</span><br><span class="line">      <span class="attr">"$.result.skus"</span>:&#123;</span><br><span class="line">        <span class="attr">"img"</span>: <span class="string">"xx.gov"</span>,</span><br><span class="line">        <span class="attr">"$|"</span>:&#123;</span><br><span class="line">          <span class="attr">"$&gt;=leftStock"</span>: <span class="string">"100"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设返回的原始数据设为<code>res</code><br><em>titles分组</em><br>整合<code>res.result.list</code>自身或者子项中id为’665,666’或者’667,668’且content不为’img’的集合。<br><em>skucards分组</em><br>整合<code>res.result.des</code>自身或者子项中type为5的集合。<br><em>scrollers分组</em><br>整合<code>res.result.skus</code>自身或者子项中’img’为’xx.gov’，或自身或者子项的’leftStocks’的数目大于100的集合。   </p><h3 id="filterRule-object"><a href="#filterRule-object" class="headerlink" title="filterRule [object]"></a>filterRule [object]</h3><p>过滤模块，基于原始接口数据进行筛选，满足条件的集合会被<strong>过滤掉</strong>。可在<code>filterWithoutMerge</code>中配置是否要在原始数据中排除已经整合出来的数据。<br>语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  filterRule:&#123;</span><br><span class="line">    path:&#123;</span><br><span class="line">      filterName: conditions</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>filterName</strong>  [string]<br>原始数据中存在的子项字段名称，对该子项进项处理。<br><strong>conditions</strong>  [object | boolean]<br><code>filter</code>的对象为数组类型，<code>conditions</code>的目标是对数组内的子项进行处理。<br><code>filter</code>的对象为非数组类型，<code>conditions</code>的目标是对该<code>filter</code>的对象自身进行处理。<br>简而言之，过滤对象本身为数组，则过滤条件适用于子项过滤，过滤对象为数值、字符串、布尔值、对象等则针对自身做过滤。</p><p><strong>注意：</strong></p><ol><li>过滤规则内不支持$|’或’规则，因为没有必要且不符合认知</li><li>过滤规则支持数组内子项过滤，但不支持数组内子项的子项过滤， $.a.b.c 即c才能是数组,如其他需求配合merge使用</li></ol><p><code>filter</code>过滤规则分为<code>条件过滤</code>和<code>非条件过滤</code>：<br><strong>条件过滤：</strong> 只针对于数组，对象类型，满足Key,Value相互匹配的条件产生过滤处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">  <span class="string">'floorAppearance'</span>: [<span class="string">'articleDetailFloor_1'</span>, <span class="string">'similarArticleFloor_2'</span>]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>非条件过滤：</strong> 对象中字段，没有任何条件判断，找到次过滤字段即过滤。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'$.result.config'</span>: &#123;</span><br><span class="line">  <span class="string">'$^'</span>: [<span class="string">'head'</span>] <span class="comment">// 删除config中footer字段数据,无论其值是什么</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>过滤<code>list</code>中有<code>floorApearrence</code>的字段，且值等于<code>articleDetailFloor_1</code>和等于<code>similarArticleFloor_2</code>的子项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// **** list是数组类型，其后条件是针对子项进项筛选 ****</span></span><br><span class="line">    <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">      <span class="string">'floorAppearance'</span>: [<span class="string">'articleDetailFloor_1'</span>, <span class="string">'similarArticleFloor_2'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤<code>list</code>中有<code>floorApearrence</code>的字段，且值不等于<code>articleDetailFloor_2</code>都过滤掉。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// **** list是数组类型，其后条件是针对子项进项筛选 ****</span></span><br><span class="line">    <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">      <span class="string">'$!=floorAppearance'</span>: <span class="string">'similarArticleFloor_2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤<code>list</code>中没有<code>description</code>的子项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// **** list是数组类型，其后条件是针对子项进项筛选 ****</span></span><br><span class="line">  <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">    <span class="string">'description'</span>: <span class="string">'undefined'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤<code>list</code>中含有<code>floorApearrence</code>字段的所有子项<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// **** list是数组类型，其后条件是针对子项进项筛选 ****</span></span><br><span class="line">  <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">    <span class="string">'$^'</span>: [<span class="string">'floorApearrence'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过滤<code>config</code>中<code>footer</code>和<code>header</code>字段数据,无论其值是什么<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// **** config 是对象类型，其后条件对自身进行筛选 ****</span></span><br><span class="line">  <span class="string">'$.result.config'</span>: &#123;</span><br><span class="line">    <span class="string">'$^'</span>: [<span class="string">'footer'</span>,<span class="string">'header'</span>] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完整单接口请求：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'queryKey'</span>: <span class="string">'discoveryFanAreaList'</span>,</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'https://api.m.jd.com/client.action'</span>,</span><br><span class="line">  <span class="string">'params'</span>: &#123;</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'wh5'</span>,</span><br><span class="line">    <span class="string">'functionId'</span>: <span class="string">'discoveryFanAreaList'</span>,</span><br><span class="line">    <span class="string">'clientVersion'</span>: <span class="string">'10.0.0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterWithoutMerge'</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">'mergeRule'</span>: &#123;</span><br><span class="line">    <span class="string">'skusOrImgs'</span>: &#123;</span><br><span class="line">      <span class="string">'$.result.list.description'</span>: &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'$|'</span>: &#123;</span><br><span class="line">          <span class="string">'type'</span>: <span class="string">'2'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'authorDetailFloors'</span>: &#123;</span><br><span class="line">      <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">        <span class="string">'$$floorAppearance'</span>: [<span class="string">'authorDetailFloor'</span>, <span class="string">'g'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterRule'</span>: &#123;</span><br><span class="line">    <span class="string">'$.result.list'</span>: &#123;</span><br><span class="line">      <span class="string">'floorAppearance'</span>: [<span class="string">'articleDetailFloor_1'</span>, <span class="string">'similarArticleFloor_2'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'$.result.config'</span>: &#123;</span><br><span class="line">      <span class="string">'$^'</span>: [<span class="string">'head'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'$.result'</span>: &#123;</span><br><span class="line">      <span class="string">'$^'</span>: [<span class="string">'pageView'</span>, <span class="string">'pageViewStr'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="多接口查询"><a href="#多接口查询" class="headerlink" title="多接口查询"></a>多接口查询</h2><p>多接口查询的时候，需要增加每个接口的查询的关键字，以便于返回合并数据后的读取。</p><h3 id="queryKey-string"><a href="#queryKey-string" class="headerlink" title="queryKey [string]"></a>queryKey [string]</h3><p>查询关键字，用于多接口查询返回使用，单接口可选，多接口必传。<br><strong>完整多接口请求示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [&#123;</span><br><span class="line">  <span class="string">'queryKey'</span>: <span class="string">'discoveryFanAreaList'</span>,</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'https://api.m.jd.com/client.action'</span>,</span><br><span class="line">  <span class="string">'params'</span>: &#123;</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'wh5'</span>,</span><br><span class="line">    <span class="string">'functionId'</span>: <span class="string">'discoveryFanAreaList'</span>,</span><br><span class="line">    <span class="string">'clientVersion'</span>: <span class="string">'10.0.0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterWithoutMerge'</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">'mergeRule'</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterRule'</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">'queryKey'</span>: <span class="string">'discoveryGuessLike'</span>,</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'https://api.m.jd.com/client.action'</span>,</span><br><span class="line">  <span class="string">'params'</span>: &#123;</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'wh5'</span>,</span><br><span class="line">    <span class="string">'functionId'</span>: <span class="string">'discoveryGuessLike'</span>,</span><br><span class="line">    <span class="string">'clientVersion'</span>: <span class="string">'10.0.0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterWithoutMerge'</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">'mergeRule'</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterRule'</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">'queryKey'</span>: <span class="string">'discoveryAuthorHome'</span>,</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'https://api.m.jd.com/client.action'</span>,</span><br><span class="line">  <span class="string">'params'</span>: &#123;</span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'wh5'</span>,</span><br><span class="line">    <span class="string">'functionId'</span>: <span class="string">'discoveryAuthorHome'</span>,</span><br><span class="line">    <span class="string">'clientVersion'</span>: <span class="string">'10.0.0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterWithoutMerge'</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">'mergeRule'</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'filterRule'</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>曝光事件的发生(垂直横向)</title>
      <link href="/posts/73c0936b/"/>
      <url>/posts/73c0936b/</url>
      
        <content type="html"><![CDATA[<h3 id="横划滚动曝光"><a href="#横划滚动曝光" class="headerlink" title="横划滚动曝光"></a>横划滚动曝光</h3><p>横向滚动推荐<a href="https://www.swiper.com.cn/" target="_blank" rel="noopener">swiper</a>，常用于移动端网站的内容触摸滑动,是一款功能及其强大触摸滑动插件。<br>如果使用<code>vue</code>可以使用<code>vue-awesome-swiper</code>组件，如果是横向滑动曝光，可以使用其中的事件来监听滑动位置。<br>本次只是讨论曝光问题，更多文档内接口参考下面链接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">'.swiper-box'</span>,&#123;</span><br><span class="line">  on:&#123;</span><br><span class="line">    slideNextTransitionEnd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 正向切换结束时执行</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.activeIndex &gt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">// 大于当前已经曝光的数目</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`expo_<span class="subst">$&#123;<span class="keyword">this</span>.activeIndex&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="具体参考资料："><a href="#具体参考资料：" class="headerlink" title="具体参考资料："></a>具体参考资料：</h4><p><a href="https://www.npmjs.com/package/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a><br><a href="https://surmon-china.github.io/vue-awesome-swiper/" target="_blank" rel="noopener">vue-awesome-swiper示例</a><br><a href="https://www.swiper.com.cn/api/event/init.html" target="_blank" rel="noopener">swiper4.x配置选项</a></p><h3 id="垂直滚动曝光"><a href="#垂直滚动曝光" class="headerlink" title="垂直滚动曝光"></a>垂直滚动曝光</h3><p><img width="60%" src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/expo-overview.png"><br>需要获得当前元素距离顶部的距离，那么<code>offsetTop</code>是不能满足条件的，<code>offsetTop</code>是根据<code>offsetParent</code>来定的，<code>offsetParent</code>又是根据子元素的父元素是否有定位属性来决定,所以当前元素一直向上的父元素和祖先元素直到body都没有定位属性（<code>position</code>），那么直接在当前元素上取<code>offsetTop</code>是没有问题的，但是这怎么可能？<br>所以就需要递归计算到body，才能正确计算出当前元素到顶的距离。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getOffsetBodyTop = <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.offsetParent.nodeName.toLowerCase() === <span class="string">'body'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.offsetTop</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> el.offsetTop + getOffsetBodyTop(el.offsetParent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是监听事件了，需要监听当前页面已滚动的高度，当前设备视口的高度，和上面提到的该元素距离顶部的距离。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> verticalExpoHandler = <span class="function">(<span class="params">el, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((el &amp;&amp; el.className.indexOf(<span class="string">'hasExpo'</span>) &gt; <span class="number">-1</span>) || !el) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> srcollYTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">  <span class="keyword">const</span> viewHeight = <span class="built_in">document</span>.body.clientHeight <span class="comment">//当前html和body要设置成100%</span></span><br><span class="line">  <span class="keyword">const</span> offsetBodyTop = getOffsetBodyTop(el)</span><br><span class="line">  <span class="keyword">const</span> expoHeight = srcollYTop + viewHeight</span><br><span class="line">  <span class="comment">// 曝光条件</span></span><br><span class="line">  <span class="keyword">if</span> (expoHeight &gt;= offsetBodyTop) &#123;</span><br><span class="line">    el.className = el.className + <span class="string">' hasExpo'</span></span><br><span class="line">    callback &amp;&amp; callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下生产环境下，别忘记加节流函数哦</span></span><br><span class="line"><span class="built_in">window</span>.addEventLisener(<span class="string">'srcoll'</span>,verticalExpoHandler)</span><br></pre></td></tr></table></figure><h3 id="补充：其他方式"><a href="#补充：其他方式" class="headerlink" title="补充：其他方式"></a>补充：其他方式</h3><p>在不同的框架下可以使用如下的方案进行曝光事件的捕获</p><p><a href="https://www.npmjs.com/package/react-waypoint" target="_blank" rel="noopener">react-waypoint</a></p><p><a href="https://www.npmjs.com/package/vue-waypoint" target="_blank" rel="noopener">vue-waypoint</a></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发之尺寸自适应解决方案</title>
      <link href="/posts/5f9487fb/"/>
      <url>/posts/5f9487fb/</url>
      
        <content type="html"><![CDATA[<p>设置根元素大小，通常设计稿的设计宽度为750，也有720或者别的尺寸的，那么在这个尺寸上的所有元素的大小都是基于这个宽度来显示的，我们正常在移动端使用设备，每个设备的宽度不尽相同，所以只要按照这个比例进行缩放就可以完成所有设备的显示一致性。<br>按照比例进行缩放，就需要使用rem，rem是根据当前页面根元素大小调整的单位，设备的屏幕改变只要改变这个根元素的大小，就可以改变页面所有元素的尺寸。<mark>以下是我两个不同时期的分析的解决思路。</mark></p><h2 id="初始分析解决思路"><a href="#初始分析解决思路" class="headerlink" title="初始分析解决思路"></a>初始分析解决思路</h2><p>获取当前屏幕的宽度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth/<span class="number">750</span></span><br></pre></td></tr></table></figure><p>当前屏幕宽度和设计稿750的比例，这个比例的用处在于知道设备页面里面的元素大小和设计稿里面尺寸之间的关系。如果这个比列是0.5，那么设计稿里面的所有元素的大小都需要除以2才是设备里面的元素真实大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> realSize = (realWidth/designWidth)*designSize</span><br></pre></td></tr></table></figure><p><mark>划重点：</mark><strong>那么按照这个逻辑，(realWidth/designWidth)是固定计算的，只要在写页面时候尺寸完全按照designSize来，就可以计算出得到realSize，这可是正好符合我们的预期。我们知道根元素和rem的乘积就是真实元素大小，那么把(realWidth/designWidth)作为根元素大小，designSize作为我们写页面的大小，只不过designSize要转成rem写。</strong></p><p>这么设置根元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root.style.fontSize = realWidth/designWidth + <span class="string">'px'</span></span><br></pre></td></tr></table></figure></p><p>如果设计稿的字体大小是50px,那么设置这个元素大小时候就应该这么写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 50<span class="selector-tag">rem</span>;</span><br></pre></td></tr></table></figure></p><p>这样的话，一个750设计稿上面的一个50px大小的字体遇上一个375设备就会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(375/750)*50 =&gt; 25px</span><br></pre></td></tr></table></figure></p><p>那一个720设计稿上面的一个50px大小的字体遇上一个414设备就会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(414/720)*50 =&gt; 28.75px</span><br></pre></td></tr></table></figure></p><p>这样也算解决设计稿和实际开发的尺寸对应问题了，</p><p>总觉得在写页面的时候写这么大的<code>rem</code>尺寸，而根元素通常只有小数位的<code>px</code>很别扭。</p><p>我们如果想写成设计稿的尺寸，而且单位就要用px。</p><p><mark>划重点：</mark><strong>那么我们需要用<code>px</code>和<code>rem</code>的转化工具<a href="https://www.npmjs.com/package/postcss-plugin-px2rem" target="_blank" rel="noopener">postcss-plugin-px2rem</a></strong></p><p>我们在用<code>postcss</code>时候带上这个插件就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postcss: &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    px2rem(&#123;</span><br><span class="line">      rootValue: <span class="number">100</span> <span class="comment">// 转化成根元素的比例</span></span><br><span class="line">      minPixelValue: <span class="number">2</span> <span class="comment">// 最小px转化值</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// input</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// output</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.32rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.01rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话我们就可以根据<code>rootValue</code>的值(100)把根元素的设置倍数扩大。<br>设置根元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root.style.fontSize = (realWidth/designWidth)*rootValue + <span class="string">'px'</span></span><br></pre></td></tr></table></figure></p><p>如果设计稿的字体大小是50px,那么设置这个元素大小时候就应该这么写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 50<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p>再来一遍这个栗子，一个750设计稿上面的一个50px大小的字体遇上一个375设备就会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(375/750)*100*0.5 =&gt; 25px</span><br></pre></td></tr></table></figure></p><p>以上的font-size会被<code>px2rem</code>转化成0.5rem,(375/750)*100是根元素的大小也就是50px。<br>完整代码在这里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置根元素大小</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setRootFontSize = <span class="function">(<span class="params"> designWidth = <span class="number">750</span>, stdRootValue = <span class="number">100</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">const</span> scale = root.clientWidth / designWidth</span><br><span class="line">  <span class="keyword">const</span> resetFontSize = scale * stdRootValue + <span class="string">'px'</span></span><br><span class="line">  <span class="keyword">if</span> (root.style.fontSize !== resetFontSize) &#123;</span><br><span class="line">    root.style.fontSize = resetFontSize</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接下来就是处理webpack中的postcss-plugin-px2rem配置问题了</span></span><br></pre></td></tr></table></figure></p><p>原理很简单，开发时候讨便宜的实现方案。<br><img width="100%" src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/h5-rem-a.png"><br><img width="100%" src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/h5-rem-b.png"><br><img width="100%" src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/h5-rem-c.png"></p><h2 id="从诉求反推的分析解决思路"><a href="#从诉求反推的分析解决思路" class="headerlink" title="从诉求反推的分析解决思路"></a>从诉求反推的分析解决思路</h2><blockquote><p>从诉求出发，<strong>我们的诉求是</strong>视觉稿上的标注尺寸可以直接拿过来用，不用进行转换、不用考虑上线后设备大小，自适应转换比例。</p></blockquote><p>一般我们设置HTML的<code>font-size</code>为百分比，这里的百分比是相对浏览器默认字号值的。最典型的方案就是设置我们的HTML根元素大小为<code>62.5%</code>，如果这么设置那么你就认为大多数浏览器默认的字号为<code>16px</code>，<code>10/16=62.5%</code>那么你在使用<code>1rem</code>时候就相当于默认字号下的<code>10px</code>大小，以此类推<code>1.6rem</code>就是<code>16px</code>。所以当浏览器的默认字号上升到<code>100px</code>，你的1.6rem就相当于<code>100px</code>大小，我们的视图随着浏览器一起变大和变小的感觉是如此的快乐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如需适配多种移动设备，建议使用rem。</span><br><span class="line"><span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">62.5%</span>; &#125;</span><br><span class="line">//设置12px字体，这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>:<span class="number">16px</span>; <span class="attribute">font-size</span>:<span class="number">1.6rem</span>; &#125;</span><br></pre></td></tr></table></figure><p>那有人要说了，浏览器不全是16px的默认值啊，如果不是这个值，那么和视觉稿就对不准了。那么这个，可以自己解决。</p><p>推荐一个<code>px</code>转<code>rem</code>的<code>postcss</code>插件<a href="https://www.npmjs.com/package/postcss-plugin-px2rem" target="_blank" rel="noopener">postcss-plugin-px2rem</a>，可以将经过loader样式中的px单位转换成rem，默认值转换关系是1:100（rootValue<strong>:</strong> 100）</p><p><strong>假设</strong>，某元素的size为<code>ElePXSize</code>，设备宽度为<code>clientWidth</code>；视觉大大给我们的视觉稿该元素size为<code>visualPXSize</code>（我们期望编码用的），视觉稿宽度为<code>visualWidth</code>。那么如果想让<u>实际的元素相对大小看起来和视觉稿一致</u>，那么下面的等式恒成立。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ElePXSize/clientWidth  =  visualPXSize/visualWidth</span><br></pre></td></tr></table></figure><p>我们知道<code>ElePXSize</code>是<code>rem</code>转化而来的,即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ElePXSize = rootSize * EleREMSize</span><br></pre></td></tr></table></figure><p><code>EleREMSize</code>则是<code>postcss-plugin-px2rem</code>根据我们编码size转换的（1:100），这个size就是<code>visualPXSize</code>，所以上述等式也就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ElePXSize = rootSize * EleREMSize</span><br><span class="line"><span class="comment">// &lt;=&gt; 变换成</span></span><br><span class="line">ElePXSize = rootSize * (visualPXSize/<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>所以我们可以求得根元素大小<code>rootSize</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ElePXSize/clientWidth  =  visualPXSize/visualWidth</span><br><span class="line"><span class="comment">// &lt;=&gt; 变换成</span></span><br><span class="line">rootSize * (visualPXSize/<span class="number">100</span>)/clientWidth  =  visualPXSize/visualWidth</span><br><span class="line"><span class="comment">// &lt;=&gt; 变换成</span></span><br><span class="line">rootSize = clientWidth*<span class="number">100</span>/visualWidth  <span class="comment">// 和visualPXSize没有半毛钱关系</span></span><br></pre></td></tr></table></figure><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p> 视觉稿宽度为750，某sku宽度为350px，在iphone8的设备上（w: 375），此时根元素的大小已经被设置成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rootSize = clientWidth*100/visualWidth</span></span><br><span class="line">rootSize = <span class="number">375</span>*<span class="number">100</span>/<span class="number">750</span> = <span class="number">50</span>px</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sku</span>&#123;</span><br><span class="line">  width: 350px; // &lt;=&gt;  width: 3.5rem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际设备显示的大小就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="number">50</span>px * <span class="number">3.5</span>rem = <span class="number">175</span>px</span><br></pre></td></tr></table></figure><p>和上面一种分析过程<mark>殊途同归</mark>，完整的一套设置根元素大小：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setRootFontSize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> PX2REM_ROOT_VAL = <span class="number">100</span></span><br><span class="line">  <span class="keyword">const</span> VISUAL_WIDTH = <span class="number">750</span>  <span class="comment">// 这个是视觉稿宽度喔</span></span><br><span class="line">  <span class="keyword">const</span> root = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">const</span> scale = root.clientWidth / VISUAL_WIDTH</span><br><span class="line">  <span class="keyword">const</span> resetFontSize = scale * PX2REM_ROOT_VAL + <span class="string">'px'</span></span><br><span class="line">  <span class="keyword">const</span> rootFontSize = root.style.fontSize</span><br><span class="line">  <span class="keyword">if</span> (rootFontSize !== resetFontSize) &#123;</span><br><span class="line">    root.style.fontSize = resetFontSize</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一场视觉稿和设备单位匹配的自适应缩放的革命结束了，再也不用担心设备的大小引起的匹配问题，连视觉MM走查时候对你的好感度都倍增=。=</p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dotjs+webpack渲染研究</title>
      <link href="/posts/30ac22db/"/>
      <url>/posts/30ac22db/</url>
      
        <content type="html"><![CDATA[<p>dotjs只有120行，比较轻量的模板渲染工具，也有其他的类似<code>nunjucks</code> <code>art-template</code>等等，三者都可以考虑使用感觉都不错，<code>dotjs</code>和<code>nunjucks</code>可以在浏览器和node环境里做模板引擎。当然现在的主流前端框架把这类<code>jquery</code>时代的东西慢慢边缘化，node环境里也可以采用同构的方式，也不是必须需要这类工具了。如果在移动端开发中都不用考虑兼容性，ie8及以上都可以使用，ie8以下拒绝提供服务=。=<br>但是我想说，不是所有的项目都是要vue、react这样的框架去上手的，虽然用脚手架启动一个框架很容易，但是觉得没有必要，如果你能想到最快的方式就是用原生的办法搞定，比如临时需要一个页面支持，无任何拓展维护，那么这个项目就不值得用框架大费周折。主流框架一定得用，但是不能站在其他能实现方案技术的对立面，玩呗~</p><blockquote><p>北交委提醒您：实现方案千万条，合适第一条</p></blockquote><h4 id="划重点："><a href="#划重点：" class="headerlink" title="划重点："></a>划重点：</h4><p>  – 使用<code>dotjs-loader</code>进行分模块开发<br>  – 熟悉<code>dotjs</code>语法<br>  – <code>.tpl</code> <code>.def</code>后缀可以随便起，建议使用<code>.tpl</code><br>  – 模块填充数据后进行拼接</p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>模板这部分如果不放在<code>webpack</code>里使用<code>loader</code>的话，就需要使用<code>script</code>标签，通过<code>id</code>方式获取里面的内容，再塞进去数据，就是浏览器即时渲染，查看源码部分，<code>{</code> <code>}</code>这些插值符号都会存在。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"header"</span> <span class="attr">type</span>=<span class="string">"text/x-dot-template"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> headTpl = doT.template(<span class="built_in">document</span>.querySelect(<span class="string">'#header'</span>).innerHTML)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> html = headTpl(&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><mark>以下使用webpack: </mark><br>不熟悉<code>dotjs</code>语法下面有文档传送门<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- head.tpl --&gt;</span></span><br><span class="line">&#123;&#123;##def.head:</span><br><span class="line">  &#123;&#123;? it.styleNight&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head-b"</span>&gt;</span>黑色主题：&#123;&#123;=it.headBlack&#125;&#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;??&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head-w"</span>&gt;</span>白色主题：&#123;&#123;=it.headWhite&#125;&#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;?&#125;&#125;</span><br><span class="line">#&#125;&#125;</span><br><span class="line">&#123;&#123;#def.head&#125;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- body.tpl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;=it.entryimg || 'http://dummyimage.com/320x180/2d8cf0/fff&amp;text=joacycode'&#125;&#125;"</span> <span class="attr">width</span>=<span class="string">"100%"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>标题：&#123;&#123;=it.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"subtitle"</span>&gt;</span>副标题：&#123;&#123;=it.subtitle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span>&gt;</span>城市：&#123;&#123;=it.city&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>商品序号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"skulist"</span>&gt;</span></span><br><span class="line">&#123;&#123;~it.list :value:index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;=value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;~&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- footer.tpl --&gt;</span></span><br><span class="line">&#123;&#123;##def.footer:</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>尾部信息：&#123;&#123;=it.footer&#125;&#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">#&#125;&#125;</span><br><span class="line">&#123;&#123;#def.footer&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模板 dotjs-loader处理后为模板函数 入参数据</span></span><br><span class="line"><span class="keyword">import</span> bodyTplFn <span class="keyword">from</span> <span class="string">'./template/body.tpl'</span></span><br><span class="line"><span class="keyword">import</span> headTplFn <span class="keyword">from</span> <span class="string">'./template/head.tpl'</span></span><br><span class="line"><span class="keyword">import</span> footerTplFn <span class="keyword">from</span> <span class="string">'./template/footer.tpl'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用模板函数</span></span><br><span class="line">  <span class="keyword">const</span> bodyHtml = bodyTplFn(&#123;</span><br><span class="line">    title,</span><br><span class="line">    subtitle,</span><br><span class="line">    list,</span><br><span class="line">    city,</span><br><span class="line">    entryimg</span><br><span class="line">  &#125;) <span class="comment">// string</span></span><br><span class="line">  <span class="keyword">const</span> headHtml = headTplFn(&#123;</span><br><span class="line">    styleNight,</span><br><span class="line">    headBlack,</span><br><span class="line">    headWhite</span><br><span class="line">  &#125;) <span class="comment">// string</span></span><br><span class="line">  <span class="keyword">const</span> footerHtml = footerTplFn(&#123;</span><br><span class="line">    needFooter,</span><br><span class="line">    footer</span><br><span class="line">  &#125;) <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 字符串模板拼接</span></span><br><span class="line">  <span class="keyword">const</span> html = headHtml + bodyHtml + footerHtml</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入axios请求工具</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br></pre></td></tr></table></figure><p>easy-mock设置的随机数据如下：<br><img width="100%" src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/dotjs-easymock.png"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从easy-mock获取数据</span></span><br><span class="line">axios.get(<span class="string">'https://www.easy-mock.com/mock/5c9dbda0bca325336a73bffc/mock/activity'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data = &#123;&#125; &#125; = res</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    title = <span class="string">''</span>,</span><br><span class="line">    subtitle = <span class="string">''</span>,</span><br><span class="line">    list = <span class="string">''</span>,</span><br><span class="line">    styleNight = <span class="string">''</span>,</span><br><span class="line">    headBlack = <span class="string">''</span>,</span><br><span class="line">    headWhite = <span class="string">''</span>,</span><br><span class="line">    needFooter = <span class="string">''</span>,</span><br><span class="line">    footer = <span class="string">''</span>,</span><br><span class="line">    city = <span class="string">''</span>,</span><br><span class="line">    entryimg = <span class="string">''</span></span><br><span class="line">  &#125; = data</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>默认情况，模板中的数据必须用 <code>it</code> 作为引用。修改设置中的 <code>varname</code>，可以改变默认的变量名。<br>还有其他可以更改的参数比如模板语法写法，控制空白字符等等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  dotjs-loader</span></span><br><span class="line"> &#123;</span><br><span class="line">    test: <span class="regexp">/\.tpl$/</span>,</span><br><span class="line">    loader: <span class="string">'dotjs-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      varname: <span class="string">'it'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>增加<code>css-loader</code> <code>scss-loader</code> <code>mini-css-extract-plugin</code> <code>node-sass</code>.<br><code>mini-css-extract-plugin</code>用于提取压缩css到同一个文件中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss|\.css$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="string">'sass-loader'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/main.scss'</span></span><br></pre></td></tr></table></figure><p>最终显示结果：<br>&lt;img width=”50%” src=’<a href="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/dotjs-done.png&gt;" target="_blank" rel="noopener">https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/dotjs-done.png&gt;</a></p><h4 id="使用链接："><a href="#使用链接：" class="headerlink" title="使用链接："></a>使用链接：</h4><p><a href="http://olado.github.io/doT/index.html" target="_blank" rel="noopener">Dotjs</a> 120行轻量化模板引擎<br><a href="http://mozilla.github.io/nunjucks/templating.html" target="_blank" rel="noopener">Nunjucks</a> 本文拓展模板引擎<br><a href="https://easy-mock.com/" target="_blank" rel="noopener">EasyMock</a> 在线mock数据，基于mockjs,使用占位符可随机生成数据<br><a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">Webpack Config</a> webpack 官方比较全的配置表<br><a href="https://www.npmjs.com/package/dotjs-loader" target="_blank" rel="noopener">dotjs-loader</a> dotjs的webpack模块化<code>loader</code></p><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/joacycode/dot-webpack" target="_blank" rel="noopener">https://github.com/joacycode/dot-webpack</a></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> dotjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> dotjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS笔记梳理-类型</title>
      <link href="/posts/a7af7ffc/"/>
      <url>/posts/a7af7ffc/</url>
      
        <content type="html"><![CDATA[<p>全局安装<code>typescript</code>，目的是使用这个<code>tsc</code>的命令工具去做<code>ts</code>文件的编译工作，编译时可配置的。<br><code>typescript</code>是我们用的<code>js</code>的超集，也就是说它有的<code>ts</code>都包含，还增强增加了一些语法上的写法，比如适合大项目大团队开发的类型约束，使得弱类型的语言得到进一步的增强，个人认为越来越逼近<code>java</code>的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>使用<code>tsc xx.ts</code>即可以编译出符合配置要求的<code>js</code>文件，当然如果编译出错会有出错提醒，编译不通过，但是<code>ts</code>仍然会给你编译出<code>js</code>文件，只是告诉你这个文件很可能达不到不是你期望的效果而已。</p><h3 id="可约束的类型"><a href="#可约束的类型" class="headerlink" title="可约束的类型"></a>可约束的类型</h3><h4 id="布尔型-boolean"><a href="#布尔型-boolean" class="headerlink" title="布尔型 boolean"></a>布尔型 <code>boolean</code></h4><h4 id="数字-number"><a href="#数字-number" class="headerlink" title="数字 number"></a>数字 <code>number</code></h4><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 <code>string</code></h4><h4 id="数组-有两种定义方式"><a href="#数组-有两种定义方式" class="headerlink" title="数组 有两种定义方式"></a>数组 有两种定义方式</h4><p>类型元素后跟<code>[]</code>，如<code>number[]</code><br>使用数组泛型，如<code>Array&lt;number&gt;</code></p><h4 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h4><p>这个类型在<code>js</code>里并没有明确定义，它表示已知数量和类型的数组，如<code>[string,number]</code>表示可以接纳形如<code>[&#39;age&#39;,20]</code>这样的数组，如果数组的长度超过了现有定义的长度，那么超出的部分会从这两种类型里面选一种匹配，符合其中一种类型就可以，这叫做联合类型的匹配，这么表达<code>string | number</code>。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>这个类型在<code>js</code>里并没有，但是是比较好用的约束一组已知的常量的类型，枚举就像集合，集合里有的就可以用，没有的就会报错，枚举里的值有两个名字，例如数字类型的枚举里一个是数值对应一个名字，两者可以相互映射。<br>我们表示星期用<code>1``2``3</code>这样的数值分别表示周一到周日，那么周一到周日的名称和数值是一一对应的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值类型枚举</span></span><br><span class="line"><span class="keyword">enum</span> Days &#123;MON = <span class="number">1</span>,TUE,WEN,THR,FRI,STA,SUN&#125;</span><br></pre></td></tr></table></figure><p>枚举的值默认是从0开始的，但是可以手动重写，后面的枚举值都会依次加1。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> monday: Days = Days.MON <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> monday: Days = Days[<span class="number">1</span>] <span class="comment">// MON</span></span><br><span class="line"><span class="comment">// 枚举打出来为类似下面的对象，形成相互映射</span></span><br><span class="line"><span class="keyword">let</span> enumDays = &#123; </span><br><span class="line">  MON:<span class="number">1</span>,</span><br><span class="line">  TUE:<span class="number">2</span>,</span><br><span class="line">  WEN:<span class="number">3</span>,</span><br><span class="line">  THR:<span class="number">4</span>,</span><br><span class="line">  FRI:<span class="number">5</span>,</span><br><span class="line">  STA:<span class="number">6</span>,</span><br><span class="line">  SUN:<span class="number">7</span>,</span><br><span class="line">  <span class="string">'1'</span>:<span class="string">'MON'</span>,</span><br><span class="line">  <span class="string">'2'</span>:<span class="string">'TUE'</span>,</span><br><span class="line">  <span class="string">'3'</span>:<span class="string">'WEN'</span>,</span><br><span class="line">  <span class="string">'4'</span>:<span class="string">'THR'</span>,</span><br><span class="line">  <span class="string">'5'</span>:<span class="string">'FRI'</span>,</span><br><span class="line">  <span class="string">'6'</span>:<span class="string">'STA'</span>,</span><br><span class="line">  <span class="string">'7'</span>:<span class="string">'SUN'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Q：思考这个枚举类型有啥使用机会？</p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>表示除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型</p><h3 id="null-amp-undefined"><a href="#null-amp-undefined" class="headerlink" title="null &amp; undefined"></a>null &amp; undefined</h3><p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dosome</span>(<span class="params">num: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num*num</span><br><span class="line">&#125;</span><br><span class="line">dosome() <span class="comment">//错误</span></span><br><span class="line"><span class="comment">// 以下都是允许的</span></span><br><span class="line">dosome(<span class="literal">undefined</span>)</span><br><span class="line">dosome(<span class="literal">null</span>)</span><br><span class="line">dosome(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>表示没有任何类型。常用在当一个函数没有返回值时。</p><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>任意类型,注意类型里还有一个<code>Object</code>类型。虽然也能表示任意类型，但是作用和<code>any</code>不一样。<code>Object</code>只能赋值，不能读取其上的任意值。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">Object</span> = &#123;name:<span class="string">'zhangsan'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// 错误！提示Object类型上没有name这个属性orz</span></span><br></pre></td></tr></table></figure></p><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code>类型是任何类型的子类型,返回的值必须是不可能存在的值，即不可能赋值给任何一个变量，比如抛出的异常错误,注意无返回值不属于<code>never</code>，属于<code>void</code>。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 注意无返回值不属于never，属于void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用JS进行图片压缩</title>
      <link href="/posts/584f30a/"/>
      <url>/posts/584f30a/</url>
      
        <content type="html"><![CDATA[<p>经常遇到用户上传文件的场景，大多数是图像，在满足一些业务时候需要对用户上传的图像进行前端的校验控制，比如体积、长宽、类型等，如果遇到校验不通过的情况分两种一种是阻止上传一种是帮组用户处理出合法的图片。<br>第一种阻止上传影响用户的体验，用户还要自己找图片处理软件对着规则进行处理。<br>第二种就需要用到前端的一些技术帮组用户处理图像，目前可以做到压缩体积、压缩宽高、改变图片类型、甚至提供裁切宽进行裁切。</p><h3 id="关键知识点："><a href="#关键知识点：" class="headerlink" title="关键知识点："></a>关键知识点：</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader</a><br><a href="https://www.canvasapi.cn/" target="_blank" rel="noopener">Canvas</a></p><h3 id="关键代码："><a href="#关键代码：" class="headerlink" title="关键代码："></a>关键代码：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以base64形式读取文件</span></span><br><span class="line">reader.readAsDataURL(file)</span><br><span class="line"><span class="comment">// 读取成功回调 e.target.result</span></span><br><span class="line">reader.onload = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123; img.src = e.target.result &#125;</span><br><span class="line"><span class="comment">// canvas画图操作，this指当前image对象，起始点在平面坐标(0,0)处，画一张目标宽高的图像 </span></span><br><span class="line">context.drawImage(file, <span class="number">0</span>, <span class="number">0</span>, Width, Height)</span><br><span class="line"><span class="comment">// 转为blob对象</span></span><br><span class="line">canvas.toBlob()</span><br><span class="line"><span class="comment">// 转为bae64对象</span></span><br><span class="line">canvas.toDataURL()</span><br><span class="line"><span class="comment">// 图片加载完毕</span></span><br><span class="line">img.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CompressPrams = &#123;</span><br><span class="line">  file: object,</span><br><span class="line">  mimeType: <span class="built_in">string</span>,</span><br><span class="line">  maxWidth: <span class="built_in">number</span>,</span><br><span class="line">  maxHeight: <span class="built_in">number</span>,</span><br><span class="line">  callback: <span class="function">(<span class="params">blob: object</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compress.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> compressImage:<span class="built_in">any</span> = (params: CompressPrams):<span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; file, mimeType = <span class="string">'image/jpeg'</span>, callback, maxWidth, maxHeight &#125; = params</span><br><span class="line">  <span class="keyword">if</span> (maxWidth === <span class="number">0</span> || maxHeight === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'MaxWidth Or MaxHeight Is Zero'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">  <span class="keyword">const</span> context = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">  <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以base64形式读取文件</span></span><br><span class="line">  reader.readAsDataURL(file)</span><br><span class="line">  <span class="comment">// 读取成功回调 e.target.result</span></span><br><span class="line">  reader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    img.src = e.target.result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 图片加载完毕</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originWidth = <span class="keyword">this</span>.width</span><br><span class="line">    <span class="keyword">const</span> originHeight = <span class="keyword">this</span>.height</span><br><span class="line">    <span class="keyword">let</span> targetWidth = originWidth</span><br><span class="line">    <span class="keyword">let</span> targetHeight = originHeight</span><br><span class="line">    <span class="comment">// 计算目标宽高，如果不存在就是原始宽高</span></span><br><span class="line">    <span class="keyword">if</span> (maxWidth &amp;&amp; maxHeight) &#123;</span><br><span class="line">      <span class="keyword">if</span> (originWidth / originHeight &gt; maxWidth / maxHeight) &#123; <span class="comment">// 原始图片比限定大小比例宽</span></span><br><span class="line">        targetWidth = maxWidth</span><br><span class="line">        targetHeight = <span class="built_in">Math</span>.round(targetWidth * (originHeight / originWidth))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 原始图片比限定大小比例高或等于</span></span><br><span class="line">        targetHeight = maxHeight</span><br><span class="line">        targetWidth = <span class="built_in">Math</span>.round(targetHeight * (originWidth / originHeight))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxWidth &amp;&amp; !maxHeight) &#123; <span class="comment">// 限定宽来比例缩放高</span></span><br><span class="line">      targetWidth = maxWidth</span><br><span class="line">      targetHeight = <span class="built_in">Math</span>.round(targetWidth * (originHeight / originWidth))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxHeight &amp;&amp; !maxWidth) &#123; <span class="comment">// 限定高来比例缩放宽</span></span><br><span class="line">      targetHeight = maxHeight</span><br><span class="line">      targetWidth = <span class="built_in">Math</span>.round(targetHeight * (originWidth / originHeight))</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.width = targetWidth</span><br><span class="line">    canvas.height = targetHeight</span><br><span class="line">    <span class="comment">// canvas画图操作，this指当前image对象，起始点在平面坐标(0,0)处，画一张目标宽高的图像  注意此时img.onload不是箭头函数</span></span><br><span class="line">    context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight)</span><br><span class="line">    <span class="comment">// 转为blob对象，mimeType为 image/*</span></span><br><span class="line">    canvas.toBlob(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过callback回调，传入文件blob对象以及压缩后的目标宽高</span></span><br><span class="line">      callback &amp;&amp; callback(blob, &#123;width: targetWidth, height: targetHeight&#125;)</span><br><span class="line">    &#125;, mimeType)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; compressImage &#125; <span class="keyword">from</span> <span class="string">'compress.js'</span></span><br><span class="line">compressImage(&#123;</span><br><span class="line">  file: newfile, </span><br><span class="line">  mimeType:<span class="string">'image/jpeg'</span>, </span><br><span class="line">  maxWidth: <span class="number">1000</span>, </span><br><span class="line">  maxHeight: <span class="number">1000</span>,</span><br><span class="line">  callback:<span class="function">(<span class="params">blob</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(blob)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FileReader </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限频节流函数debounce&amp;throttle</title>
      <link href="/posts/4278fedd/"/>
      <url>/posts/4278fedd/</url>
      
        <content type="html"><![CDATA[<p><code>lodash</code>的function模块里有两个方法，<code>debounce</code> 和 <code>throttle</code>，可以做节流限频使用，为在某些特定的环境下做必要的优化。<br>这两个方法了解原理后也可以自己去实现。</p><a id="more"></a><h3 id="场景一-曝光埋点"><a href="#场景一-曝光埋点" class="headerlink" title="场景一 曝光埋点"></a>场景一 曝光埋点</h3><p>在一个多屏长度的页面中，A模块的A元素在出现在屏幕可视区域时候（即曝光）触发埋点事件，随即上报相应参数。<br>思路：A模块A元素距离文档顶部的高度是固定值设为<code>bodyOffsetTop</code>，添加onscroll事件到window上，通过监听滚动事件，不断计算此时被卷入上去的文档高度<code>docScrollTop</code>,假设屏幕可视区域的高度为<code>viewHeight</code>。<br>当以下条件成立的时候，我们就认为该元素是出于可曝光的区域的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bodyOffsetTop &lt;= docScrollTop + viewHeight</span><br></pre></td></tr></table></figure><p>具体实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归方式获得元素距离文档顶部真实高度，不受父元素position定位影响</span></span><br><span class="line"><span class="keyword">const</span> bodyOffsetTop = <span class="function">(<span class="params">el</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(el.offsetParent.nodeName.toLowerCase() === <span class="string">'body'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> el.offsetTop</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> el.offsetTop + bodyTopOffsetTop(el.offsetParent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> verticalExpoEvent = <span class="function">(<span class="params">el,callback</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( el &amp;&amp; el.className.indexOf(<span class="string">'hasExpoed'</span>) &gt; <span class="number">-1</span> || !el) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> srcollyTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">  <span class="keyword">const</span> viewHeight = <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">  <span class="keyword">const</span> elBodyOffsetTop = bodyOffsetTop(el)</span><br><span class="line">  <span class="keyword">const</span> expoHeight =  srcollyTop + viewHeight</span><br><span class="line">  <span class="keyword">if</span>(expoHeight &gt;= elBodyOffsetTop)&#123;</span><br><span class="line">    el.className = el.className + <span class="string">' hasExpoed'</span> <span class="comment">//增加曝光后不再曝光标识</span></span><br><span class="line">    callback &amp;&amp; callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,verticalExpoEvent)</span><br></pre></td></tr></table></figure><p>以上代码可以实现功能，拿出去用看似也没有什么问题，毕竟现在的机器的都很高级嘛，处理器内存什么的依然可以有丝滑般体验。<br>但是，作为一个有追求的严谨的coding工程师,不仅要code的出来功能还要在乎功能的高性能高可用高维护，职业素养必修课之一啊。<br>上面的代码可以实现我们想要的功能，但是window的<code>onscroll</code>事件的监听是需要非常谨慎使用的，因为以像素为单位，以你滚动速度维度，以你一秒滚动一百个像素的来计算，机器需要一秒执行你的onscroll回调函数一百次，其中的计算量大多数都是无效的，非<code>pay-load</code>，以至于不怎么高端的机器，吃着火锅滑着屏幕的时候手机就死机了。<br>这时候就需要在有效时候做<code>节流</code><br><em>解决思路：</em> 无论以什么做触发单位，滑动速度有多快，都以固定的频率去执行监听事件。</p><h3 id="场景二-表单合法性即时检查"><a href="#场景二-表单合法性即时检查" class="headerlink" title="场景二 表单合法性即时检查"></a>场景二 表单合法性即时检查</h3><p>用户在填写表单输入时候，需要即时的对用户的输入合法性进行检测,如敏感词等<br>思路： </p><ul><li>使用<code>onchange</code>或者<code>onkeyup</code>做监听</li><li>限制监听<code>keyCode</code>范围</li><li>剪切和黏贴事件会change表单值</li><li>中文输入法处理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// between func</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> enLock = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> between = <span class="function">(<span class="params">val, x, y</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> val !== <span class="string">'number'</span> || <span class="keyword">typeof</span> x !== <span class="string">'number'</span> || <span class="keyword">typeof</span> y !== <span class="string">'number'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Each agru should be a number'</span>)</span><br><span class="line">  <span class="keyword">return</span> (val &gt;= x &amp;&amp; val &lt;= y)</span><br><span class="line">&#125;</span><br><span class="line">$el.addEventListener(<span class="string">'keyup'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(enLock) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span>( between(e.keyCode, <span class="number">48</span>, <span class="number">57</span>) || between(e.keyCode, <span class="number">65</span>, <span class="number">90</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">    <span class="comment">// 合法性检查 ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$el.addEventListener(<span class="string">'cut'</span>,(e)=&gt;&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">    <span class="comment">// 合法性检查 ...</span></span><br><span class="line">true&#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$el.addEventListener(<span class="string">'paste'</span>,(e)=&gt;&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">    <span class="comment">// 合法性检查 ...</span></span><br><span class="line">true&#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$el.addEventListener(<span class="string">'compositionstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    enLock = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">$el.addEventListener(<span class="string">'compositionend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    enLock = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">    <span class="comment">// 合法性检查 ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>以上代码也可以实现功能，但还是有问题，用户在进行输入的时候，每个字符汉字都需要进行整篇的合法性检查，违背了高效性，浪费了一定的资源，我们其实只需要在用户停止输入的短时间内或者离开表单时候进行合法性检查即可。<br><em>解决思路：</em> 用户输入间隔期间或者离开之前进行检测。</p><h3 id="Lodash中的throttle-amp-debounce"><a href="#Lodash中的throttle-amp-debounce" class="headerlink" title="Lodash中的throttle &amp; debounce"></a>Lodash中的throttle &amp; debounce</h3><p><a href="https://www.lodashjs.com/docs/4.17.5.html#debounce" target="_blank" rel="noopener">debounce</a>  限频<br>简单理解：在限定的时间内如果有新触发，那么上一次的触发无效，限时重新计算。限定的时间无触发或者大于限定的时间触发，都会按照正常触发执行。</p><p><a href="https://www.lodashjs.com/docs/4.17.5.html#throttle" target="_blank" rel="noopener">throttle</a>  节流<br>简单理解：在限定的时间内如果有新触发，那么函数会按照限定时间间隔执行，直到限定的时间无触发或者大于限定的时间触发。</p><p><em>举例子</em><br>有一个button $btn, 绑定click事件callback函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$btn.addEventListener(<span class="string">'click'</span>, callback)</span><br><span class="line">$btn.addEventListener(<span class="string">'click'</span>, _.debounce(callback,<span class="number">1000</span>,&#123;<span class="attr">leading</span>:<span class="literal">false</span>,<span class="attr">trailing</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">$btn.addEventListener(<span class="string">'click'</span>, _.throttle(callback,<span class="number">1000</span>,&#123;<span class="attr">leading</span>:<span class="literal">true</span>,<span class="attr">trailing</span>:<span class="literal">true</span>&#125;))</span><br></pre></td></tr></table></figure></p><p><em>啥都没做</em> 那么你点击的手速多快，这个callback函数就会被执行多少遍。<br><em>debounce</em> 做了1秒的限频，无限快的手速点击$btn，10秒后callback被执行 <em>0</em> 次，11秒后callback被执行1次<br><em>throttle</em> 做了1秒的限频，无限快的手速点击$btn，10秒后callback被执行 <em>10</em> 次</p><p>但是如果你是…<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/debounce-flash.jpg" width="200" style="border-radius:50%"><br><a href="https://baike.baidu.com/item/%E9%97%AA%E7%94%B5/19463688?fr=aladdin" target="_blank" rel="noopener">闪电</a>点击的间隔超过1秒，那么这两个限制函数对你无效。</p><p>以上场景一和场景二的代码可优化为如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 曝光埋点</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,_.throttle(verticalExpoEvent,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单合法性即时检查</span></span><br><span class="line">$el.addEventListener(<span class="string">'keyup'</span>,_.debounce(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(enLock) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span>( between(e.keyCode, <span class="number">48</span>, <span class="number">57</span>) || between(e.keyCode, <span class="number">65</span>, <span class="number">90</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.value)</span><br><span class="line">    <span class="comment">// 合法性检查 ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">500</span>))</span><br></pre></td></tr></table></figure></p><h3 id="手写实现throttle-amp-debounce"><a href="#手写实现throttle-amp-debounce" class="headerlink" title="手写实现throttle &amp; debounce"></a>手写实现throttle &amp; debounce</h3><h4 id="实现一个throttle节流函数"><a href="#实现一个throttle节流函数" class="headerlink" title="实现一个throttle节流函数"></a>实现一个throttle节流函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流就是保证一段时间内只执行一次核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval = <span class="number">500</span></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">let</span> run = <span class="literal">true</span> </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!run) <span class="keyword">return</span></span><br><span class="line">    run = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//定时器执行完成才能执行下一次</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </span><br><span class="line">      run = <span class="literal">true</span>; </span><br><span class="line">    &#125;, interval)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用举例</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, throttle(fn,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h4 id="实现一个debounce防抖函数"><a href="#实现一个debounce防抖函数" class="headerlink" title="实现一个debounce防抖函数"></a>实现一个debounce防抖函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防抖在一定时间段的连续函数调用，只让其执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, interval = <span class="number">500</span></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>; </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    clearTimeout(timeout); </span><br><span class="line">    <span class="comment">// 每次触发 定时器重新计时</span></span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </span><br><span class="line">    &#125;, interval); </span><br><span class="line">  &#125;; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用举例</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, debounce(fn,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debounce </tag>
            
            <tag> throttle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue长笔陆续更新-vuex</title>
      <link href="/posts/15f2dcfe/"/>
      <url>/posts/15f2dcfe/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -S vue</span><br><span class="line">npm install -S vuex</span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h4 id="root组件处进行store注册注入"><a href="#root组件处进行store注册注入" class="headerlink" title="root组件处进行store注册注入"></a>root组件处进行store注册注入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(storeParams)</span><br><span class="line"><span class="keyword">const</span> storeParams = &#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    point: [<span class="number">55</span>,<span class="number">90</span>,<span class="number">29</span>,<span class="number">66</span>,<span class="number">86</span>,<span class="number">85</span>,<span class="number">99</span>],</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  getters:&#123;</span><br><span class="line">    pointBoder(state)&#123;</span><br><span class="line">      <span class="keyword">const</span> maxPoint = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, state.point)</span><br><span class="line">      <span class="keyword">return</span> maxPoint<span class="number">-20</span>  <span class="comment">//最高分以下20分被认为是高分的边界</span></span><br><span class="line">    &#125;,</span><br><span class="line">    highPoints(state, getters)&#123;</span><br><span class="line">      <span class="keyword">const</span> pointBorder = getters.pointBoder</span><br><span class="line">      <span class="keyword">return</span> state.point.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; pointBorder)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="comment">// 'increament'称为事件类型 对应方法称为回调函数</span></span><br><span class="line">    increament(state, &#123; baseNum = <span class="number">1</span> &#125;)&#123;</span><br><span class="line">      state.count += payload.baseNum </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  actions:&#123;</span><br><span class="line">    asyncIncreament(&#123; commit &#125;)&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        commit(<span class="string">'increament'</span>)</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vue组件中使用状态管理数据"><a href="#Vue组件中使用状态管理数据" class="headerlink" title="Vue组件中使用状态管理数据"></a>Vue组件中使用状态管理数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state <span class="comment">//获取state</span></span><br><span class="line"><span class="keyword">this</span>.$store.getters <span class="comment">//获取gettter</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(type, payload) <span class="comment">// 提交mutation 更新state</span></span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(type, payload) <span class="comment">// 提交action 更新state</span></span><br></pre></td></tr></table></figure><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>1.<code>vue</code>组件中展示<code>store</code>状态，在计算属性中并使用<code>this.$store</code>访问。<br>2.<code>Vue.use(Vuex)</code> 并在根实例中注册<code>store</code>，值为<code>new Vuex.Store(storeParams)</code>，选项提供了一种机制将状态从根组件“注入”到每一个子组件中。<br>3.<code>getters</code>可认为是<code>store</code>的计算属性，且和计算属性一样会根据依赖被缓存，接受<code>state</code>作为其第一个参数，接受其他 <code>getter</code> 作为第二个参数。 实现给<code>getter</code>传参，让<code>getter</code>返回一个函数即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storeParams = &#123;</span><br><span class="line">  getters: &#123;</span><br><span class="line">    attachParams: <span class="function">(<span class="params">state</span>) =&gt;</span> (name) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;name&#125;</span>,website:<span class="subst">$&#123;state.site&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$store.getters.attachParams(<span class="string">'aszero'</span>)</span><br></pre></td></tr></table></figure></p><p>4.<code>mapState</code>、<code>mapGetters</code>返回一个对象，可以使用对象展开运算符进行<code>computed</code>的混入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState , mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123; </span><br><span class="line">  ...mapGetters(&#123;</span><br><span class="line">    hp: <span class="string">'highPoints'</span> <span class="comment">// 把 `this.hp` 映射为 `this.$store.getters.highPoints`</span></span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    p: <span class="string">'point'</span> <span class="comment">// 把 `this.p` 映射为 `this.$store.state.point`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.<code>mutation</code>必须是同步函数。<br>6.<code>computed</code>必须有<code>return</code>, 调用<code>computed</code>时候直接执行<code>computed</code>内逻辑并返回return值，<code>computed</code>只对<code>data</code>负责，data变更驱动<code>computed</code>更新状态。<code>getters</code>类似于<code>computed</code>，<code>state</code>类似于<code>data</code>。<br>7.<code>Action</code> 提交的是 <code>mutation</code>，而不是直接变更状态,包含任意异步操作。<code>action</code>接受<code>context</code>参数，和<code>store</code>实例具有相同的属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storeParams = &#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    doSome1(context)&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    doSome2(&#123; state, getters, commit, dispath &#125;)&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.<code>state</code>、<code>getter</code>在vue组件的<code>computed</code>中调用，便于在提交状态后更新；<code>mutation</code>和<code>action</code>一般在<code>methods</code>中封装调用。</p><h2 id="Vue-plugins"><a href="#Vue-plugins" class="headerlink" title="Vue plugins"></a>Vue plugins</h2><p>通过<code>Vue.use</code>全局方法使用插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'Vue'</span></span><br><span class="line"><span class="keyword">import</span> VueToast <span class="keyword">from</span> <span class="string">'./plugins.js'</span></span><br><span class="line">Vue.use(VueToast)</span><br></pre></td></tr></table></figure></p><p>插件为一个对象,内有<code>public</code>方法<code>install</code>,方法参数为构造器<code>Vue</code>和可选参数<code>options</code>。<br>通过参数<code>Vue</code>可以做很多事情<br>1.直接绑定属性方法到全局构造器上使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.dosomthing = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>2.绑定属性方法到<code>Vue</code>实例，这样可以在实例中可以通过<code>this</code>访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.dosomthing = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>3.mixin全局混入 <a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">mixin文档</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  methods:&#123;</span><br><span class="line">    dosomthing()&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>4.添加资源,指令<code>directive</code>、过滤<code>filter</code>、过渡等。 <a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令文档</a>   <a href="https://cn.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">过滤器文档</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义指令</span></span><br><span class="line"><span class="comment">// 只有bind、update勾子函数的简写，不考虑其他勾子函数</span></span><br><span class="line">Vue.directive(<span class="string">'dosome'</span>,(el,&#123;name,value,expression,arg,modifiers&#125;,vnode,oldVnode)=&gt;&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">     el, <span class="comment">// 指令所绑定的DOM元素</span></span><br><span class="line">     name, <span class="comment">// 指令名，不包括 v- 前缀</span></span><br><span class="line">     value, <span class="comment">// 指令的绑定值,计算值</span></span><br><span class="line">     expression, <span class="comment">// 字符串形式的指令表达式</span></span><br><span class="line">     arg, <span class="comment">// 传给指令的参数</span></span><br><span class="line">     modifiers <span class="comment">// 包含修饰符的对象</span></span><br><span class="line">   &#125;)) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// v-dosome:foo.a.b = dosome</span></span><br><span class="line"><span class="comment">//   ------ --- ---   ------</span></span><br><span class="line"><span class="comment">//   name   arg mod  expression</span></span><br></pre></td></tr></table></figure></p><p>一个toast 插件例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//plugins.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.$vueToast = <span class="function">(<span class="params">msg, timeout</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建可复用可拓展的组件构造器</span></span><br><span class="line">      <span class="keyword">const</span> Toast = Vue.extend(&#123;</span><br><span class="line">        template: <span class="string">`&lt;div class="vue-toast-fix"&gt;&lt;div class="vue-toast-content"&gt;<span class="subst">$&#123;msg&#125;</span>&lt;/div&gt;&lt;/div&gt;`</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 在文档内渲染为：</span></span><br><span class="line">      <span class="comment">// new Toast().$mount('body')或 </span></span><br><span class="line">      <span class="comment">// new Toast(&#123;el:'body'&#125;)</span></span><br><span class="line">      <span class="keyword">const</span> toastTpl = <span class="keyword">new</span> Toast().$mount().$el <span class="comment">// 文档外渲染</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(toastTpl)</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(toastTpl)</span><br><span class="line">      &#125;, timeout || <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h3><ul><li><code>router-link</code>被渲染成<code>a</code>标签</li><li><code>to</code> 指定链接，对应<code>routes</code>里的<code>path</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/index'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/discovery'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/home/vip/list'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/home/user/list/1'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/home/user/passport'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由渲染出口"><a href="#路由渲染出口" class="headerlink" title="路由渲染出口"></a>路由渲染出口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 默认视图</span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">// 命名视图</span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">'viewA'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">'viewB'</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ul><li>全局前置守卫 <code>beforeEach</code>  对应后置守卫<code>afterEach</code>, 无<code>next</code>参数<br>只要路由发生变更就会进入勾子函数。</li><li>路由独享守卫  <code>beforeEnter</code><br>只有进入当前路由时会进入勾子函数。</li><li>组件内守卫  <code>beforeRouteUpdate</code><br>在无全局前置守卫时候，若动态路径参数渲染相同组件，组件复用的情况下，无法触发当前路由守卫。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="comment">//路由独享守卫</span></span><br><span class="line"><span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    component: HomeView,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//组件内守卫</span></span><br><span class="line"><span class="keyword">const</span> HomeView =&#123;</span><br><span class="line">  template:<span class="string">''</span>,</span><br><span class="line">  beforeRouteUpdate: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">    <span class="comment">// 动态路径参数，复用组件</span></span><br><span class="line">    path: <span class="string">'/home/:channel'</span>,</span><br><span class="line">    component: ChannelView,</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'home路由独享守卫：'</span>, to, <span class="keyword">from</span>)</span><br><span class="line">      next()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 嵌套路由，路由出口&lt;router-view&gt; 在 ChannelView 内</span></span><br><span class="line">    children:[&#123;</span><br><span class="line">      path: <span class="string">'list/:eq'</span>,</span><br><span class="line">      component: HomeVideoListView</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      path: <span class="string">'passport'</span>,</span><br><span class="line">      component: HomePassportView</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    components: &#123;  <span class="comment">// 这里是components</span></span><br><span class="line">      viewA: IndexSideView,</span><br><span class="line">      viewB: IndexContentView</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    path: <span class="string">'/audi'</span>,</span><br><span class="line">    alias: [<span class="string">'/dengchang'</span>,<span class="string">'/sihuan'</span>] <span class="comment">//别名</span></span><br><span class="line">    component: DiscoveryView</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="route-router"><a href="#route-router" class="headerlink" title="$route $router"></a>$route $router</h3><p><a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">$route</a>  路由对象<br>路由对象是不可变 (immutable) 的，每次成功的导航后都会产生一个新的对象<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/vue-route.jpg" width="100%"><br><a href="https://router.vuejs.org/zh/api/#router-%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">$router</a>  访问全局路由器<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/vue-router.jpg" width="100%">  </p><h3 id="vue文档链接"><a href="#vue文档链接" class="headerlink" title="vue文档链接"></a>vue文档链接</h3><p><a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">vue-api</a><br><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">vue-cli-3.0-config</a><br><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">vuex</a><br><a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">vue-plugins</a></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
            <tag> vue-rooter </tag>
            
            <tag> vue-plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack从0-1搭建项目实践流程</title>
      <link href="/posts/ea8ce33c/"/>
      <url>/posts/ea8ce33c/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化-生成package-json"><a href="#初始化-生成package-json" class="headerlink" title="初始化,生成package.json"></a>初始化,生成package.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Install-Node-Dependency"><a href="#Install-Node-Dependency" class="headerlink" title="Install Node Dependency"></a>Install Node Dependency</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev webpack webpack-dev-server webpack-merge cross-env time-stamp</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev @babel/core @babel/preset-react babel-preset-env babel-loader</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev style-loader css-loader sass-loader postcss-loader autoprefixer cssnano postcss-preset-env node-sass file-loader url-loader</span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --config webpack.config.dev -d --history-api-fallback  --inline  --colors"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"npm run clean &amp;&amp; cross-env NODE_ENV=production  webpack --config webpack.config.prod --progress --colors"</span>,</span><br><span class="line">  <span class="string">"clean"</span>: <span class="string">"rm -rf dist"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>,<span class="string">"@babel/preset-react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>git版本控制配置表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/dist/</span><br></pre></td></tr></table></figure></p><h3 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h3><p>npm包发布配置表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/src/</span><br></pre></td></tr></table></figure></p><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><p>config可以通过<code>webpack-merge</code>拆分成<code>base</code>,<code>dev</code>,<code>prod</code>,<code>moduleN</code><br><a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">webpack configs</a></p><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p><a href="https://www.webpackjs.com/plugins/html-webpack-plugin/" target="_blank" rel="noopener">html-webpack-plugin</a><br><a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a><br><a href="https://www.npmjs.com/package/zip-webpack-plugin" target="_blank" rel="noopener">zip-webpack-plugin</a><br><a href="https://www.webpackjs.com/plugins/provide-plugin/" target="_blank" rel="noopener">new webpack.ProvidePlugin</a><br><a href="https://www.webpackjs.com/plugins/hot-module-replacement-plugin/" target="_blank" rel="noopener">new webpack.HotModuleReplacementPlugin</a><br><a href="https://www.webpackjs.com/plugins/environment-plugin/" target="_blank" rel="noopener">new webpack.EnvironmentPlugin</a></p><h3 id="postcss-config-js"><a href="#postcss-config-js" class="headerlink" title="postcss.config.js"></a>postcss.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parser: <span class="string">'sugarss'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'cssnano'</span>)(&#123;</span><br><span class="line">      preset: <span class="string">'default'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-示例"><a href="#webpack-config-示例" class="headerlink" title="webpack.config 示例"></a>webpack.config 示例</h3><p><strong>base</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> devMode = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> miniExtractSass = <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">  filename: devMode ? <span class="string">'dev.css'</span> : <span class="string">'prod.css'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(jsx|js)$/</span>,</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss|\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        MiniCssExtractPlugin.loader,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            minimize: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpe?g|gif|svg|ttf|eot|woff)(\?.*)?$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">'file-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: <span class="string">'[name]_[hash:6].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.json'</span>, <span class="string">'.css'</span>, <span class="string">'.scss'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      componentsPackage: path.resolve(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    miniExtractSass,</span><br><span class="line">    <span class="keyword">new</span> webpack.EnvironmentPlugin([<span class="string">'NODE_ENV'</span>])</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>dev</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.base'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> createWithHtml = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: <span class="string">'./example/index.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseConfig, &#123;</span><br><span class="line">  entry: <span class="string">'./example/index.jsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'dev.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    createWithHtml, <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'./example'</span>),</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">8088</span>,</span><br><span class="line">    progress: <span class="literal">true</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>prod</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.base'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseConfig, &#123;</span><br><span class="line">  context: path.join(__dirname, <span class="string">'./src'</span>),</span><br><span class="line">  entry: <span class="string">'./app/index.jsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'./'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发之charles的本地服务调试</title>
      <link href="/posts/6c907652/"/>
      <url>/posts/6c907652/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles官网</a><br>mac上我一般都会用Charles作为抓包和代理映射工具  </p><blockquote><p>使用场景：移动端进行本地的实机调试，线上站点调试。</p></blockquote><p><strong>举个例子：</strong>我们开发搭建一个移动端页，我们最终的目的是让页面流转到移动设备上进行使用，不同的系统平台、不同的机型、不同的浏览器引擎、甚至他们各自不同的版本都可能影响兼容性和功能点正常使用。那么浏览器开发方式结束之后第一时间就需要进行真机上的开发，你不可能发一次预发环境调试一次，这样效率太低而且做法过于”愚蠢“。那么就需要在启动本地服务的方便修改的情况下，能调试线上的M所有资源。</p><p>所以这里用到<strong>映射代理</strong>，可以把A地址map到B地址。在不改变目标A地址情况下，让访问的资源转到B地址（可以是线上服务也可以是本地服务甚至是本地静态资源），这有点像DNS劫持钓鱼网站的做法，但是我们是用来本地调试方便开发，方便的代理线上地址到本地服务或者本地资源进行调试开发。</p><p>重点介绍下<strong>charles</strong>的使用，window上的fiddler原理是一样的。</p><a id="more"></a><h3 id="普通抓包"><a href="#普通抓包" class="headerlink" title="普通抓包"></a>普通抓包</h3><p>Charles和需要抓包的网络请求设备处于<mark>同一网络环境</mark>中。<br>1.工具栏的<code>proxy -&gt; macOS Proxy</code>勾选就可以抓包本机的请求<br>2.移动设备或者其他设备抓包请将网络的代理设置成手动，代理地址即为Charles软件所在设备的网络环境ip,端口一般为8888，设置完成后Charles会有弹框提醒是否允许信任之类的询问，直接选择<code>allow</code>，这样就可以愉快的抓其他设备的请求包来看了，这种抓包不需要安装<code>ssl证书</code>也可以抓<code>https</code>。</p><p>装本机证书<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-ca.jpg" width="100%"><br>装移动端证书<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-cam.jpg" width="100%">  </p><h3 id="映射代理抓包"><a href="#映射代理抓包" class="headerlink" title="映射代理抓包"></a>映射代理抓包</h3><p>这种不仅仅是抓包，而是一种映射代理，可以把A地址映射到B地址。在不改变A地址情况下，让访问自动跳到B地址，这有点像DNS劫持，钓鱼网站这样的做法，但是我们是用来方便开发，你可以方便的代理线上地址到本地服务或者本地资源进行调试开发。<br>1.在工具栏的Tools-&gt;Map Remote里面进行设置即可。<br>注意映射的地址要相同，映射的<mark>文件名</mark>也需要相同才能匹配成功，<br>如果你映射的是AB两网站的<code>grade2/class3/*</code>，<br>用Charles去映射A网站的<code>grade2/class3/names.js</code>到B网站的<code>grade2/class3/ages.js</code>，<br>那么<code>ages.js</code>和<code>names.js</code>两者就映射不成功，不应该用<code>grade2/class3/*</code>，<br>而是用<code>grade2/class3/names.js -&gt; grade2/class3/ages.js</code>强制一对一映射。<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-map.jpg" width="60%"><br>2.这里如果要映射的地址是<code>https</code>的话，需要下载Charles的<code>ssl证书</code>到你的设备里，否则安全机制会导致映射失败，下载地址在工具栏 <code>Help-&gt;SSL proxying</code>里面下载本地版的和移动版的有相关的提示。</p><p><code>Configure your device to use Charles as its HTTP proxy on x.x.x.x:8888, then browse to chls.pro/ssl to download and install the certificate.</code><br>大致意思就是移动版的需要连接代理设置端口号，参考方法1，然后访问<code>chls.pro/ssl</code>,就可以下载相应的证书了。<br>流程示意图如下：<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-overview.jpg" width="100%"></p><h3 id="HTTPS映射不成功看这里"><a href="#HTTPS映射不成功看这里" class="headerlink" title="HTTPS映射不成功看这里"></a>HTTPS映射不成功看这里</h3><p>如果上面的ssl证书装完还是不可以映射https，那么就要在这里多进行一个操作的设置，在<code>proxy -&gt; SSL Proxying setting</code>里，进行需要进行https地址的配置，默认端口为443，注意这里的实测配置为<code>*</code>后的域名后缀地址必须为<code>.com</code>，其他区域或者个性域名后缀没有映射成功,如<code>.me``.love</code>，或许通过强制配置可以成功。<br>配置<code>SSL Proxying setting</code><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-ssl.jpg" width="50%"><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/charles-ssl_blank.jpg" width="50%"></p><h3 id="移动端的控制台vconsole"><a href="#移动端的控制台vconsole" class="headerlink" title="移动端的控制台vconsole"></a>移动端的控制台<code>vconsole</code></h3><p>Npm地址 <a href="https://www.npmjs.com/package/vconsole" target="_blank" rel="noopener">https://www.npmjs.com/package/vconsole</a></p><p>可以方便的第一时间开启debug模式，在移动端查看控制台打印信息以及network和系统信息等，非常方便定位问题。唯一需要注意的是<code>iOS8</code>和<code>Android 5</code>以下的引入兼容性问题，<strong>可能会导致白屏</strong>。</p><p><strong>类似</strong>的比较好用的工具还有<code>Eruda</code>。<a href="https://github.com/liriliri/eruda/blob/master/doc/README_CN.md" target="_blank" rel="noopener">https://github.com/liriliri/eruda/blob/master/doc/README_CN.md</a></p><h4 id="script用法"><a href="#script用法" class="headerlink" title="script用法"></a><strong>script用法</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;CDN Url&#125;/vconsole.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// init vConsole</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="commonJS或者ESmod中使用"><a href="#commonJS或者ESmod中使用" class="headerlink" title="commonJS或者ESmod中使用"></a>commonJS或者ESmod中使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D vconsole</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vconsole <span class="keyword">from</span> <span class="string">'vconsole'</span></span><br><span class="line"><span class="comment">//const Vconsole = require('vconsole')</span></span><br><span class="line"><span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole()</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node笔记整理之HTTP模块</title>
      <link href="/posts/e41d3209/"/>
      <url>/posts/e41d3209/</url>
      
        <content type="html"><![CDATA[<p>核心类<br><code>http.Server</code> 提供服务处理客户端的请求<br><code>http.ServerResponse</code> 服务端针对客户端的请求做出响应<br><code>http.IncomingMessage</code> 获取服务端/客户端返回的相关信息<br><code>http.ClientRequest</code> 客户端向服务端发起请求</p><h2 id="http-Server类"><a href="#http-Server类" class="headerlink" title="http.Server类"></a>http.Server类</h2><p><strong>提供服务，处理客户端的请求</strong></p><p><code>createServer(requestListener)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param requestListener(request,response) &lt;Function&gt;  当接收到客户端的请求时候进行的处理</span></span><br><span class="line"><span class="comment"> * * * * * @param request http.IncomingMessage对象 指客户端的请求</span></span><br><span class="line"><span class="comment"> * * * * * @param response http.serverResponse对象 指服务端的响应</span></span><br><span class="line"><span class="comment"> * @return HTTP Server类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 继承自 net.server 类且具有以下额外事件方法属性</span></span><br><span class="line"><span class="comment"> * @event clientError 客户端触发一个Error事件,该事件监听器负责销毁底层socket</span></span><br><span class="line"><span class="comment"> * * * *  callback(err,socket)</span></span><br><span class="line"><span class="comment"> * * * *  @param err 错误对象</span></span><br><span class="line"><span class="comment"> * * * *  @param socket net.socket对象 触发此事件将不会有(req,res),所以发送任何http响应,应写入socket对象</span></span><br><span class="line"><span class="comment"> * @event close 当http服务关闭触发</span></span><br><span class="line"><span class="comment"> * @event connect 当客户端发送HTPP CONNECT请求时候触发,HTTP method为connect,该事件未被监听则客户端会关闭连接</span></span><br><span class="line"><span class="comment"> * @event connection 客户端和服务端建立连接时触发 callabck(socket) </span></span><br><span class="line"><span class="comment"> * * * *  @param socket 服务端监听客户端的socket对象</span></span><br><span class="line"><span class="comment"> * @event request callback(req,res) 每接收到一个请求时触发，多个request可能对应的是一个 connection(keep-alive), 参数值同requestListener</span></span><br><span class="line"><span class="comment"> * @event upgrade callback(req,socket,head) 每当客户端发送http upgrade请求时触发，该事件未被监听则客户端会关闭连接</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method close 停止服务端接收新的连接</span></span><br><span class="line"><span class="comment"> * @method listen([port],[hostname],[backlog],[callback])</span></span><br><span class="line"><span class="comment"> * * * * * @param port &lt;number&gt; 端口 默认随机分配</span></span><br><span class="line"><span class="comment"> * * * * * @param hostname &lt;string&gt; 主机名域名</span></span><br><span class="line"><span class="comment"> * * * * * @param backlog &lt;number&gt; 等待连接的队列最大长度 默认511</span></span><br><span class="line"><span class="comment"> * * * * * @param callback &lt;function&gt; 回调</span></span><br><span class="line"><span class="comment"> * @method listen(path,[callback]) 启动一个unix socket服务</span></span><br><span class="line"><span class="comment"> * @method listen(handle,[callback]) </span></span><br><span class="line"><span class="comment"> * @method setTimeout([msecs=120000],[callback]) 设置socket超时时间,发生超时触发服务器对象的 'timeout' 事件,并传入 socket 作为一个参数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @property listening [boolean] 服务是否在监听连接</span></span><br><span class="line"><span class="comment"> * @property maxHeaderCount 限制请求头的最大数量 默认2000 0表示无限制</span></span><br><span class="line"><span class="comment"> * @property timeout 设置获取连接超时时间</span></span><br><span class="line"><span class="comment"> * @property keepAliveTimeout 服务器完成最后的响应需要等待额外数据的时间,保持活跃的毫秒数,之后才销毁socket</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="http-ServerResponse类"><a href="#http-ServerResponse类" class="headerlink" title="http.ServerResponse类"></a>http.ServerResponse类</h2><p><strong>服务端针对客户端的请求做出响应</strong>  <code>serverResponse</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端响应流 可写流</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 事件方法属性</span></span><br><span class="line"><span class="comment"> * @event close end方法调用之前被终止触发</span></span><br><span class="line"><span class="comment"> * @event finish 当响应已被发送时触发（不意味着客户端已接收到任何东西）,此后响应对象不再触发任何事件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method addTrailers(headers) 添加http尾部响应头到响应</span></span><br><span class="line"><span class="comment"> * @method end([data],[encoding],[callback]) 通知服务器所有响应头和响应主体都被发送</span></span><br><span class="line"><span class="comment"> * @method setHeader(name,value) 为一个隐式的响应头设置值 改+增</span></span><br><span class="line"><span class="comment"> * * * * * Tips: 如果该响应头已存在,则值会被覆盖,如果要发送多个名称相同的响应头,则使用字符串数组</span></span><br><span class="line"><span class="comment"> * * * * * Tips: write方法第一次被调用随即发送响应头，而writeHeader调用时即发送响应头</span></span><br><span class="line"><span class="comment"> * @method getHeader(name) @return [string] 读取一个已入队列但尚未发送到客户端的响应头,名称不区分大小写</span></span><br><span class="line"><span class="comment"> * @method getHeaderNames() @return [array] 返回包含当前响应唯一名称的http头信息名称数组,名称均小写</span></span><br><span class="line"><span class="comment"> * @method getHeaders @return [object] 返回当前响应头信息 查</span></span><br><span class="line"><span class="comment"> * @method hasHeader(name) @return [boolean] 判断是否含有一个已入队列但尚未发送到客户端的响应头</span></span><br><span class="line"><span class="comment"> * @method removeHeader(name) 从隐式发送的队列中移除一个响应头 删</span></span><br><span class="line"><span class="comment"> * @method writeHeader(statusCode,[statusMessage],[headers]) 优先级高于setHeader 并且在write()和end()之前调用，否则会切换到隐式响应头</span></span><br><span class="line"><span class="comment"> * * * * * @param statusCode [number] 状态码 </span></span><br><span class="line"><span class="comment"> * * * * * @param statusMessage [string] 状态描述</span></span><br><span class="line"><span class="comment"> * * * * * @param headers [object] 服务端响应头</span></span><br><span class="line"><span class="comment"> * * * * * * * * * headers = &#123;</span></span><br><span class="line"><span class="comment"> * * * * * * * * * content-type: 指定内容类型,</span></span><br><span class="line"><span class="comment"> * * * * * * * * * location: 用于将客户端重定向到另一个url地址,</span></span><br><span class="line"><span class="comment"> * * * * * * * * * content-disposition: 用于指定一个被下载的文件名,</span></span><br><span class="line"><span class="comment"> * * * * * * * * * content-length: 用于指定服务端响应内容的字节数,</span></span><br><span class="line"><span class="comment"> * * * * * * * * * set-cookie: 用于在客户端创建一个cookie</span></span><br><span class="line"><span class="comment"> * * * * * * * * * content-encoding: 服务器端相应内容的编码方式</span></span><br><span class="line"><span class="comment"> * * * * * * * * * Cache-Control:用于开启缓存机制</span></span><br><span class="line"><span class="comment"> * * * * * * * * * Expires: 用于指定缓存过期时间</span></span><br><span class="line"><span class="comment"> * * * * * * * * * Etag: 用于指定当服务端响应内容没有变化时不重新下载数据</span></span><br><span class="line"><span class="comment"> * * * * * * * * * &#125;</span></span><br><span class="line"><span class="comment"> * @method write(chunk,[encoding],[callback]) 发送一块响应主体</span></span><br><span class="line"><span class="comment"> * * * * * @param chunk [string|buffer]</span></span><br><span class="line"><span class="comment"> * * * * * @param encoding [string] 默认‘utf8’</span></span><br><span class="line"><span class="comment"> * * * * * @param callback [function]</span></span><br><span class="line"><span class="comment"> * * * * * @return [boolean] 全部数据进入内核缓存区-true 全部或者部分数据依然在内存排队-false</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @property finished [boolean] 表示响应是否已经完成 执行end()之后会变成true</span></span><br><span class="line"><span class="comment"> * @property headersSent 返回一个布尔值(只读),如果响应头已被发送则为 true,否则为 false</span></span><br><span class="line"><span class="comment"> * @property sendDate 默认为 true,如果false响应头里没有日期响应头,否则日期响应头会被自动生成并发送</span></span><br><span class="line"><span class="comment"> * @property statusCode 当使用隐式的响应头时（没有显式地调用 response.writeHead()）,该属性控制响应头刷新时将被发送到客户端的状态码。</span></span><br><span class="line"><span class="comment"> * @property statusMessage 当使用隐式的响应头时,该属性控制响应头刷新时将被发送到客户端的状态信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="http-IncomingMessage类"><a href="#http-IncomingMessage类" class="headerlink" title="http.IncomingMessage类"></a>http.IncomingMessage类</h2><p><strong>获取客户端请求的相关信息</strong>  <code>serverRequset</code><br><strong>获取服务端返回的相关信息</strong>  <code>clientResponse</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可读流</span></span><br><span class="line"><span class="comment"> * IncomingMessage对象由 http.Server或http.ClientRequest创建，</span></span><br><span class="line"><span class="comment"> * 作为第一个参数分别递给 'request' 和 'response' 事件，它可以用来访问响应状态、消息头、以及数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 事件方法属性</span></span><br><span class="line"><span class="comment"> * @event aborted </span></span><br><span class="line"><span class="comment"> * @event close</span></span><br><span class="line"><span class="comment"> * @event end</span></span><br><span class="line"><span class="comment"> * @event data</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method destory([error]) 调用接收到 IncomingMessage的socket上的destroy()方法</span></span><br><span class="line"><span class="comment"> * @method setTimeout(msecs, callback)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @property headers 请求头或响应头的对象 头信息的名称与值的键值对 头信息的名称为小写</span></span><br><span class="line"><span class="comment"> * @property httpVersion 返回客户端发送http的版本 （1.0、1.1）</span></span><br><span class="line"><span class="comment"> * @property method @return [string] 该属性只读，表示请求的方法 server only</span></span><br><span class="line"><span class="comment"> * @property rawHeaders @return [array] 接收到的原始的请求头或响应头列表，键和值在同一个列表中，偶数位的是键，奇数位的是对应的值</span></span><br><span class="line"><span class="comment"> * @property url 返回请求的 URL 字符串,仅包含实际 HTTP 请求中的 URL,参数字符串</span></span><br><span class="line"><span class="comment"> * @property trailers 返回 Trailer 请求头或响应头对象</span></span><br><span class="line"><span class="comment"> * @property statusMessage HTTP响应状态消息 client only</span></span><br><span class="line"><span class="comment"> * @property statusCode HTTP响应状态码 client only</span></span><br><span class="line"><span class="comment"> * @property socket</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>代码示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">serverRequest, serverResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (serverRequest.url !== <span class="string">'/favicon.ico'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> file = fs.createWriteStream(<span class="string">'./res.log'</span>);</span><br><span class="line">        <span class="keyword">let</span> strData = <span class="string">''</span>;</span><br><span class="line">        file.write(<span class="string">`客户端请求方法：<span class="subst">$&#123;serverRequest.method&#125;</span>\r\n`</span>);</span><br><span class="line">        file.write(<span class="string">`客户端请求url的参数字符串：<span class="subst">$&#123;serverRequest.url&#125;</span>\r\n`</span>);</span><br><span class="line">        file.write(<span class="string">`客户端请求头对象：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(serverRequest.headers)&#125;</span>\r\n`</span>);</span><br><span class="line">        file.write(<span class="string">`客户端请求http版本：<span class="subst">$&#123;serverRequest.httpVersion&#125;</span>\r\n`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get请求</span></span><br><span class="line">        <span class="comment">// const urlObj = url.parase(serverRequest.url)</span></span><br><span class="line">        <span class="comment">// const query = urlObj.query</span></span><br><span class="line">        <span class="comment">// const queryObj = querystring.parase(query) </span></span><br><span class="line">        <span class="comment">//  res.end(JSON.stringify(queryObj))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// post请求</span></span><br><span class="line">        serverRequest.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">            strData += data;</span><br><span class="line">        &#125;);</span><br><span class="line">        serverRequest.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> bodyStr;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(strData) !== <span class="string">'string'</span>) &#123;</span><br><span class="line">                objData = querystring.parse(strData);</span><br><span class="line">                file.end(<span class="string">`服务端接收到的表单数据:my name is <span class="subst">$&#123;objData.myname&#125;</span> and my age is <span class="subst">$&#123;objData.myage&#125;</span>\r\n`</span>);</span><br><span class="line">                bodyStr = <span class="string">`服务端接收到的表单数据:my name is <span class="subst">$&#123;objData.myname&#125;</span> and my age is <span class="subst">$&#123;objData.myage&#125;</span>\r\n`</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bodyStr = <span class="string">`服务端接收到的数据:<span class="subst">$&#123;strData&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 响应体 可用路由处理</span></span><br><span class="line">            serverResponse.setTimeout(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            serverResponse.writeHead(<span class="number">200</span>, &#123; <span class="string">'content-type'</span>: <span class="string">'text/html; charset=utf-8'</span>, <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'Trailer'</span>: <span class="string">'content-MD5'</span> &#125;);</span><br><span class="line">            <span class="keyword">if</span> (serverResponse.headersSent) &#123; <span class="built_in">console</span>.log(<span class="string">'响应头已发送'</span>); &#125; <span class="keyword">else</span> &#123; <span class="built_in">console</span>.log(<span class="string">'响应头未发送'</span>); &#125;</span><br><span class="line">            serverResponse.addTrailers(&#123; <span class="string">'content-MD5'</span>: <span class="string">'xxxxxxx'</span> &#125;);</span><br><span class="line">            serverResponse.write(<span class="string">`</span></span><br><span class="line"><span class="string">              &lt;html&gt;</span></span><br><span class="line"><span class="string">              &lt;head&gt;&lt;title&gt;node应用程序&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">              &lt;body&gt;&lt;h1&gt;node webserver start&lt;/h1&gt;&lt;h2&gt;<span class="subst">$&#123;bodyStr&#125;</span>&lt;/h2&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="string">              &lt;html&gt;</span></span><br><span class="line"><span class="string">            `</span>);</span><br><span class="line">            serverResponse.on(<span class="string">'timeout'</span>, () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'响应超时'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            serverResponse.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'end方法未被调用之前，连接被中断'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            serverResponse.end();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`客户端请求数据全部接收完毕`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>, <span class="string">'127.0.0.1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`服务端开始监听 `</span>);</span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123; server.close(); &#125;, 10000)</span></span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'connnection'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端连接已建立'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.setTimeout(<span class="number">60</span> * <span class="number">1000</span>, socket =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`服务器超时，socket对象：<span class="subst">$&#123;socket&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务被关闭'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`发生错误代码：<span class="subst">$&#123;err.code &#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="http-ClientRequest"><a href="#http-ClientRequest" class="headerlink" title="http.ClientRequest"></a>http.ClientRequest</h2><p><strong>向服务端发起请求,可写流</strong>  <code>client</code></p><p><code>http.request(options,[callback])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param options &lt;Object|String|URL&gt; 指定请求的目标地址以及相关配置</span></span><br><span class="line"><span class="comment"> * * * * * options &lt;Object&gt; = &#123; protocol,host,hostname,family,port,localAdrress,socketPath,method,path,headers,auth,agent,timeout,createConnection &#125;</span></span><br><span class="line"><span class="comment"> * @param callback(response) &gt; @param clinetResponse http.IncomingMessage对象,利用该对象读取响应流数据</span></span><br><span class="line"><span class="comment"> * @return 返回ClientRequest类实例,代表一个客户端请求,可写流</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 事件方法属性</span></span><br><span class="line"><span class="comment"> * @event abort 首次调用abort(),请求被客户端中止触发,客户端主动中断</span></span><br><span class="line"><span class="comment"> * @event aborted 请求被服务器中止,且网络socket已被关闭,服务端主动中断</span></span><br><span class="line"><span class="comment"> * @event connect 服务器响应connect请求时触发</span></span><br><span class="line"><span class="comment"> * * * *  callback(req,socket,head)</span></span><br><span class="line"><span class="comment"> * * * *  @param req &lt;http.IncomingMessage&gt;</span></span><br><span class="line"><span class="comment"> * * * *  @param socket &lt;net.socket&gt;</span></span><br><span class="line"><span class="comment"> * * * *  @param head &lt;buffer&gt;</span></span><br><span class="line"><span class="comment"> * @event continue 当收到服务端的响应 100 Continue 时触发</span></span><br><span class="line"><span class="comment"> * @event error 在向目标网站请求数据过程中发生错误</span></span><br><span class="line"><span class="comment"> * @event response 当请求的响应被接收到时触发，只触发一次</span></span><br><span class="line"><span class="comment"> * @event socket 建立连接分配端口时候触发 callback(socket)</span></span><br><span class="line"><span class="comment"> * * * *  @param socket 用于分配的socket端口对象</span></span><br><span class="line"><span class="comment"> * @event upgrade 服务器响应upgrade请求时触发 请求首部里声明 'Connection': 'Upgrade'要求服务端将当前连接升级到新的协议</span></span><br><span class="line"><span class="comment"> * * * *  callback(req,socket,head)</span></span><br><span class="line"><span class="comment"> * * * *  @param req &lt;http.IncomingMessage&gt;</span></span><br><span class="line"><span class="comment"> * * * *  @param socket &lt;net.socket&gt;</span></span><br><span class="line"><span class="comment"> * * * *  @param head &lt;buffer&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method abort() 标记请求中止，剩余相应数据被丢弃且销毁socket</span></span><br><span class="line"><span class="comment"> * @method end([[data],[encoding]],[callback]) 结束本次发送请求</span></span><br><span class="line"><span class="comment"> * @method flushHeaders() 刷新请求头</span></span><br><span class="line"><span class="comment"> * @method setNoDelay([noDelay]) 见socket.setNoDelay() 默认true</span></span><br><span class="line"><span class="comment"> * @method setSocketKeepAlive([enable],[initialDelay]) 见socket.setKeepAlive() 默认flase</span></span><br><span class="line"><span class="comment"> * @method setTimeout(timeout,[callback]) 见socket.setTimeout()</span></span><br><span class="line"><span class="comment"> * @method write(chunk,[encoding],[callback])发送请求主题的一个数据块</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @property aborted 如果请求被终止 打印被中止的时间距1970 00:00:00毫秒数</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>代码示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">8888</span>,</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 发送给服务端的数据</span></span><br><span class="line"><span class="keyword">const</span> postBody = &#123;</span><br><span class="line">  name: <span class="string">'jacky'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> client = http.request(options, (clientResponse) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`状态码:<span class="subst">$&#123;clientResponse.statusCode&#125;</span>\r\n`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`响应头:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(clientResponse.headers)&#125;</span>\r\n`</span>);</span><br><span class="line"></span><br><span class="line">    clientResponse.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    clientResponse.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`客户端接收到的内容:<span class="subst">$&#123;chunk&#125;</span>\r\n`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    clientResponse.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`trailers头信息:<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(clientResponse.trailers)&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`请求发生错误<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'socket'</span>, socket =&gt; &#123;</span><br><span class="line">    socket.setTimeout(<span class="number">10000</span>);</span><br><span class="line">    socket.on(<span class="string">'timeout'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'socket请求超时'</span>);</span><br><span class="line">        client.abort();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">client.setTimeout(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'socket请求超时'</span>);</span><br><span class="line">    client.abort();</span><br><span class="line">&#125;);</span><br><span class="line">client.write(querystring.stringify(postBody));</span><br><span class="line">client.end(); <span class="comment">//每次请求结束必须调用end方法</span></span><br></pre></td></tr></table></figure></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http.Server </tag>
            
            <tag> http.ServerResponse </tag>
            
            <tag> http.IncomingMessage </tag>
            
            <tag> http.ClientRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node笔记整理之fs和path</title>
      <link href="/posts/7b756efa/"/>
      <url>/posts/7b756efa/</url>
      
        <content type="html"><![CDATA[<h2 id="FS模块"><a href="#FS模块" class="headerlink" title="FS模块"></a>FS模块</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><p><code>fs.open(path, flags[, mode], callback)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flags: 文件打开模式，读取为'r'，写入为'w'，追加为'a'</span></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">fs.open(<span class="string">'./readfile.txt'</span>, <span class="string">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生错误: '</span> + err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> buff = Buffer.allocUnsafe(<span class="number">255</span>);</span><br><span class="line">        <span class="comment">// fs.read() @params(文件描述，指定读入的缓存，写入缓存开始位置，写入长度，读取文件开始位置,callback)</span></span><br><span class="line">        <span class="comment">// callback() @params(错误对象，实际长度，被读取缓存的对象)</span></span><br><span class="line">        fs.read(fd, buff, <span class="number">0</span>, <span class="number">28</span>, <span class="number">0</span>, (err, bytesRead, buffer) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> newBuff = buffer.slice(<span class="number">0</span>, bytesRead).toString();</span><br><span class="line">            <span class="built_in">console</span>.log(bytesRead, newBuff);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line">fs.open(<span class="string">'./writefile.txt'</span>, <span class="string">'a'</span>, (err, fd) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生错误: '</span> + err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> buff = Buffer.from(<span class="string">'打开后写入：nodeJs博大精深~\r\n'</span>);</span><br><span class="line">        <span class="comment">// fs.write() @params(文件描述，指定读出的缓存，读取缓存开始位置，读取长度|null默认长度，写入文件开始位置|null上次位置,callback)</span></span><br><span class="line">        <span class="comment">// callback() @params(错误对象，实际长度，被读取缓存的对象)</span></span><br><span class="line">        fs.write(fd, buff, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>, (err, written, buffer) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">'写文件失败'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'写文件成功'</span>, written, buffer);</span><br><span class="line">            fs.fsync(fd, err =&gt; &#123; <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">'fsync错误：'</span> + err) &#125;);</span><br><span class="line">            fs.close(fd, err =&gt; &#123; <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">'close错误：'</span> + err) &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buff = Buffer.from(<span class="string">'nodejs博大精深'</span>);</span><br><span class="line"><span class="keyword">const</span> addStr = Buffer.from(<span class="string">'\r\n这是追加的内容@#$%'</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    flag: <span class="string">'a+'</span>,</span><br><span class="line">    encoding: <span class="string">'utf8'</span>,</span><br><span class="line">    mode: <span class="string">'0666'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readfile.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生错误: '</span> + err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'开始读取内容: '</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./writefile.txt'</span>, addStr, options, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生错误: '</span> + err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'写文件成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="文件流方式读文件"><a href="#文件流方式读文件" class="headerlink" title="文件流方式读文件"></a>文件流方式读文件</h3><p><code>fs.createReadStream(path,[options])</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * fs.createReadStream(path,[options]) 返回ReadStream对象</span></span><br><span class="line"><span class="comment"> * @params path 指定需要读取完整路径以及文件名</span></span><br><span class="line"><span class="comment"> * @params options [flags,encoding,autoclose,start,end]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ReadStream对象</span></span><br><span class="line"><span class="comment"> * @event readable 当可以从流中读取数据时触发</span></span><br><span class="line"><span class="comment"> * @event open 当文件被打开时触发</span></span><br><span class="line"><span class="comment"> * @event data 当读取到新的数据时触发 参数为存放已读取到的数据缓存区对象或者字符串</span></span><br><span class="line"><span class="comment"> * @event end  当读取完所有数据时触发 此时data事件不再被触发</span></span><br><span class="line"><span class="comment"> * @event error 当读取数据过程中出现错误时触发</span></span><br><span class="line"><span class="comment"> * @event close 当用于读取流数据的对象被关闭时触发</span></span><br><span class="line"><span class="comment"> * @method read 用于读取数据</span></span><br><span class="line"><span class="comment"> * @method setEncoding 指定用何种编码读取数据</span></span><br><span class="line"><span class="comment"> * @method pause 通知对象停止data事件触发</span></span><br><span class="line"><span class="comment"> * @method resume 通知对象恢复触发data事件</span></span><br><span class="line"><span class="comment"> * @method pipe 设置数据通道，取出所有流数据传输给通道另一端对象</span></span><br><span class="line"><span class="comment"> * @method unpipe 取消pipe方法设置的通道</span></span><br><span class="line"><span class="comment"> * @method unshift 取消解析器绑定 流数据采用其他方式解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> rfile = fs.createReadStream(<span class="string">'./writefile.txt'</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">end</span>: <span class="number">20</span> &#125;);</span><br><span class="line">rfile.pause();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    rfile.resume();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">rfile.resume();</span><br><span class="line">rfile.on(<span class="string">'open'</span>, fd =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始读取文件'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rfile.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取到数据：'</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line">rfile.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件全部读取完毕'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rfile.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件被关闭'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">rfile.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="文件流方式写文件"><a href="#文件流方式写文件" class="headerlink" title="文件流方式写文件"></a>文件流方式写文件</h3><p><code>fs.createWriteStream(path,[options])</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * fs.createWriteStream(path,[options]) 返回WriteStream对象</span></span><br><span class="line"><span class="comment"> * @params path 指定需要写入的完整路径以及文件名</span></span><br><span class="line"><span class="comment"> * @params options [flags,encoding,start]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * WriteStream对象</span></span><br><span class="line"><span class="comment"> * @event drain 操作系统缓存区中的数据已全部输出到目标对象中，可以继续向前者写入数据</span></span><br><span class="line"><span class="comment"> * @event finish end方法被调用且数据被全部写入操作系统缓存区时候触发</span></span><br><span class="line"><span class="comment"> * @event pipe  读取数据的对象的pipe方法被触发时候</span></span><br><span class="line"><span class="comment"> * @event unpipe 读取数据的对象的unpipe方法被触发时候</span></span><br><span class="line"><span class="comment"> * @event error 当读取数据过程中发生错误</span></span><br><span class="line"><span class="comment"> * @method write(chunk,[encoding],[callback]) 用于写入数据 </span></span><br><span class="line"><span class="comment"> * * * * * @params chunk 要写入的的数据 Buffer或String</span></span><br><span class="line"><span class="comment"> * * * * * @params encoding 指定编码写入</span></span><br><span class="line"><span class="comment"> * * * * * @params callback 写入完毕回调 无参数</span></span><br><span class="line"><span class="comment"> * * * * * @return 表示操作系统缓存是否未满 还可以写入数据</span></span><br><span class="line"><span class="comment"> * @method end 当没有数据再被写入流中调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> writable = fs.createWriteStream(<span class="string">'./writefile.txt'</span>, &#123; <span class="attr">flags</span>: <span class="string">'a'</span>, <span class="attr">encoding</span>: <span class="string">'utf8'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> flag = writable.write(<span class="string">'create node stream txt\r\n'</span>, <span class="string">'utf8'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'write写入成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag); <span class="comment">//true || false</span></span><br></pre></td></tr></table></figure></p><h3 id="图片文件读写"><a href="#图片文件读写" class="headerlink" title="图片文件读写"></a>图片文件读写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'./sample.png'</span>, <span class="string">'base64'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'读文件发生错误: '</span> + err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fs.writeFile(<span class="string">'./copy.jpg'</span>, data.toString(), <span class="string">'base64'</span>, (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'写文件发生错误: '</span> + err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'写文件成功'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建并读取目录"><a href="#创建并读取目录" class="headerlink" title="创建并读取目录"></a>创建并读取目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.mkdir(path,[mode],callback) callback @params(错误对象)</span></span><br><span class="line"><span class="comment"> * fs.readdir(path,callback) callback @params(错误对象, 所有文件名)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.mkdir(<span class="string">'./test/childfile'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readdir(<span class="string">'./'</span>, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(files);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="查看文件目录信息"><a href="#查看文件目录信息" class="headerlink" title="查看文件目录信息"></a>查看文件目录信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.stat(path,callback) &amp; fs.lstat(path,callback) </span></span><br><span class="line"><span class="comment"> * callback @params(错误对象, fs.Stats对象)</span></span><br><span class="line"><span class="comment"> * fs.Stats对象 </span></span><br><span class="line"><span class="comment"> * @methods isFile() 是否是文件</span></span><br><span class="line"><span class="comment"> * @methods isDirectory() 是否是目录</span></span><br><span class="line"><span class="comment"> * @methods isSymbolicLink() 是否是符号链接</span></span><br><span class="line"><span class="comment"> * @property mode 数字形式权限表示</span></span><br><span class="line"><span class="comment"> * @property nlink 硬链接数量</span></span><br><span class="line"><span class="comment"> * @property size 文件大小</span></span><br><span class="line"><span class="comment"> * @property atime 访问时间</span></span><br><span class="line"><span class="comment"> * @property mtime 修改时间</span></span><br><span class="line"><span class="comment"> * @property ctime 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.stat(<span class="string">'./test'</span>, (err, stats) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="built_in">console</span>.log(stats);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="检查文件目录是否存在"><a href="#检查文件目录是否存在" class="headerlink" title="检查文件目录是否存在"></a>检查文件目录是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.exists(<span class="string">'./message'</span>, exists =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(exists);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取文件目录绝对路径"><a href="#获取文件目录绝对路径" class="headerlink" title="获取文件目录绝对路径"></a>获取文件目录绝对路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.realpath(path,[cache],callback)</span></span><br><span class="line"><span class="comment"> * @params path 要查看文件目录的完整路径</span></span><br><span class="line"><span class="comment"> * @params cache 预先指定的路径</span></span><br><span class="line"><span class="comment"> * callback @params err错误对象</span></span><br><span class="line"><span class="comment"> * callback @params resolvePath文件或者目录的绝对路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.realpath(<span class="string">'./test/childfile'</span>, (err, resolvePath) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(resolvePath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="修改文件目录访问修改时间"><a href="#修改文件目录访问修改时间" class="headerlink" title="修改文件目录访问修改时间"></a>修改文件目录访问修改时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.utimes(path,atime,mtime,callback)</span></span><br><span class="line"><span class="comment"> * fs.futimes(fd,atime,mtime,callback)</span></span><br><span class="line"><span class="comment"> * @params atime 指定修改后的访问时间</span></span><br><span class="line"><span class="comment"> * @params mtime 指定修改后的修改时间</span></span><br><span class="line"><span class="comment"> * @params fd 使用open方法打开后返回的文件描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.utimes(<span class="string">'./test/childfile'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">new</span> <span class="built_in">Date</span>(), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改文件时间成功~'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="修改文件目录的访问权限"><a href="#修改文件目录的访问权限" class="headerlink" title="修改文件目录的访问权限"></a>修改文件目录的访问权限</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.chmod(path,mode,callback)</span></span><br><span class="line"><span class="comment"> * fs.chmod(fd,mode,callback)</span></span><br><span class="line"><span class="comment"> * @params mode 数字形式的权限表示法</span></span><br><span class="line"><span class="comment"> * @params fd 使用open方法打开后返回的文件描述</span></span><br><span class="line"><span class="comment"> * callback @params err 错误对象</span></span><br><span class="line"><span class="comment"> * 0+ r=4 w=2 x=1 </span></span><br><span class="line"><span class="comment"> * user group other</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.chmod(<span class="string">'./test'</span>, <span class="number">0740</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件权限修改成功!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="移动文件、目录"><a href="#移动文件、目录" class="headerlink" title="移动文件、目录"></a>移动文件、目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.rename(oldpath,newpath,callback)</span></span><br><span class="line"><span class="comment"> * callback @params err 错误对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.rename(<span class="string">'./readfile.txt'</span>, <span class="string">'./test/childfile/newfile.txt'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'移动失败'</span> + err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'移动文件成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="截断文件、修改文件大小"><a href="#截断文件、修改文件大小" class="headerlink" title="截断文件、修改文件大小"></a>截断文件、修改文件大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.truncate(filename,len,callback)</span></span><br><span class="line"><span class="comment"> * fs.truncate(fd,len,callback)</span></span><br><span class="line"><span class="comment"> * @params filename 被截断的完整路径文件名</span></span><br><span class="line"><span class="comment"> * @params len 截断后的文件尺寸（字节）</span></span><br><span class="line"><span class="comment"> * @params fd open方法打开返回的文件描述</span></span><br><span class="line"><span class="comment"> * callback @params err 错误对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.truncate(<span class="string">'./truncate.txt'</span>, <span class="number">30</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    fs.stat(<span class="string">'./truncate.txt'</span>, (err, stats) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(stats.size);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除空目录"><a href="#删除空目录" class="headerlink" title="删除空目录"></a>删除空目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  fs.rmdir(path,callback)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.rmdir(<span class="string">'./rmdir'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除目录成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="监视文件、目录-取消监视"><a href="#监视文件、目录-取消监视" class="headerlink" title="监视文件、目录 取消监视"></a>监视文件、目录 取消监视</h3><p>监视 <code>fs.watchFile(filename,[options],listener)</code><br>监视 <code>fs.watch(filename,[options],callback)</code><br>取消监视 <code>fs.unwatchFile(filename,[listener])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.watchFile(filename,[options],listener)</span></span><br><span class="line"><span class="comment"> * fs.unwatchFile(filename,[listener])</span></span><br><span class="line"><span class="comment"> * @params filename 监听文件的完整目录文件名</span></span><br><span class="line"><span class="comment"> * @params listener 监听的文件发生改变执行的回调，同一文件可监听多个回调</span></span><br><span class="line"><span class="comment"> * @params [listener] 取消监听的文件执行的某一回调</span></span><br><span class="line"><span class="comment"> * options [Object] @property persistent 表明当文件正在被监视时，进程是否应该继续运行</span></span><br><span class="line"><span class="comment"> * options [Object] @property interval 表示目标应该每隔多少毫秒被轮询</span></span><br><span class="line"><span class="comment"> * listener @params curr 修改后的文件fs.Stats对象</span></span><br><span class="line"><span class="comment"> * listener @params prev 修改前的文件fs.Stats对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.watchFile(<span class="string">'./readfile.txt'</span>, (curr, prev) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Date</span>.parse(prev.ctime) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件被创建~'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Date</span>.parse(curr.ctime) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件被删除~'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Date</span>.parse(curr.mtime) !== <span class="built_in">Date</span>.parse(prev.mtime)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件被修改'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听另一方法</span></span><br><span class="line"><span class="comment">// fs.watch(filename,[options],callback)</span></span><br><span class="line"><span class="comment">// callback(event,filename)</span></span><br><span class="line"><span class="comment">// @params event = 'rename' 移动删除重命名 || 'change'内容改动</span></span><br><span class="line"><span class="comment">// @params filename 指定目录中发生改动的文件完整路径以及文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> watcher = fs.watch(<span class="string">'./test/'</span>, (event, filename) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event, filename);</span><br><span class="line">&#125;);</span><br><span class="line">watcher.close(); <span class="comment">//停止监听</span></span><br></pre></td></tr></table></figure><h3 id="创建删除文件-硬链接-不同文件名指向同一文件"><a href="#创建删除文件-硬链接-不同文件名指向同一文件" class="headerlink" title="创建删除文件[硬链接] 不同文件名指向同一文件"></a>创建删除文件[硬链接] 不同文件名指向同一文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.link(srcpath,distpath,callback)</span></span><br><span class="line"><span class="comment"> * fs.unlink(path,callback)</span></span><br><span class="line"><span class="comment"> * @params srcpath 创建硬链接源</span></span><br><span class="line"><span class="comment"> * @params distpath 创建硬链接目标</span></span><br><span class="line"><span class="comment"> * callback @params err 错误对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.link(<span class="string">'./writefile.txt'</span>, <span class="string">'./test/childfile/link2.txt'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建硬链接成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fs.unlink(<span class="string">'./symlink'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除硬链接成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建查看-符号链接-创建替身-打开符号链接自动指向源"><a href="#创建查看-符号链接-创建替身-打开符号链接自动指向源" class="headerlink" title="创建查看[符号链接] 创建替身 打开符号链接自动指向源"></a>创建查看[符号链接] 创建替身 打开符号链接自动指向源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.symlink(srcpath,distpath,[type],callback)</span></span><br><span class="line"><span class="comment"> * @params type 默认file [,dir]创建类型</span></span><br><span class="line"><span class="comment"> * @params srcpath 创建符号链接源</span></span><br><span class="line"><span class="comment"> * @params distpath 创建符号链接源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.symlink(<span class="string">'./test'</span>, <span class="string">'./symlink'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建符号链接成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="读取符号链接中包含另一个文件的目录、文件名"><a href="#读取符号链接中包含另一个文件的目录、文件名" class="headerlink" title="读取符号链接中包含另一个文件的目录、文件名"></a>读取符号链接中包含另一个文件的目录、文件名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * fs.readlink(path, callback)</span></span><br><span class="line"><span class="comment"> * @params path 符号链接路径以及文件名</span></span><br><span class="line"><span class="comment"> * callback @params err 错误对象</span></span><br><span class="line"><span class="comment"> * callback @params linkString [String] 另一个文件的目录、文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fs.symlink(<span class="string">'./srclink.txt'</span>, <span class="string">'./symlink.txt'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建符号链接symlink.txt成功'</span>);</span><br><span class="line">    fs.readlink(<span class="string">'./symlink.txt'</span>, (err, linkString) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(linkString);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * const path = require('path')</span></span><br><span class="line"><span class="comment"> * @property path.delimiter 提供平台特定的路径分隔符 win;posix:</span></span><br><span class="line"><span class="comment"> * @property path.posix</span></span><br><span class="line"><span class="comment"> * @property path.sep</span></span><br><span class="line"><span class="comment"> * @property path.win32</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method   path.isabsolute(path) 判定 path 是否为一个绝对路径</span></span><br><span class="line"><span class="comment"> * @method   path.basename(path,[ext]) 返回path的最后一部分，ext为后缀</span></span><br><span class="line"><span class="comment"> * @method   path.dirname(path) 返回path的目录名</span></span><br><span class="line"><span class="comment"> * @method   path.extname(path) 返回path的拓展名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method   path.format(pathObject) 从对象返回路径字符串</span></span><br><span class="line"><span class="comment"> * @method   path.parse(path) 根据path返回pathObject对象</span></span><br><span class="line"><span class="comment"> * * * * *   pathObject = &#123;dir,root,base,name,ext&#125;</span></span><br><span class="line"><span class="comment"> * * * * *   优先级 dir &gt; root base &gt; name &amp; ext</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @method   path.normalize(path) 规范化path 解析'..''.',路径分隔符去重</span></span><br><span class="line"><span class="comment"> * @method   path.join([...path]) 使用平台特定的分隔符把全部给定的 path片段连接到一起，并规范化生成的路径</span></span><br><span class="line"><span class="comment"> * @method   path.relative(fromPath,toPath) 返回从fromPath到toPath的相对路径</span></span><br><span class="line"><span class="comment"> * @method   path.resolve([...path]) 全部给定的path解析为一个绝对路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /foo/bar/baz/asdf</span></span><br><span class="line"><span class="keyword">let</span> path_normalize = path.normalize(<span class="string">'/foo/bar//baz/asdf/quux/..'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /foo/bar/baz/asdf</span></span><br><span class="line"><span class="keyword">let</span> path_join = path.join(<span class="string">'/foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz/asdf'</span>, <span class="string">'quux'</span>, <span class="string">'..'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /bar/img/imgage.png</span></span><br><span class="line"><span class="keyword">let</span> path_resolve = path.resolve(<span class="string">'/foo'</span>, <span class="string">'bar'</span>, <span class="string">'/bar/img'</span>, <span class="string">'../img/imgage.png'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ../../impl/bbb</span></span><br><span class="line"><span class="keyword">let</span> path_relative = path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /data/orandea/test/aaa</span></span><br><span class="line"><span class="keyword">let</span> path_dirname = path.dirname(<span class="string">'/data/orandea/test/aaa/img.gif'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  img.gif</span></span><br><span class="line"><span class="keyword">let</span> path_basename = path.basename(<span class="string">'/data/orandea/test/aaa/img.gif'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  .gif</span></span><br><span class="line"><span class="keyword">let</span> path_extname = path.extname(<span class="string">'/data/orandea/test/aaa/img.gif'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; </span></span><br><span class="line"><span class="comment">//  root: '/',</span></span><br><span class="line"><span class="comment">//  dir: '/data/orandea/test/aaa',</span></span><br><span class="line"><span class="comment">//  base: 'img.gif',</span></span><br><span class="line"><span class="comment">//  ext: '.gif',</span></span><br><span class="line"><span class="comment">//  name: 'img' </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> path_parse = path.parse(<span class="string">'/data/orandea/test/aaa/img.gif'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /data/orandea/test/aaa/img.gif</span></span><br><span class="line"><span class="keyword">let</span> path_format = path.format(&#123;</span><br><span class="line">    root: <span class="string">'/'</span>,</span><br><span class="line">    dir: <span class="string">'/data/orandea/test/aaa'</span>,</span><br><span class="line">    base: <span class="string">'img.gif'</span>,</span><br><span class="line">    ext: <span class="string">'.gif'</span>,</span><br><span class="line">    name: <span class="string">'img'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fs </tag>
            
            <tag> path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的this指向实践问题记录</title>
      <link href="/posts/64d676f8/"/>
      <url>/posts/64d676f8/</url>
      
        <content type="html"><![CDATA[<h4 id="遇到的this问题的翻车事故"><a href="#遇到的this问题的翻车事故" class="headerlink" title="遇到的this问题的翻车事故"></a>遇到的this问题的翻车事故</h4><p><code>this</code>对于当时刚接触js的人来说幽灵一般的存在，就是老司机也不免有大意翻车的时候，印象中很多前端面试的基础部分考察<code>prototype</code>和<code>this</code>是必不可少的。<br>前几天改一个bug改出<code>this</code>的问题，大意翻车，虽然很快就解决了，但还是警醒下自己，温习梳理以免再出错。<br>问题类似下面的代码块，对象外提取公共模块导入，对象内部方法和属性通过对象传参<code>params</code>的方式进入<code>setTime</code>方法执行业务逻辑。<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    params.keyFn2();</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obja=&#123;</span><br><span class="line">  valname: <span class="string">'xzhang'</span>,</span><br><span class="line">  fn1()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valname + <span class="string">' did fn1'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn2()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fn1()+<span class="string">' and did fn2'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn3()&#123;</span><br><span class="line">    setTime(&#123;</span><br><span class="line">        keyFn2: <span class="keyword">this</span>.fn2</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obja.fn3();</span><br></pre></td></tr></table></figure><br>但是执行后报错，<code>fn2</code>方法是执行过后，但是里面却找不到<code>fn1</code>这个方法，看到这个bug一脸懵逼。<br>老司机也会翻车好像说的就是我，当时就想当然的的认为(以下是错误思考过程)<code>fn2</code>通过<code>this.fn2</code>传参进入，<code>this</code>也会传进去，所以<code>this.fn1</code>的<code>this</code>理所应当的指向<code>obja</code>,所有的方法都会找到自己的对象宿主去执行（错误思考过程结束），还是因为懒，思想都不愿意往前多想一步。<br>遇到问题总是要解决的。<br>先思考后动手是我的习惯，这里报错很显然是<code>this</code>指向出现了问题，找到这个问题根源，也就不难发现根源在哪里、怎么去解决了。<br>so…<br>万年不变的<code>console</code>调式大法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'fn3-fn4'</span>);</span><br><span class="line">    params.keyFn2();</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obja=&#123;</span><br><span class="line">  valname: <span class="string">'xzhang'</span>,</span><br><span class="line">  fn1()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn1'</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valname + <span class="string">' did fn1'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2'</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fn1()+<span class="string">' and did fn2'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn3()&#123;</span><br><span class="line">    setTime(&#123;</span><br><span class="line">        keyFn2: <span class="keyword">this</span>.fn2</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obja.fn3();</span><br></pre></td></tr></table></figure><br>结果如下：<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-a.jpg" width="100%"><br>果不其然<code>fn2</code>中的<code>this</code>指向出现了问题，所以找不到<code>fn1</code>方法很正常。错误的<code>this</code>指向了一个对象，既不是<code>windows</code>也不是<code>obja</code>，而是<code>{keyFn2: f}</code>，看着好眼熟，嗯？这个对象不就是我们<code>setTime</code>传进去的对象参数<code>params</code>么?<br>再看看<code>fn4</code>里的调用方法<code>params.keyFn2()</code>,所以一切都很明了了：<code>setTime</code>里的<code>keyFn2</code>方法能够通过<code>this.fn2</code>传参进去，方法能够得到执行，但是<code>fn2</code>方法里面还有<code>this</code>，这个<code>this</code>的指向就有问题了，它指向的是调用这个方法的<code>params</code>也就是<code>{keyFn2: f}</code>，这个对象里根本没有<code>fn1</code>方法！<br>进一步<code>fn1</code>就算得到执行，方法里面的依然有<code>this</code>的问题，所以也得进行手动指向。<br><mark>如果想得到正确的结果必须明确<code>this</code>的指向。</mark><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params.keyFn2(params.self));</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obja=&#123;</span><br><span class="line">  valname: <span class="string">'xzhang'</span>,</span><br><span class="line">  fn1(s)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = s? s : <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> self.valname + <span class="string">' did fn1'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn2(s)&#123;</span><br><span class="line">    <span class="keyword">const</span> self = s? s : <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> self.fn1(s)+<span class="string">' and did fn2'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn3()&#123;</span><br><span class="line">    setTime(&#123;</span><br><span class="line">        keyFn2: <span class="keyword">this</span>.fn2,</span><br><span class="line">        self: <span class="keyword">this</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obja.fn3();</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-c.jpg" width="100%"><br>大功告成，到这里bug就算修复完毕了，但是思考一个问题，我们工作就是为了码代码，修复bug的么？ <mark>这个是不是最佳的处理方式呢？</mark></p><p>上面的代码没有提取公共模块之前是下面这么写的，一点问题都没有，<code>this</code>指向正常，除了通过<code>_this</code>纠正了<code>es5</code>的指向，其他并不需要操心。<br>但是需要使用额外的外界方法，并且方法中涉及<code>this</code>指向的问题就需要小心了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objb=&#123;</span><br><span class="line">  valname: <span class="string">'xzhang'</span>,</span><br><span class="line">  fn1()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn1'</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valname + <span class="string">' did fn1'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2'</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fn1()+<span class="string">' and did fn2'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  fn3()&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"fn3"</span>, <span class="keyword">this</span>, _this);</span><br><span class="line">      <span class="built_in">console</span>.log(_this.fn2());</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">objb.fn3();</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-b.jpg" width="100%"></p><h4 id="this指向总结"><a href="#this指向总结" class="headerlink" title="this指向总结"></a>this指向总结</h4><p>老司机就不用往下看了，自己写出来也算是一种加深印象，就像小学时候写错一个字拿两杆笔写罚抄一百遍一样，为了不再犯错。<br>*注：以下都为Browser环境</p><h5 id="普通function里的this"><a href="#普通function里的this" class="headerlink" title="普通function里的this"></a>普通function里的this</h5><p>此时<code>this</code>指向全局<code>windows</code>,凡是挂载到windows上的变量方法此时都可以通过<code>this</code>调用。箭头函数也是如此。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> glb = <span class="string">'windows'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>,<span class="keyword">this</span>.glb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arrowTestThis = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>,<span class="keyword">this</span>.glb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-d.jpg" width="100%"><br>不管函数嵌套多少层，this返回的都是<code>windows</code><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-e.jpg" width="100%"></p><h5 id="new调用function里的this"><a href="#new调用function里的this" class="headerlink" title="new调用function里的this"></a>new调用function里的this</h5><p>此时的<code>this</code>指向new出来的实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newfun</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">new</span>.target == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'constructor must be called with new'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'newfun里的this指向：'</span>,<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = params.name;</span><br><span class="line">  <span class="keyword">this</span>.takebus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' takes bus'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> newfun(&#123;<span class="attr">name</span>:<span class="string">'xzhang'</span>&#125;);</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-f.jpg" width="100%"><br>可以看到打印出来的<code>this</code>指向了new出来的实例，这里的<code>this</code>就暂时可以想象成<code>newObj</code>。</p><h5 id="prototype里的this"><a href="#prototype里的this" class="headerlink" title="prototype里的this"></a>prototype里的this</h5><p>Constructor的prototype属性上挂载的属性和方法都可以被实例所<em>共享继承</em>使用，避免了每次生成实例都需要累计占用内存的情况。<br>Constructor里的<code>this</code>和prototype的挂载方法里的<code>this</code>在Constructor实例化后都将指向当前的实例对象，所以挂载在Constructor里的<code>this</code>上的方法属性以及挂载在prototype上的属性和方法，在Constructor里和prototype上挂载的方法里都是可以通过<code>this</code>调用（实例都可以访问的到）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Construc</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Construc.prototype.age = <span class="string">'秘密'</span>;</span><br><span class="line">Construc.prototype.introduction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'prototype里的this:'</span>,<span class="keyword">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'prototype:'</span>, Construc.prototype);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' age is '</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-j.jpg" width="100%"><br>在prototype里打印当前的<code>this</code>以及<code>Construc.prototype</code>。<br>prototype1里的<code>this</code>指向实例，例如<code>construc</code>。<br><code>Construc.prototype</code>为当前的prototype对象，里面包含constructor<code>Construc</code>。</p><p>上面的代码块可以理解为下面的这种，只是帮助理解。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Construc</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="string">'秘密'</span>;</span><br><span class="line">  <span class="keyword">this</span>.introduction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' age is '</span> + <span class="keyword">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>prototype上的属性方法完全被’代理’到了当前它的Constructor上，它的所有属性和方法都是Constructor的属性和方法，<code>Construc</code>里的this指向实例，<code>Construc.prototype</code>里的<code>this</code>自然也指向实例。</p><h5 id="Object里的this"><a href="#Object里的this" class="headerlink" title="Object里的this"></a>Object里的this</h5><p>这里的<code>Object</code>指的是字面量的，此时对象字面量里的<code>this</code>指向<code>windows</code>（对象属性中调用<code>this</code>）或者此<code>object</code>（对象方法函数中调用<code>this</code>）本身。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testOBJ =&#123;</span><br><span class="line">  name:<span class="string">'xzhang'</span>,</span><br><span class="line">  age:<span class="number">20</span>,</span><br><span class="line">  testThis: <span class="keyword">this</span>,</span><br><span class="line">  dosome:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-h.jpg" width="100%"></p><h5 id="event里的this"><a href="#event里的this" class="headerlink" title="event里的this"></a>event里的this</h5><p>此时的<code>this</code>指向事件绑定的dom节点，但是可以通过<code>bind</code>改变<code>this</code>指向。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Objecthis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> _dom = <span class="built_in">document</span>.getElementById(<span class="string">'Objecthis'</span>);</span></span><br><span class="line"><span class="actionscript">_dom.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &lt;div id="Objecthis"&gt;...&lt;/div&gt;</span></span></span><br><span class="line"><span class="undefined">&#125;); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="html里的this"><a href="#html里的this" class="headerlink" title="html里的this"></a>html里的this</h5><p>此时<code>this</code>指向<code>dom</code>本身<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">"html里的this"</span> <span class="attr">onclick</span>=<span class="string">"console.log(this,typeof this)"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#html里的this"</span> <span class="attr">class</span>=<span class="string">"headerlink"</span> <span class="attr">title</span>=<span class="string">"html里的this"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>html里的this<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><br>我们在html里添加一个点击事件，并在点击事件中打印出<code>this</code>，此时我么可以看到console打印台里出现的是这个dom本身，注意这里this打印出来的不是字符串，而是一个dom对象。<br><img src="https://aszero.oss-cn-shanghai.aliyuncs.com/aszero/this-g.jpg" width="100%"></p><p>如果把这点击事件提取出来封装成一个方法，点击事件时候调用这个方法，那么此时的this指向的是…<code>windows</code>,因为很显然上面提到了普通调用function的时候this都会指向全局<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">"html里的this"</span> <span class="attr">onclick</span>=<span class="string">"dosomething();"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#html里的this"</span> <span class="attr">class</span>=<span class="string">"headerlink"</span> <span class="attr">title</span>=<span class="string">"html里的this"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>html里的this<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>);&#125; <span class="comment">//Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac转windows入职舒适体验手册</title>
      <link href="/posts/a055a843/"/>
      <url>/posts/a055a843/</url>
      
        <content type="html"><![CDATA[<p>“这辈子不可能windows的，不可能用windows的，体验太差了”，这是我用三年的mac之后感受到的，appple对于软硬件结合使用的用户体验真的是做到了极致，几近完美的retina和字体体验，三年几乎没有关过机的情况下没有任何卡顿。我从A出来之后到了J，这边强制性的配置了台式机windows7系统，当时我是拒绝的，个人电脑也没有很好的办法加到公司的网络，当时真的是硬着头皮从mac转windows的，果然一开机，这个开机速度，渣渣的屏幕和windows的默认字体，没有了习惯的Spotlight，加上J公司相对较差较慢的网络环境，强大到github,各种云，各种音乐视频网站都上不去的网络限制，真是感觉自己会因为一台设备和开发环境离职的感觉。但是，我要说但是，自己不可能这么幼稚的，一个人强大的表现是跳出自己舒适圈，去适应和挑战一些东西。随手查了资料，发现自己可以打造一个相对于舒适的设备环境体验,不用mac又如何？<br>so…<br><a id="more"></a></p><h4 id="一个机械键盘"><a href="#一个机械键盘" class="headerlink" title="一个机械键盘"></a>一个机械键盘</h4><p>原来用mac本的时候就用mac自带的键盘，没觉得有哪里不对。现在用完机械键盘之后发现非机械键盘还叫键盘？就像用完retina之后就再也回不去了，显示器非4k以上还能入手？第一件让自己舒适的事情就是入手一个机械键盘去减少无法更换屏幕带来的暴击，品牌自选。</p><h4 id="一个舒适的椅子"><a href="#一个舒适的椅子" class="headerlink" title="一个舒适的椅子"></a>一个舒适的椅子</h4><p>凡是加上人工学这几个字的椅子可真贵，但是人类进化到现在没有进化久坐的基因和身体构造，你的腰你的背你的颈椎你的臀部都会因为久坐变得各种不舒服，写到这我先活动的颈椎去了。一把舒适的座椅可以善待你的身体，品牌自选，最好带有可以调节的腰枕和头枕，午休可以后仰120。最好可以配一个升降台，每天交叉站立办公一会，这才是王道。</p><h4 id="双屏或者三屏开发"><a href="#双屏或者三屏开发" class="headerlink" title="双屏或者三屏开发"></a>双屏或者三屏开发</h4><p>这个都懂得，无需解释。</p><p><strong>以上只能让你舒适的做一个文员，喝着咖啡，坐在舒适的座椅上享受的敲敲文字。</strong></p><p><mark>以下针对开发同学，比如我。</mark></p><h4 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a><a href="http://www.listary.com/" target="_blank" rel="noopener">Listary</a></h4><p>这个类似于mac的Spotlight，双击ctrl，即可以查询app，documents,files等anything in your system,相应速度非常快，windows上替代Spotlight没有问题。我的习惯是删光桌面所有的快捷键，只留一个垃圾桶，换一张喜欢的壁纸，开机打开软件查找文件就靠listary,这感觉倍爽。listary也有pro版，多加主题定制，关键词定制搜索等，我觉得怀着感恩的心free版够用了。</p><h4 id="Pingfang-Monaco-Menlo-Source-code-pro"><a href="#Pingfang-Monaco-Menlo-Source-code-pro" class="headerlink" title="Pingfang, Monaco, Menlo, Source code pro"></a><a href="http://www.qiuziti.com/" target="_blank" rel="noopener">Pingfang, Monaco, Menlo, Source code pro</a></h4><p>以上的字体可以在点击在链接网站（求字体网，这个网站还蛮不错的哦）中找到，自行下载安装。windows安装字体在<code>控制面板</code>，<code>小图标化</code>的<code>最后一个字体项目</code>中。windows接受<code>ttf格式</code>的字体，下载完成后直接把ttf格式拖进到字体库中即可。从此再也不用忍受windows默认的体验不好的字体，有的app可能需要自己设置字体，系统有的字体都可以设置。自己喜欢什么字体也可以定向安装，个人比较推荐编程、阅读用以上的字体。</p><h4 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a><a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a></h4><p>mac上用惯了<code>iterm2</code> , <code>fish shell</code>,<code>oh my zsh</code> 你还能忍受window cmd？ 转windows不爽的地方就是cmd体验极其的差，从此不能愉快的用linux命令了。后来返现一个shell蛮好用，感觉<code>cmder</code>还是比不上mac上前面几个shell, cmder内也有<code>powershell</code>，可以启动时候自行切换，但是我觉得ps还没有cmder默认启动的好用。<br>cmder用到现在返现两个缺点：</p><ol><li>反应速度过慢，运行一个简单命令，通常需要1~2秒才能运行完成，复杂的就更慢了，比如简单的<code>cd</code>命令都需要卡一下，不知道是不是硬件配置、windows系统或者shell本身的问题。</li><li><code>git</code> 没有现有分支<code>status</code>的状态提示，每次还需要<code>git status</code> 一次，还好cmder可以显示现在分支，不需要<code>git branch</code>。<br>其他的地方没有什么可以诟病的，还可以在<code>设置</code>里设置主题样式，不仅可以使用windows命令，还可以使用linux命令（这个太棒了），完全是一个windows上优秀的仿生cmd shell。<br>官网上建议下载full版本的，带有git和其他的linux命令。<br><strong>cmder快捷键</strong><br><code>双Tab</code>  用于补全<br><code>Ctrl+T</code>  建立新页<br><code>Ctrl+W</code>  关闭标签页<br><code>Ctrl+Tab</code>  切换标签页<br><code>Alt+F4</code>  关闭所有标签页<br><code>Ctrl+1</code>  切换到第一个页签，Ctrl+2同理<br><code>Alt + enter</code>  切换到全屏状态<br><strong>修改 λ 提示符为 $</strong><br>默认cmder是<code>λ</code>提示符，想要无痛转移成可爱的<code>$</code>,也是有办法的<br>修改安装包目录 vendor 下的 clink.lua 文件<br>搜索<code>lambda</code>,<code>λ</code>改成<code>$</code>保存重启就可以了。</li></ol><h4 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></h4><p>另一个命令行强化工具，<code>homebrew</code>软件包管理工具，一行命令就可以完全<code>install</code>、<code>search</code>、<code>drop</code>、<code>upgrade</code>你的app,解放双手利器。但是，windows上并不支持<code>homebrew</code>，悲伤。<br>好东西所有平台都会存在，<code>Chocolatey</code>就是类似的工具，可以安装<code>node</code>,<code>git</code>,<code>python</code>,<code>ruby</code>,<code>jdk</code>,<code>chrome</code>,<code>sublime</code>等等。<br><strong>安装(管理员权限)</strong><br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@"%SystemRoot%\System32\WindowsPowerShell\v1<span class="number">.0</span>\powershell.exe<span class="string">" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "</span>iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))<span class="string">" &amp;&amp; SET "</span>PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin<span class="string">"</span></span><br></pre></td></tr></table></figure></p><p><strong>更新</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco<span class="built_in"> upgrade </span>chocolatey</span><br></pre></td></tr></table></figure></p><p><strong>常用命令</strong><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">choco install softwareName  <span class="comment">//安装</span></span><br><span class="line">choco search softwareName --id-starts-<span class="keyword">with</span> <span class="comment">//查找列表</span></span><br><span class="line">choco upgrade softwareName <span class="comment">//更新</span></span><br><span class="line">choco uninstall softwareName <span class="comment">//卸载</span></span><br><span class="line">choco info softwareName <span class="comment">//软件信息</span></span><br></pre></td></tr></table></figure></p><h4 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Vscode</a></h4><p>这个不解释，本来就是微软的东西,widnows肯定必须存在，各种平台兼容，代码编辑利器，启动快，插件多，主题多，自带版本控制。<br>直接点击标题官网下载，快速有效。<br>本来用<code>sublime text</code>系列后来用了<code>vscode</code>以后就转了。</p><h4 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a><a href="https://portal.shadowsocks.la/clientarea.php" target="_blank" rel="noopener">Shadowsocks</a></h4><p>国内网络的限制，想看一看外面的世界还是尽早网络翻墙，尤其是做技术这一块的，靠百度几乎很难能找到你想要的答案。<br><code>Shadowsocks</code>网络还是蛮稳定的，十几刀一年还是让我们这些吃瓜群众能够接受的。</p><h4 id="其他神器"><a href="#其他神器" class="headerlink" title="其他神器"></a>其他神器</h4><p><strong><a href="http://www.nakka.com/soft/clcl/index_eng.html" target="_blank" rel="noopener">CLCL</a> </strong><br>原来mac上用的是<code>clipmenu</code>，windows上用的就是<code>CLCL</code>，剪切板工具。能够让你轻松的粘贴几十个剪切板的历史记录，省去了来回的复制的麻烦。此外还有template功能，自定义粘贴项目。</p><p><strong><a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">Beyondcompare</a> </strong><br>对比文件可视化工具神器，尤其在作为git mergetool来用，解决冲突、修改查看历史版本记录很方便。<br>把bc配置git的<code>mergetool</code>其实也很简单，打开git的<code>.gitconfig</code>，windows上的此文件一般位于<code>C:\Users\usrname</code>下面，<br>修改里面的<code>mergetool</code>字段内容如下(如果你也是bc4的话，<code>user</code>字段不用管):<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">truename = xzhang</span><br><span class="line">trueemail = xzhang@xx.com</span><br><span class="line">[merge]</span><br><span class="line">   <span class="built_in"> tool </span>= bc4</span><br><span class="line">[mergetool <span class="string">"bc4"</span>]</span><br><span class="line">    cmd = <span class="string">"\"c:/app/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\" \"<span class="variable">$BASE</span>\" \"<span class="variable">$MERGED</span>\""</span></span><br><span class="line">[diff]</span><br><span class="line">   <span class="built_in"> tool </span>= bc4</span><br><span class="line">[difftool <span class="string">"bc4"</span>]</span><br><span class="line">    cmd = <span class="string">"\"c:/app/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\""</span></span><br></pre></td></tr></table></figure></p><p><strong><a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">Fiddler</a> </strong><br>mac上一般都会用<code>charles</code>小茶壶或者<code>whistle</code>做http或者https相关的网络请求代理工作,可以进行拦截分析请求、包装请求、本地调试和代理本地或线上资源开发调试等。而windows上用的工具就是Fiddler，差不多能出色满足同样的工作。<br>如何使用基本功能官网和其他博客很多介绍，我还没详细深入研究更为强大的功能，基本使用的已经满足日常，所以这里就不是重点。</p><p><strong><a href="https://stefansundin.github.io/altdrag/" target="_blank" rel="noopener">AltDrag</a> </strong><br>这个针对多屏比较好用，鼠标的focus会随着鼠标的位置移动，也就是可以在鼠标的位置滚动滑轮，这个mac记得好像也有，windows上增加这个感觉很赞，另外windows上只能拖拽顶部或者底部，并不能拖拽窗口的body去移动位置，<code>AltDrag</code>通过按住<code>alt</code>键就可以实现轻松拖拽。</p><p>如果发现其他更好的windows软件推荐，欢迎补充。</p><blockquote><p>原创内容，欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据唯一标识进行UI定制化</title>
      <link href="/posts/4d3fd604/"/>
      <url>/posts/4d3fd604/</url>
      
        <content type="html"><![CDATA[<h4 id="UI可定制的地方："><a href="#UI可定制的地方：" class="headerlink" title="UI可定制的地方："></a>UI可定制的地方：</h4><ul><li>字体</li><li>图片图标背景</li><li>文案</li><li>位置</li><li>数量</li><li>外观（形状背景）</li><li>请求地址（通过标识的更改）<a id="more"></a></li></ul><h4 id="一个简单的栗子"><a href="#一个简单的栗子" class="headerlink" title="一个简单的栗子"></a>一个简单的栗子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;<span class="attribute">position</span>: relative;<span class="attribute">background</span>: <span class="number">#eee</span>;<span class="attribute">width</span>: <span class="number">500px</span>;<span class="attribute">height</span>: <span class="number">500px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.text</span>&#123;</span></span><br><span class="line"><span class="undefined">      font-size: 14px;</span></span><br><span class="line"><span class="undefined">      color: black;</span></span><br><span class="line"><span class="undefined">      font-family: 'pingFang-HK';</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.img</span>&#123;</span></span><br><span class="line"><span class="undefined">      width: 200px;</span></span><br><span class="line"><span class="undefined">      height: 200px;</span></span><br><span class="line"><span class="undefined">      background:url(/static/old.png) no-repeat;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.bg</span><span class="selector-class">.shape</span>&#123;</span></span><br><span class="line"><span class="undefined">      background: black;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">      width: 300px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.postions</span>&#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 50px;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      left: 0px;</span></span><br><span class="line"><span class="undefined">      bottom: 0px;</span></span><br><span class="line"><span class="undefined">      z-index: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>we are defalut black,but now..<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg shape"</span>&gt;</span>change bg color width height...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"postions"</span>&gt;</span>We were in the bottom，but now..<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面就是一个简单的静态页面，只要通过最简单的样式覆盖方式就可以实现样式的简单变更</p><h4 id="覆盖样式"><a href="#覆盖样式" class="headerlink" title="覆盖样式"></a>覆盖样式</h4><p><mark>注意后面的样式覆盖前面的样式是在相同权重的情况下，不同权重之间覆盖容易出现问题。</mark><br>例如<code>#idA .classA p</code>这个的权重是<code>100+10+1</code>，后面的覆盖样式的写法也要达到这样的权重。如果写成<code>p</code>这样是覆盖不了的，虽然样式后置了但是权重低。无条件使用<code>!important</code>（权重高于内联）和内联样式（权重1000）<code>style=&quot;&quot;</code>的权重最高，无论如何后置和增加权重值都达不到效果覆盖的效果的，注意谨慎使用。<br><strong>如果要覆盖前面的样式，需要做的就是把需要做调整的样式的选择器组拷到下面做样式重写</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'pingFang-HK'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.img</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(/static/new.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.bg</span><span class="selector-class">.shape</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-class">.postions</span>&#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了这样就似乎完成了一个简单的小需求，修改了文字颜色，背景颜色，大小，位置。</p><h4 id="进一步修改现有UI"><a href="#进一步修改现有UI" class="headerlink" title="进一步修改现有UI"></a>进一步修改现有UI</h4><p>如果是<code>修改文案</code>呢？在定制化中我不想要某个元素了，该如何修改<code>元素的数量</code>呢？随着定制化的深入用户点击某个按钮的<code>请求地址</code>的也要发生变化，这些好像不能用通过样式的覆盖去达到需求了。<br>解决这个问题其实很简单【莫装X:)，白了少年头】</p><ul><li>如果你的页面是在服务端做渲染然后呈现给用户的，那么就用服务端的模板引擎在服务端解决这件事，比如java的模板引擎freemaker， node可以用Nunjucks。</li><li>如果你是在我们客服端去做渲染页面的，你可以使用doTjs。</li><li>通过操作dom方式，你说你既不想在服务端做，又不想用模板引擎方式，那只有操作dom方式了，或者利用write方式直接写，反正不怎么推荐。</li></ul><p>这里不是介绍怎么使用引擎的，所以具体用法大致就这样:</p><p>page.jst<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"text"</span>&gt;&#123;&#123;= <span class="keyword">it</span>.<span class="built_in">text</span>&#125;&#125;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &#123;&#123;? <span class="keyword">it</span>.showImg&#125;&#125;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"img"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &#123;&#123;?&#125;&#125;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"bg shape &#123;&#123;= it.requestClassName&#125;&#125;"</span>&gt;&#123;&#123;= <span class="keyword">it</span>.shapetext&#125;&#125;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"postions"</span>&gt;We were <span class="keyword">in</span> <span class="keyword">the</span> bottom，<span class="keyword">but</span> now..&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>compile.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> page <span class="keyword">from</span> <span class="string">'/page.jst'</span></span><br><span class="line"><span class="comment">// 1. 编译模板函数</span></span><br><span class="line"><span class="keyword">var</span> tempFn = doT.template(page);</span><br><span class="line"><span class="comment">// 2. 多次使用模板函数</span></span><br><span class="line"><span class="keyword">var</span> resultText = tempFn(&#123;<span class="attr">text</span>: <span class="string">'new text'</span>,<span class="attr">showImg</span>:<span class="literal">false</span>,<span class="attr">requestClassName</span>:<span class="string">'req1'</span>,<span class="attr">shapetext</span>:<span class="string">'new text'</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>这样我们就可以通过js传入唯一标识去进一步实现定制化<br>到目前为止所做的只是简单的满足需求，去做一些样式覆盖文案或者id、class的替换工作，距离深层次的定制化其实还有很长远的路要走…</p><h4 id="简单的封装"><a href="#简单的封装" class="headerlink" title="简单的封装"></a>简单的封装</h4><p>根据前端唯一标识定制化，也可以传回唯一标示请求配置数据，这涉及到后台配置系统，配置表等等。<br>先从最近刚做的根据pid定制样式，在还未使用配置系统的情况下举个例子<br>A是产品方，B，C，D，E是业务方，A需要根据BCDE的UI特点去分别满足他们的需求，如果是以后有更多的业务方还需要同样的满足。就算没有也业务方，其实时间空间也可以成为自己的业务需求方：早晨的UI和晚上的UI不同，北京地区的IP和上海地区的IP用户UI也不同，<mark>思考方向</mark>？<br>总不能来一个业务就重新堆砌一堆代码，有句话叫以不变应万变，这里是以最小的变化应对千千万万个需求。<br>不同的业务方会有不同的id,这里的id暂且可以称为Pid，不同的环境终端也可以做标识（pc,h5）,所以可以用这两个唯一标识作为参数去传入一个方法中，这个方法就是用来改变UI的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xzhang on 2017/12/18.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customByPid</span>(<span class="params">pid,env</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> pid !== <span class="string">'string'</span> || <span class="keyword">typeof</span> env !== <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'arguments is null or not typeof string'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> cssData = &#123;&#125;; <span class="comment">// 样式数据 作为write写入的变量使用</span></span><br><span class="line">    <span class="built_in">window</span>.tempData = &#123;&#125;; <span class="comment">// 模板引擎数据，用来改变文案，数量，请求等</span></span><br><span class="line">    <span class="keyword">var</span> cssCover_pc,cssCover_h5;</span><br><span class="line">    <span class="keyword">switch</span> (pid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'123456'</span>:</span><br><span class="line">            tempData.text= <span class="string">'new text'</span>;</span><br><span class="line">            tempData.shapetext= <span class="string">'new shapetext'</span>;</span><br><span class="line">            tempData.showImg= <span class="literal">true</span>;</span><br><span class="line">            tempData.requestClassName= <span class="string">'req1'</span>;</span><br><span class="line">            cssData.imgSuffix = <span class="built_in">window</span>.imgSuffix = <span class="string">'_blue'</span>;</span><br><span class="line">            cssData.txtcolor = <span class="string">'#666'</span>;</span><br><span class="line">            cssData.bgcolor = <span class="string">'#ffe400'</span>;</span><br><span class="line">            <span class="keyword">if</span>(env === <span class="string">'pc'</span>)&#123;</span><br><span class="line">                cssData.bg_step = <span class="string">'#fcf2a2'</span>;</span><br><span class="line">                cssData.src_img = <span class="string">'/static/new.png'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cssCover_h5 = <span class="string">'&lt;style&gt;&lt;/style&gt;'</span>;</span><br><span class="line">    cssCover_pc = <span class="string">'&lt;style&gt;&lt;/style&gt;'</span>;</span><br><span class="line">    <span class="keyword">if</span>(env === <span class="string">'pc'</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(cssCover_pc);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(env === <span class="string">'h5'</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(cssCover_h5);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为<code>tempData</code>是挂载到<code>window</code>上的，因此它是全局变量可以被<code>doTJs模板引擎</code>作为数据参数使用。<br>调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customByPid(<span class="string">'123456'</span>,<span class="string">'pc'</span>)</span><br></pre></td></tr></table></figure><p>这样就可以只根据<code>pid</code>和目前的<code>环境终端</code>去自动生成我们需要的UI了</p><h4 id="配置系统与配置表、配置项"><a href="#配置系统与配置表、配置项" class="headerlink" title="配置系统与配置表、配置项"></a>配置系统与配置表、配置项</h4><p>未完待续，持续更新深入定制化配置系统和配置表</p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> 定制化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种浏览器咋实现元素的全屏模式</title>
      <link href="/posts/37a4883/"/>
      <url>/posts/37a4883/</url>
      
        <content type="html"><![CDATA[<p>最近自己做H5的播放器，里面的各种按钮都要悉数去做，去调整样式，详细的属性方法事件在我另一篇‘js基础核心梳理之Video’里有堆，可以去全面的做个概览。却没有发现有全屏播放这个方法或者属性，不知道未来会不会封装这个方法进去。比如有个属性叫fullScreen设置为true就可以全屏显示。既然没有那就查查资料自己封装一个全屏方法，原则上市场上存在的产品现象背后都有可实现的方法，你就可以去做。</p><p>以下是实现全屏和退出全屏的各种浏览器兼容方法，也可以利用 <code>fullScreenElement</code> 和 <code>fullScreenEnabled</code>去检测某个全屏的元素和全屏状态。<br><a id="more"></a></p><h4 id="全屏模式"><a href="#全屏模式" class="headerlink" title="全屏模式"></a>全屏模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launchFullscreen</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(element.requestFullscreen) &#123;</span><br><span class="line">    element.requestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.mozRequestFullScreen) &#123;</span><br><span class="line">    element.mozRequestFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.webkitRequestFullscreen) &#123;</span><br><span class="line">    element.webkitRequestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.msRequestFullscreen) &#123;</span><br><span class="line">    element.msRequestFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">launchFullScreen(<span class="built_in">document</span>.documentElement); <span class="comment">// 整个网页</span></span><br><span class="line">launchFullScreen(<span class="built_in">document</span>.getElementById(<span class="string">"videoElement"</span>)); <span class="comment">// 某个页面元素</span></span><br></pre></td></tr></table></figure><h4 id="退出全屏模式"><a href="#退出全屏模式" class="headerlink" title="退出全屏模式"></a>退出全屏模式</h4><p>各种浏览器都提供了一个非常有用的全屏模式时的css样式规则，直接套用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.exitFullscreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.exitFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.mozCancelFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.webkitExitFullscreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.webkitExitFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">exitFullscreen();<span class="comment">//exitFullscreen只能由document对象调用，而不是启动全屏时传入的对象。</span></span><br></pre></td></tr></table></figure><h4 id="全屏模式属性"><a href="#全屏模式属性" class="headerlink" title="全屏模式属性"></a>全屏模式属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fullscreenElement = <span class="built_in">document</span>.fullscreenElement || <span class="built_in">document</span>.mozFullScreenElement || <span class="built_in">document</span>.webkitFullscreenElement;</span><br><span class="line"><span class="keyword">var</span> fullscreenEnabled = <span class="built_in">document</span>.fullscreenEnabled || <span class="built_in">document</span>.mozFullScreenEnabled || <span class="built_in">document</span>.webkitFullscreenEnabled;</span><br><span class="line"><span class="built_in">document</span>.fullScreenElement: 全屏显示的网页元素。</span><br><span class="line"><span class="built_in">document</span>.fullScreenEnabled: 判断当前是否处于全屏状态</span><br></pre></td></tr></table></figure><h4 id="全屏样式CSS"><a href="#全屏样式CSS" class="headerlink" title="全屏样式CSS"></a>全屏样式CSS</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:-webkit-full-screen</span> &#123;</span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-full-screen</span> &#123;</span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-ms-fullscreen</span> &#123;</span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:full-screen</span> &#123; <span class="comment">/*pre-spec */</span></span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:fullscreen</span> &#123; <span class="comment">/* spec */</span></span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* deeper elements */</span></span><br><span class="line"><span class="selector-pseudo">:-webkit-full-screen</span> <span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* styling the backdrop*/</span></span><br><span class="line"><span class="selector-pseudo">::backdrop</span> &#123;</span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-ms-backdrop</span> &#123;</span><br><span class="line">  <span class="comment">/* properties */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> video </tag>
            
            <tag> 全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柯里化函数是个什么</title>
      <link href="/posts/d4c5a626/"/>
      <url>/posts/d4c5a626/</url>
      
        <content type="html"><![CDATA[<p>最近碰到这个概念，就来做个笔记，啥都不说了上定义。</p><blockquote><p>柯里化通常也称部分求值，其含义是给函数分步传递参数，每次传递参数后部分应用参数，并返回一个更具体的函数接受剩下的参数，这中间可嵌套多层这样的接受部分参数函数，直至返回最后结果。</p></blockquote><p><mark>talk is cheap,show me the code</mark><br>如果你有js基础，看看下面的代码就知道柯里化是咋回事了。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _args.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        [].push.apply(_args, [].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;<span class="comment">//返回当前执行函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = currying();</span><br><span class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// Function   </span></span><br><span class="line"><span class="comment">// 调用形式灵活，一次调用可输入一个或者多个参数，并支持链式调用</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>);    </span><br><span class="line">sum(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum());   <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>更通用的柯里化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">        &#125;</span><br><span class="line">        [].push.apply(_args, [].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;<span class="comment">//返回当前执行函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = currying(multi);</span><br><span class="line"><span class="built_in">console</span>.log(sum);   <span class="comment">// Function  </span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>);    </span><br><span class="line">sum(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum());   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = <span class="built_in">arguments</span>[i++];) &#123;</span><br><span class="line">        total += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>简单来说因此柯里化的过程是逐步传参，逐步缩小函数的适用范围，逐步求解的过程。满足条件的时候它每次都会返回一个新的函数，新的函数又可以接受新的参数，直到延迟到最后一次不满足条件进行求值计算。<br>柯里化这个概念其实就是<code>函数式编程思想</code>, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅</p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来，认识下XMLHttpRequest2</title>
      <link href="/posts/df4bb76e/"/>
      <url>/posts/df4bb76e/</url>
      
        <content type="html"><![CDATA[<h4 id="XMLHttpRequest综述"><a href="#XMLHttpRequest综述" class="headerlink" title="XMLHttpRequest综述"></a>XMLHttpRequest综述</h4><p><a href="https://en.wikipedia.org/wiki/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a>在维基百科的定义”XMLHttpRequest (XHR) is an API in the form of an object whose methods transfer data between a web browser and a web server.” 它是一个在服务端和客户端之间进行传输数据的浏览器接口，说白了就是HTTP(S)的通信，依赖于浏览器的javascript环境。通信的数据格式限于XML,JSON,HTML,plain text。<br>但是这个接口的最初版本，各个浏览器厂家的实现也不尽相同，没有被标准化。这么下去也不是个事儿，技术总得进步，接口总得统一，不然不仅开发者闹情绪，用户都快不满足了，后来html5出现以后，这个标准化的工作就提上了日程，谁去做？当然W3C那帮老大哥啊，凡是和www有关的草案，正式标准都是得那发话。<br>所以众望所归，这个XMLHttpRequest的标准草案在2008年落成，因为增加了许多新的技能，所以叫XMLHttpRequest有点赶不上时代潮流了，叫XMLHttpRequest plus？这个名字有点apple，还是叫<code>XMLHttpRequest level2</code>吧。<br>到底增加了哪些功能了呢？那先研究下XMLHttpRequest level1基础？那还废什么话直接捋袖子干~<br>在控制台吧XMLHttpRequest打出来会发现他是一个构造函数，是一个可以继承的类，要使用其上的接口方法属性需要实例化这个方法。<br>新建一个XMLHttpRequest的实例<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></p><p>向服务端发送接受数据的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(METHOD, URL);</span><br><span class="line">xhr.send(BODY);</span><br></pre></td></tr></table></figure><p>服务端主机做出返回要找个事件<code>onreadystatechange</code>监听啊，不仅要监听还要做出反应（回调）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = callback;</span><br></pre></td></tr></table></figure></p><blockquote><p>我这个人喜欢总结，喜欢举一反三，你光秃秃给我看XMLHttpRequest这个对象上的几个属性方法，真的能憋死我，就算我去控制台打印调试，我也得一个不落的都给总结了，所以新老版本的XMLHttpRequest属性方法事件都在后面躺着呢，以后记性不好也可以参考参考，不然这日子没法过。</p></blockquote><p>XMLHttpRequest这样看没毛病啊？ 谁说他有毛病了，你能说当年的”286”有毛病么？不能，时代在发展，人类在进步，不要嫌弃为我们做过贡献的革命好同志。只是我与XMLHttpRequest不相见已二余年，到现在我忘不掉的还是那个夜晚，从二进制坑里爬不出来我的背影。</p><ul><li>只支持文本数据的传送，无法用来读取和上传二进制文件。</li><li>传送和接收数据时，没有进度信息，只能提示有没有完成。</li><li>受到”同域限制”，只能向同一域名的服务器请求数据</li></ul><h4 id="XMLHttpRequest2"><a href="#XMLHttpRequest2" class="headerlink" title="XMLHttpRequest2"></a>XMLHttpRequest2</h4><p>最后一条可以说比较过分了，你让我跨域的咋办，jsonp? 那我不用get呢，iframe? 我想静静，不知道她想我么。<br>所以！！ 新一代的XMLHttpRequest出现了，来数一数哪些东西可以让你爬出坑。</p><h5 id="增加了timeout属性，可以设置HTTP请求的时限-超时直接处理。"><a href="#增加了timeout属性，可以设置HTTP请求的时限-超时直接处理。" class="headerlink" title="增加了timeout属性，可以设置HTTP请求的时限,超时直接处理。"></a>增加了timeout属性，可以设置HTTP请求的时限,超时直接处理。</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.timeout =timeout;</span><br><span class="line">xhr.ontimeout = callback;</span><br></pre></td></tr></table></figure><h5 id="HTML5新增了一个FormData对象，可以模拟表单，直接传送这个FormData对象-与提交网页表单的效果完全一样"><a href="#HTML5新增了一个FormData对象，可以模拟表单，直接传送这个FormData对象-与提交网页表单的效果完全一样" class="headerlink" title="HTML5新增了一个FormData对象，可以模拟表单，直接传送这个FormData对象,与提交网页表单的效果完全一样"></a>HTML5新增了一个FormData对象，可以模拟表单，直接传送这个FormData对象,与提交网页表单的效果完全一样</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();<span class="comment">// 新建一个FormData对象</span></span><br><span class="line">formData.append(<span class="string">'username'</span>, <span class="string">'张三'</span>);<span class="comment">// 添加一个额外表单项</span></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><h5 id="FormData对象也可以用来对页面上现有的-HTMLFormElement-进行初始化。"><a href="#FormData对象也可以用来对页面上现有的-HTMLFormElement-进行初始化。" class="headerlink" title="FormData对象也可以用来对页面上现有的 HTMLFormElement 进行初始化。"></a>FormData对象也可以用来对页面上现有的 HTMLFormElement 进行初始化。</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(‘myform<span class="string">');</span></span><br><span class="line"><span class="string">// 获取网页表单的值</span></span><br><span class="line"><span class="string">var formData = new FormData(form);</span></span><br></pre></td></tr></table></figure><h5 id="新版XMLHttpRequest对象，不仅可以发送文本信息，还可以上传文件"><a href="#新版XMLHttpRequest对象，不仅可以发送文本信息，还可以上传文件" class="headerlink" title="新版XMLHttpRequest对象，不仅可以发送文本信息，还可以上传文件"></a>新版XMLHttpRequest对象，不仅可以发送文本信息，还可以上传文件</h5><h5 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h5><p>可以向不同域名的服务器发出HTTP请求 这叫做”跨域资源共享”（Cross-origin resource sharing，简称CORS）<br>使用”跨域资源共享”的前提，是浏览器必须支持这个功能，而且服务器端必须同意这种”跨域</p><h5 id="接收二进制数据"><a href="#接收二进制数据" class="headerlink" title="接收二进制数据"></a>接收二进制数据</h5><h6 id="1-旧做法-改写MIMEType-详细的有兴趣自己查"><a href="#1-旧做法-改写MIMEType-详细的有兴趣自己查" class="headerlink" title="1. 旧做法 ,改写MIMEType ,详细的有兴趣自己查"></a>1. 旧做法 ,改写MIMEType ,详细的有兴趣自己查</h6><p>较老的做法是改写数据的MIMEType，将服务器返回的二进制数据伪装成文本数据，并且告诉浏览器这是用户自定义的字符集<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/path/to/image.png'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// Hack to pass bytes through unprocessed.</span></span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/plain; charset=x-user-defined'</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> binStr = <span class="keyword">this</span>.responseText;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = binStr.length; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = binStr.charCodeAt(i);</span><br><span class="line">      <span class="comment">//String.fromCharCode(c &amp; 0xff);</span></span><br><span class="line">      <span class="keyword">var</span> byte = c &amp; <span class="number">0xff</span>;  <span class="comment">// byte at offset i</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><h6 id="2-responseType属性"><a href="#2-responseType属性" class="headerlink" title="2.responseType属性"></a>2.responseType属性</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把responseType设为blob，表示服务器传回的是二进制对象。</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, ‘/path/to/image.png<span class="string">');</span></span><br><span class="line"><span class="string">xhr.responseType = ‘blob'</span>;</span><br><span class="line"><span class="comment">//接收数据的时候，用浏览器自带的Blob对象即可。</span></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([xhr.response], &#123;<span class="attr">type</span>: ‘image/png<span class="string">'&#125;);</span></span><br></pre></td></tr></table></figure><h5 id="事件-on"><a href="#事件-on" class="headerlink" title="事件 on+"></a>事件 on+</h5><p><strong>onprogress</strong>：传送数据的时候，返回进度信息调用方式<code>xhr.upload.onprogress</code><br><strong>onload</strong>：传输成功完成。<br><strong>onabort</strong>：传输被用户取消。<br><strong>onerror</strong>：传输中出现错误。<br><strong>onloadstart</strong>：传输开始。<br><strong>onloadEnd</strong>：传输结束，但是不知道成功还是失败。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>0% complete<span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"> xhr.upload.onprogress = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (e.lengthComputable) &#123;</span></span><br><span class="line"><span class="undefined">      progressBar.value = (e.loaded / e.total) * 100;</span></span><br><span class="line"><span class="undefined">      progressBar.textContent = progressBar.value; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">  xhr.onload=fn;  </span></span><br><span class="line"><span class="actionscript">  <span class="comment">//xhr.addEventLisetener("load",fn);</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="XMLHttpRequest-api"><a href="#XMLHttpRequest-api" class="headerlink" title="XMLHttpRequest api"></a>XMLHttpRequest api</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p><strong>readyState</strong><br>0 表示初始化状态，XMLHttpRequest对象已经创建或者abort()重置<br>1 表示open()方法已经调用，但是未send(),请求并没有被发送<br>2 表示send()方法已经调用，http请求到达服务器，未收到响应<br>3 所有的响应头都已收到，响应体开始接收但未完成<br>4 http响应已经完全接收<br>每次这个属性值增加的时候，都会触发onreadystatechange()事件句柄</p><p><strong>status</strong><br>由服务器返回的 HTTP 状态代码，如 200 表示成功，而 404 表示 “Not Found” 错误。==当readyState小于 3 的时候读取这一属性会导致一个异常==。</p><p><strong>statusText</strong><br>这个属性用名称而不是数字指定了请求的 HTTP的状态代码。也就是说，当状态为 200 的时候它是 “OK”，当状态为 404 的时候它是 “Not Found”。和 status 属性一样，==当 readyState 小于 3 的时候读取这一属性会导致一个异常。==</p><p><strong>responseText</strong><br>目前为止为服务器接收到的响应体（不包括头部），或者如果还没有接收到数据的话，就是空字符串。<br>如果 readyState 小于 3，这个属性就是一个空字符串。当 readyState 为 3，这个属性返回目前已经接收的响应部分。如果 readyState 为 4，这个属性保存了完整的响应体。<br>如果响应包含了为响应体指定字符编码的头部，就使用该编码。否则，假定使用 Unicode UTF-8。</p><p><strong>responseXML</strong><br>对请求的响应，解析为 XML 并作为 Document 对象返回。</p><p><strong>response</strong><br>返回 responseType 设置过的格式的数据</p><p><strong>responseType</strong><br>返回什么格式的数据 ==[text,arraybuffer,blob,document] 默认text==</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p><strong>onreadystatechange</strong><br>每次 readyState 属性改变的时候调用的事件句柄函数。当 readyState 为 3 时，它也可能调用多次。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><strong>abort()</strong><br>取消当前响应，关闭连接并且结束任何未决的网络活动。<br>这个方法把 XMLHttpRequest 对象重置为 readyState 为0的状态，并且取消所有未决的网络活动。例如，如果请求用了太长时间，而且响应不再必要的时候，可以调用这个方法。</p><p><strong>getAllResponseHeaders()</strong><br>把 HTTP 响应头部作为未解析的字符串返回。<br>如果 readyState 小于 3，这个方法返回 null。否则，它返回服务器发送的所有 HTTP 响应的头部。头部作为单个的字符串返回，一行一个头部。每行用换行符 “\r\n” 隔开。</p><p><strong>getResponseHeader()</strong><br>返回指定的 HTTP 响应头部的值。<br>其参数是要返回的 HTTP响应头部的名称。可以使用任何大小写来制定这个头部名字，和响应头部的比较是不区分大小写的。<br>该方法的返回值是指定的 HTTP 响应头部的值，如果没有接收到这个头部或者 readyState 小于 3 则为空字符串。<br>如果接收到多个有指定名称的头部，这个头部的值被连接起来并返回，使用逗号和空格分隔开各个头部的值。</p><p><strong>open(method, url, async, username, password)</strong><br>初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求。</p><p><strong>send(body)</strong><br>发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体。</p><p><strong>setRequestHeader(name, value)</strong><br>name 参数是要设置的头部的名称。这个参数不应该包括空白、冒号或换行。<br>value 参数是头部的值。这个参数不应该包括换行向一个打开但未发送的请求设置或添加一个 HTTP 请求。</p><p><strong>说明</strong><br><code>setRequestHeader()</code> 方法指定了一个 HTTP 请求的头部，它应该包含在通过后续 <code>send()</code> 调用而发布的请求中。这个方法只有当 readyState 为 1 的时候才能调用，例如，在调用了<code>open()</code> 之后，但在调用 <code>send()</code> 之前。<br>如果带有指定名称的头部已经被指定了，这个头部的新值就是：之前指定的值，加上逗号、空白以及这个调用指定的值。<br>如果 <code>open()</code> 调用指定了认证资格，<code>XMLHttpRequest</code> 自动发送一个适当的 <code>Authorization</code> 请求头部。但是，你可以使用 <code>setRequestHeader()</code> 来添加这个头部。类似地，如果 Web 服务器已经保存了和传递给<code>open()</code> 的 URL 相关联的<code>cookie</code>，适当的 <code>Cookie</code> 或 <code>Cookie2</code> 头部也自动地包含到请求中。可以通过调用 <code>setRequestHeader()</code>来把这些 <code>cookie</code> 添加到头部。<code>XMLHttpRequest</code> 也可以为 <code>User-Agent</code> 头部提供一个默认值。如果它这么做，你为该头部指定的任何值都会添加到这个默认值后面。<br>有些请求头部由 <code>XMLHttpRequest</code> 自动设置而不是由这个方法设置，以符合 HTTP 协议。这包括如下和代理相关的头部：<br>Host<br>Connection<br>Keep-Alive<br>Accept-charset<br>Accept-Encoding<br>If-Modified-Since<br>If-None-Match<br>If-Range<br>Range</p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> XMLHttpRequest2 </tag>
            
            <tag> XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新认知下History这家伙</title>
      <link href="/posts/ab959e28/"/>
      <url>/posts/ab959e28/</url>
      
        <content type="html"><![CDATA[<p>DOM中的window对象通过window.history方法提供了对浏览器历史记录的读取，让你可以在用户的访问记录中前进和后退。从HTML5开始，我们可以开始操作这个历史记录堆栈。</p><h4 id="1-window属性history的方法"><a href="#1-window属性history的方法" class="headerlink" title="1.window属性history的方法"></a>1.window属性history的方法</h4><p>使用<code>back()</code>,<code>forward()</code>,和<code>go()</code>方法可以在用户的历史记录中前进和后退</p><p>用户后退行为,这个方法会像用户点击了浏览器工具栏上的返回键一样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.back();</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>用户前进行为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.forward();</span><br></pre></td></tr></table></figure></p><p>使用go()方法从session历史中载入特定的页面，当然，你可以前进或者后退多个页面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向后移动一页：</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向前移动一页：</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>还可以通过检查浏览器历史记录的length属性来找到历史记录堆栈中的页面总数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfEntries = <span class="built_in">window</span>.history.length;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:IE支持向go()方法传URL参数。</p></blockquote><h4 id="2-添加和修改history实体"><a href="#2-添加和修改history实体" class="headerlink" title="2.添加和修改history实体"></a>2.添加和修改history实体</h4><p>Html5引入了<code>histtory.pushState()</code> 和 <code>history.replaceState()</code> 这两个方法，他们允许添加和修改<code>history实体</code>。<br>同时，这些方法会和 <code>window.onpopstate</code> 事件一起工作。<br>使用<code>history.pushState()</code>方法来修改<code>referrer</code>,这种方法可以被用在经过修改状态后而为xmlhttpRequest对象创建的http header中,这个<code>referrer</code>会是创建XMLHttpRequest时document的URL。</p><p><strong>pushState 用于向 history 添加当前页面的记录，而 replaceState 和 pushState 的用法完全一样，唯一的区别就是它用于修改当前页面在 history 中的记录。</strong><br>假设 <code>https://youku.com/foo.html</code> 页面执行了下面的Js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stateObj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;  </span><br><span class="line">history.pushState(stateObj, <span class="string">"page 2"</span>, <span class="string">"bar.html"</span>);</span><br></pre></td></tr></table></figure></p><p>这种方法将会使url地址栏显示<code>https://youku.com/bar.html</code>，<mark>但浏览器不会加载bar.html页面</mark>，即使这个页面存在也不会加载。<br>现在再次假设用户继续访问<code>https://tudou.com</code>，然后点击后退。这时，url地址栏将会出现<code>https://youku.com/bar.html</code>，页面会得到popstate事件，这个状态对象会包含一个stateObj的copy。这个页面看起来像foo.html。<br>这时，我们再次点击后退，URL将变成 <code>https://youku.com/foo.html</code>，document将得到另一个popstate事件和为null的state对象,这次的返回动作并没有改变文档的内容。</p><h5 id="pushState方法"><a href="#pushState方法" class="headerlink" title="pushState方法"></a>pushState方法</h5><p>pushState()有三个参数:<code>state对象</code>，<code>标题</code>，<code>URL(可选)</code>。具体细节：</p><p>state对象<br>state对象是一个JavaScript对象，它关系到由pushState()方法创建出来的新的history实体。用以存储关于你所要插入到历史，记录的条目的相关信息。State对象可以是任何Json字符串。因为firefox会使用用户的硬盘来存取state对象，这个对象的最大存储空间为640k。如果大于这个数 值，则pushState()方法会抛出一个异常。如果确实需要更多的空间来存储，请使用本地存储。</p><h5 id="title-firefox"><a href="#title-firefox" class="headerlink" title="title[firefox]"></a>title[firefox]</h5><p>未来可能会被使用上的一个参数，目前使用无实际的意义。现在最安全的使用方式是传一个空字符串，以防止将来的修改。或者可以传一个简短的标题来表示state。</p><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><p>这个参数用来传递新的history实体的URL，注意浏览器将不会在调用pushState()方法后加载这个URL，但也许会过一会尝试加载这个URL。例如在用户重启了浏览器后，新的url可以不是绝对路径。如果是相对路径，那么它会相对于现有的url。新的url必须和现有的url同域，否则pushState()将抛出异常。这个参数是选填的，如果为空，则会被置为document当前的url。<br>某种意义上来说，调用pushState()方法很像设置了window.location = “#foo”,这两者都会创建和激活另一个关联到当前document的history实体，但pushState()另外有一些优点：</p><p>新的url可以是任何和当前url同域的url，相比之下，如果只设置hash，window.location会保持在同一个document。<br>如果不需要，你可以不修改url。对比而言，设置window.location = “#foo”;仅产生新的history实体，如果你当前的hash不是#foo<br>你可以将任意的数据与你的新history实体关联。使用基于hash的方法，需要将所有相关的数据编码为一个短字符串。</p><blockquote><p>注意，pushState()方法不会使hashchange时间发生，即使是新旧url只是hash不同。</p></blockquote><h5 id="replaceState-方法"><a href="#replaceState-方法" class="headerlink" title="replaceState()方法"></a>replaceState()方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.replaceState()</span><br></pre></td></tr></table></figure><p>用起来很像<code>pushState()</code>，除了<code>replaceState()</code>是用来修改当前的history实体而不是创建一个新的。这个方法有时会很有用，当 你需要对某些用户行为作反应而更新一个state对象或者当前history实体时，可以使用它来更新state对象或者当前history实体的url。</p><h5 id="popstate事件"><a href="#popstate事件" class="headerlink" title="popstate事件"></a>popstate事件</h5><p>调用<code>history.pushState()</code>或者<code>history.replaceState()</code>不会触发popstate事件. popstate事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用history.back()、history.forward()、history.go()方法).<br>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onpopstate" target="_blank" rel="noopener">window.onpopstate</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"location: "</span> + <span class="built_in">document</span>.location + <span class="string">", state: "</span> + <span class="built_in">JSON</span>.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定事件处理函数. </span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">"title 1"</span>, <span class="string">"?page=1"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span></span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">"title 2"</span>, <span class="string">"?page=2"</span>);    <span class="comment">//添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span></span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">"title 3"</span>, <span class="string">"?page=3"</span>); <span class="comment">//修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span></span><br><span class="line">history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html?page=1, state: &#123;"page":1&#125;"</span></span><br><span class="line">history.back(); <span class="comment">// 弹出 "location: http://example.com/example.html, state: null</span></span><br><span class="line">history.go(<span class="number">2</span>);  <span class="comment">// 弹出 "location: http://example.com/example.html?page=3, state: &#123;"page":3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> history </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令实战记录</title>
      <link href="/posts/f370b2d3/"/>
      <url>/posts/f370b2d3/</url>
      
        <content type="html"><![CDATA[<p>这里为了方便查字典，整理了常用的git操作，正常开发工作情况下应该很全了，如果随后遇到新的奇淫操作会不断更新的~</p><h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"joacycode@163.com</span></span><br></pre></td></tr></table></figure><h4 id="用户名、邮箱配置"><a href="#用户名、邮箱配置" class="headerlink" title="用户名、邮箱配置"></a>用户名、邮箱配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name yourname --<span class="built_in">local</span></span><br><span class="line">git config user.email yourname@emmail.com --<span class="built_in">local</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="本地项目关联远程仓库"><a href="#本地项目关联远程仓库" class="headerlink" title="本地项目关联远程仓库"></a>本地项目关联远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到本地项目地址,初始化项目。该步骤会创建一个.git文件夹是附属于该仓库的工作树</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'initial commit'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Git上已有仓库，不克隆的情况下关联到本地仓库，本地仓库下运行此命令,可能需要执行</span></span><br><span class="line"><span class="comment"># git config --global push.default matching</span></span><br><span class="line"><span class="comment"># 使得push命令默认push到github的同名仓库中</span></span><br><span class="line">git remote add origin git@service:path/xx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把本地项目push到远程github仓库</span></span><br><span class="line">push -u origin master </span><br><span class="line"></span><br><span class="line"><span class="comment"># Git远程分支和本地分支的关联未创建</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream branchName origin/branchName</span><br></pre></td></tr></table></figure><h4 id="克隆代码库"><a href="#克隆代码库" class="headerlink" title="克隆代码库"></a>克隆代码库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@[git address]:[gitname]  [<span class="built_in">local</span> repo-name]</span><br></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch branchName<span class="comment"># 基于本地创建分支</span></span><br><span class="line">git push origin branchName <span class="comment"># 推送本地分支</span></span><br><span class="line">git branch branchName origin/branchName<span class="comment"># 基于远程创建分支</span></span><br><span class="line">git checkout -b  branchName  origin/branchName <span class="comment"># 创建分支并切换到此分支（远程）</span></span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment"># 列出本地所有分支</span></span><br><span class="line">git branch -r <span class="comment"># 列出远程所有分支</span></span><br><span class="line">git branch -a <span class="comment"># 列出所有分支(远程和本地)</span></span><br><span class="line">git branch -avv <span class="comment"># 列出所有分支(并显示追踪track关系)</span></span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d[-D] branchName 删除本地分支</span><br><span class="line">git push origin --delete branchName删除远程分支</span><br></pre></td></tr></table></figure><h4 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old-name new-name</span><br></pre></td></tr></table></figure><h4 id="删除远程分支方案"><a href="#删除远程分支方案" class="headerlink" title="删除远程分支方案"></a>删除远程分支方案</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#备份远程分支</span></span><br><span class="line"><span class="comment">#删除远程分支</span></span><br><span class="line">git push origin :branch</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchName</span><br></pre></td></tr></table></figure><h4 id="更新分支"><a href="#更新分支" class="headerlink" title="更新分支"></a>更新分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新分支内容</span></span><br><span class="line">git pull  origin [branch name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程最新列表分支</span></span><br><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>切换到需要合并的分支<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branchName]</span><br></pre></td></tr></table></figure></p><p>禁用fast-forward的合并,否则合并的分支提交记录会带到主分支<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff  -m ”description” mergeBranch</span><br></pre></td></tr></table></figure></p><h4 id="解决目录下的冲突"><a href="#解决目录下的冲突" class="headerlink" title="解决目录下的冲突"></a>解决目录下的冲突</h4><p>解决冲突(手动解决 外部工具解决beyondCompare，解决冲突目前推荐<code>vscode</code>编辑器自带的冲突解决)，重新构建所有冲突的文件  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决本次合并的所有冲突</span></span><br><span class="line">git mergetool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决特定文件的冲突</span></span><br><span class="line">git mergetool src/js/g.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看编辑gitconfig [mergetool difftool alias]</span></span><br><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><h4 id="本地分支与远程分支绑定"><a href="#本地分支与远程分支绑定" class="headerlink" title="本地分支与远程分支绑定"></a>本地分支与远程分支绑定</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git  push  -u  origin  [branchName]  <span class="comment"># or</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin  [branchName] <span class="comment">#第一次推</span></span><br><span class="line">git push <span class="comment"># or</span></span><br><span class="line">git push origin branchName <span class="comment">#绑定后的推送</span></span><br></pre></td></tr></table></figure><h4 id="更新master"><a href="#更新master" class="headerlink" title="更新master"></a>更新master</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><h4 id="恢复代码"><a href="#恢复代码" class="headerlink" title="恢复代码"></a>恢复代码</h4><ol><li><p>未推送至远程都可以用reset</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/branchName<span class="comment"># 放弃本地修改和远程保持一致</span></span><br><span class="line">git reset --hard [commit id] <span class="comment"># 恢复到指定版本</span></span><br><span class="line">git reset --hard HEAD <span class="comment"># HEAD^ HEAD^^ HEAD~N</span></span><br><span class="line">git reset --hard file[文件地址]</span><br></pre></td></tr></table></figure></li><li><p>已添加到暂存区 (git add后)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file[文件地址] <span class="comment"># 从版本库恢复内容到暂存区</span></span><br><span class="line">git checkout  --file[文件地址] <span class="comment"># 从暂存区恢复到工作区,丢掉工作区</span></span><br></pre></td></tr></table></figure></li><li><p>直接丢弃工作区 (还未 git add)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --file</span><br></pre></td></tr></table></figure></li><li><p>已推送到远程的分支，需要重新更新再强制推送</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure></li></ol><h4 id="迁移代码仓库"><a href="#迁移代码仓库" class="headerlink" title="迁移代码仓库"></a>迁移代码仓库</h4><p>需要迁移的仓库地址<code>git-old-url/some.git</code><br>新的仓库地址<code>git-new-url/some.git</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆裸版本库，包含版本库历史的各个分支和提交记录</span></span><br><span class="line">git <span class="built_in">clone</span> --bare  git-old-url/some.git</span><br><span class="line"><span class="comment"># 进入本地的裸库some.git</span></span><br><span class="line"><span class="built_in">cd</span> some.git</span><br><span class="line"><span class="comment"># 推送镜像到新git地址</span></span><br><span class="line">git push --mirror git-new-url/some.git</span><br><span class="line"><span class="comment"># 删除裸库</span></span><br><span class="line">rm -rf some.git</span><br><span class="line"><span class="comment"># 克隆新的地址仓库：</span></span><br><span class="line">git <span class="built_in">clone</span>  git-new-url/some.git</span><br></pre></td></tr></table></figure></p><p>其他方式<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改远程remote地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin git-new-url/some.git</span><br></pre></td></tr></table></figure></p><h4 id="远程版本回滚"><a href="#远程版本回滚" class="headerlink" title="远程版本回滚"></a>远程版本回滚</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地代码回滚到上一版本（或者指定版本）</span></span><br><span class="line">git reset --hard [commit id] <span class="comment"># ^HEAD</span></span><br><span class="line"><span class="comment"># 加入-f参数，强制提交，将强制更新远程端版本 慎用</span></span><br><span class="line">git push -f origin branchname</span><br></pre></td></tr></table></figure><h4 id="对比文件"><a href="#对比文件" class="headerlink" title="对比文件"></a>对比文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对比两个分支文件</span></span><br><span class="line">git diff dev master -- [path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比两个分支文件</span></span><br><span class="line">git diff dev:[path]  master:[path] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比提交过的文件</span></span><br><span class="line">git diff [commit id 1] [commit id 2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比工作区和暂存区</span></span><br><span class="line">git diff -- [PATH]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比工作区和版本库</span></span><br><span class="line">git diff HEAD -- [path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比暂存区和版本库</span></span><br><span class="line">git diff --cached -- [PATH]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较本次合并的所有修改(只与提交前的记录比较)</span></span><br><span class="line">git difftool</span><br></pre></td></tr></table></figure><h4 id="add操作"><a href="#add操作" class="headerlink" title="add操作"></a>add操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存所有操作</span></span><br><span class="line">git add -A </span><br><span class="line"><span class="comment"># 保存删除和修改 但不包括新建</span></span><br><span class="line">git add -u </span><br><span class="line"><span class="comment"># 保存新建和修改 但不包括删除</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id="查看当前分支commit-id"><a href="#查看当前分支commit-id" class="headerlink" title="查看当前分支commit id"></a>查看当前分支commit id</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-parse HEAD</span><br></pre></td></tr></table></figure><h4 id="覆盖上一次提交的记录"><a href="#覆盖上一次提交的记录" class="headerlink" title="覆盖上一次提交的记录"></a>覆盖上一次提交的记录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">'msg'</span></span><br></pre></td></tr></table></figure><h4 id="gitconfig"><a href="#gitconfig" class="headerlink" title="gitconfig"></a>gitconfig</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~/.gitconfig</span><br><span class="line">[merge]</span><br><span class="line">    tool = bcomp</span><br><span class="line">[mergetool]</span><br><span class="line">    prompt = <span class="literal">false</span></span><br><span class="line">    keepBackup = <span class="literal">false</span></span><br><span class="line">[mergetool <span class="string">"bcomp"</span>]</span><br><span class="line">    trustExitCode = <span class="literal">true</span></span><br><span class="line">    cmd = <span class="string">"/usr/local/bin/bcomp"</span> <span class="string">"<span class="variable">$LOCAL</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span> <span class="string">"<span class="variable">$BASE</span>"</span> <span class="string">"<span class="variable">$MERGED</span>"</span></span><br><span class="line">[diff]</span><br><span class="line">    tool = bcomp</span><br><span class="line">[difftool]</span><br><span class="line">    prompt = <span class="literal">false</span></span><br><span class="line">[difftool <span class="string">"bcomp"</span>]</span><br><span class="line">    trustExitCode = <span class="literal">true</span></span><br><span class="line">    cmd = <span class="string">"/usr/local/bin/bcomp"</span> <span class="string">"<span class="variable">$LOCAL</span>"</span> <span class="string">"<span class="variable">$REMOTE</span>"</span></span><br></pre></td></tr></table></figure><h4 id="常用git-Alias"><a href="#常用git-Alias" class="headerlink" title="常用git Alias"></a>常用git Alias</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    s = status --short --branch</span><br><span class="line">    pu = pull --rebase</span><br><span class="line">    ca = commit --amend</span><br><span class="line">    ci = commit -a -v</span><br><span class="line">    br = branch</span><br><span class="line">    bv = branch -vv</span><br><span class="line">    co = checkout</span><br><span class="line">    cb = checkout -b</span><br><span class="line">    df = diff</span><br><span class="line">    un = reset --hard HEAD</span><br><span class="line">    uh = reset --hard HEAD^</span><br><span class="line">    ll = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --numstat</span><br><span class="line">    ld = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=short --graph</span><br><span class="line">    ls = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]"</span> --decorate --date=relative</span><br></pre></td></tr></table></figure><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5项目常见问题及注意事项</title>
      <link href="/posts/262a55b/"/>
      <url>/posts/262a55b/</url>
      
        <content type="html"><![CDATA[<h4 id="Meta基础知识："><a href="#Meta基础知识：" class="headerlink" title="Meta基础知识："></a>Meta基础知识：</h4><p>H5页面窗口自动调整到设备宽度，并禁止用户缩放页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//一、HTML页面结构</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></span><br><span class="line">// width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span><br><span class="line">// height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span><br><span class="line">// initial-scale    默认缩放比例，为一个数字，可以带小数</span><br><span class="line">// minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span><br><span class="line">// maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span><br><span class="line">// user-scalable    是否允许手动缩放</span><br><span class="line"></span><br><span class="line">//二、JS动态判断</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> phoneWidth =  <span class="built_in">parseInt</span>(<span class="built_in">window</span>.screen.width);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> phoneScale = phoneWidth/<span class="number">640</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> ua = navigator.userAgent;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua))&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> version = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(version&gt;<span class="number">2.3</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width=640, minimum-scale = '</span>+phoneScale+<span class="string">', maximum-scale = '</span>+phoneScale+<span class="string">', target-densitydpi=device-dpi"&gt;'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        document.write('<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640, target-densitydpi=device-dpi"</span>&gt;</span>');</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    document.write('<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=640, user-scalable=no, target-densitydpi=device-dpi"</span>&gt;</span>');</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="H5空白页基本meta标签"><a href="#H5空白页基本meta标签" class="headerlink" title="H5空白页基本meta标签"></a>H5空白页基本meta标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置缩放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no, minimal-ui"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span><span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PC端基础meta标签"><a href="#PC端基础meta标签" class="headerlink" title="PC端基础meta标签"></a>PC端基础meta标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"your tags"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面描述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"150 words"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索引擎索引方式：robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    all：文件将被检索，且页面上的链接可以被查询；</span></span><br><span class="line"><span class="comment">    none：文件将不被检索，且页面上的链接不可以被查询；</span></span><br><span class="line"><span class="comment">    index：文件将被检索；</span></span><br><span class="line"><span class="comment">    follow：页面上的链接可以被查询；</span></span><br><span class="line"><span class="comment">    noindex：文件将不被检索；</span></span><br><span class="line"><span class="comment">    nofollow：页面上的链接不可以被查询。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 页面重定向和刷新：content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url="</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="页面缓存设置"><a href="#页面缓存设置" class="headerlink" title="页面缓存设置"></a>页面缓存设置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 清除缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他meta标签"><a href="#其他meta标签" class="headerlink" title="其他meta标签"></a>其他meta标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"author name"</span> /&gt;</span> <span class="comment">&lt;!-- 定义网页作者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"googlebot"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"verify"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="移动端如何定义字体font-family"><a href="#移动端如何定义字体font-family" class="headerlink" title="移动端如何定义字体font-family"></a>移动端如何定义字体font-family</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ --------------------------------------中文字体的英文名称</span></span><br><span class="line"><span class="meta">@ 宋体      SimSun</span></span><br><span class="line"><span class="meta">@ 黑体      SimHei</span></span><br><span class="line"><span class="meta">@ 微信雅黑   Microsoft Yahei</span></span><br><span class="line"><span class="meta">@ 微软正黑体 Microsoft JhengHei</span></span><br><span class="line"><span class="meta">@ 新宋体    NSimSun</span></span><br><span class="line"><span class="meta">@ 新细明体  MingLiU</span></span><br><span class="line"><span class="meta">@ 细明体    MingLiU</span></span><br><span class="line"><span class="meta">@ 标楷体    DFKai-SB</span></span><br><span class="line"><span class="meta">@ 仿宋     FangSong</span></span><br><span class="line"><span class="meta">@ 楷体     KaiTi</span></span><br><span class="line"><span class="meta">@ 仿宋_GB2312  FangSong_GB2312</span></span><br><span class="line"><span class="meta">@ 楷体_GB2312  KaiTi_GB2312  </span></span><br><span class="line"><span class="meta">@</span></span><br><span class="line"><span class="meta">@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica</span></span><br><span class="line">body &#123; font-family: Microsoft Yahei,SimSun,Helvetica; &#125;</span><br></pre></td></tr></table></figure><h4 id="打电话发短信写邮件怎么实现"><a href="#打电话发短信写邮件怎么实现" class="headerlink" title="打电话发短信写邮件怎么实现"></a>打电话发短信写邮件怎么实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 一、打电话</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:0755-10086"</span>&gt;</span>打电话给:0755-10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//  二、发短信，winphone系统无效</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 三、写邮件</span><br><span class="line">//注：在添加这些功能时，第一个功能以"?"开头，后面的以"&amp;"开头</span><br><span class="line">//1.普通邮件</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com;384900096@qq.com"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//5.包含主题，用?subject=</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?subject=邮件主题"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行 </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//7.内容包含链接，含http(s)://等的文本自动转化为链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?body=http://www.baidu.com"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//8.内容包含图片（PC不支持）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' /&gt;"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//9.完整示例</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' /&gt;"</span>&gt;</span>点击我发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="移动端touch事件（区分webkit和winphone）"><a href="#移动端touch事件（区分webkit和winphone）" class="headerlink" title="移动端touch事件（区分webkit和winphone）"></a>移动端touch事件（区分webkit和winphone）</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */</span></span><br><span class="line"><span class="comment">// 以下支持webkit</span></span><br><span class="line"><span class="selector-tag">touchstart</span>——当手指触碰屏幕时候发生。不管当前有多少只手指</span><br><span class="line"><span class="selector-tag">touchmove</span>——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用<span class="selector-tag">event</span>的<span class="selector-tag">preventDefault</span>()可以阻止默认情况的发生：阻止页面滚动</span><br><span class="line"><span class="selector-tag">touchend</span>——当手指离开屏幕时触发</span><br><span class="line"><span class="selector-tag">touchcancel</span>——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面<span class="selector-tag">alert</span>()一个提示框，此时会触发该事件，这个事件比较少用</span><br><span class="line"></span><br><span class="line"><span class="comment">//TouchEvent说明：</span></span><br><span class="line"><span class="selector-tag">touches</span>：屏幕上所有手指的信息</span><br><span class="line"><span class="selector-tag">targetTouches</span>：手指在目标区域的手指信息</span><br><span class="line"><span class="selector-tag">changedTouches</span>：最近一次触发该事件的手指信息</span><br><span class="line"><span class="selector-tag">touchend</span>时，<span class="selector-tag">touches</span>与<span class="selector-tag">targetTouches</span>信息会被删除，<span class="selector-tag">changedTouches</span>保存的最后一次的信息，最好用于计算手指信息</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数信息(changedTouches[0])</span></span><br><span class="line"><span class="selector-tag">clientX</span>、<span class="selector-tag">clientY</span>在显示区的坐标</span><br><span class="line"><span class="selector-tag">target</span>：当前元素</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件响应顺序</span></span><br><span class="line"><span class="selector-tag">ontouchstart</span>  &gt; <span class="selector-tag">ontouchmove</span>  &gt; <span class="selector-tag">ontouchend</span> &gt; <span class="selector-tag">onclick</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下支持winphone 8</span></span><br><span class="line"><span class="selector-tag">MSPointerDown</span>——当手指触碰屏幕时候发生。不管当前有多少只手指</span><br><span class="line"><span class="selector-tag">MSPointerMove</span>——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用<span class="selector-tag">css</span>的<span class="selector-tag">html</span>&#123;<span class="attribute">-ms-touch-action</span>: none;&#125;可以阻止默认情况的发生：阻止页面滚动</span><br><span class="line"><span class="selector-tag">MSPointerUp</span>——当手指离开屏幕时触发</span><br></pre></td></tr></table></figure><h4 id="移动端click屏幕产生200-300ms的延时响应"><a href="#移动端click屏幕产生200-300ms的延时响应" class="headerlink" title="移动端click屏幕产生200-300ms的延时响应"></a>移动端click屏幕产生200-300ms的延时响应</h4><figure class="highlight lsl"><figcaption><span>lang:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">说明：移动设备上的web网页是有<span class="number">300</span>ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。</span><br><span class="line"></span><br><span class="line">以下是历史原因，来源一个公司内一个同事的分享：</span><br><span class="line"><span class="number">2007</span>年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</span><br><span class="line"></span><br><span class="line">双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</span><br><span class="line"></span><br><span class="line">原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=<span class="string">"#"</span>&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为<span class="number">300</span>毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要<span class="number">300</span>ms后才生效，也就间接导致影响其他业务逻辑的处理。</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案：</span></span><br><span class="line">fastclick可以解决在手机上点击事件的<span class="number">300</span>ms延迟</span><br><span class="line">zepto的<span class="section">touch</span>模块，tap事件也是为了解决在click的延迟问题</span><br></pre></td></tr></table></figure><h4 id="Rentina显示屏原理及设计方案"><a href="#Rentina显示屏原理及设计方案" class="headerlink" title="Rentina显示屏原理及设计方案"></a>Rentina显示屏原理及设计方案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。</span><br><span class="line">在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统<span class="selector-tag">PC</span>的2倍。</span><br><span class="line">那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2</span><br><span class="line"></span><br><span class="line">//例如图片宽高为：200px*200px，那么写法如下</span><br><span class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">background-size</span>:<span class="number">100px</span> <span class="number">100px</span>;&#125;</span><br><span class="line">//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px</span><br><span class="line"><span class="selector-class">.css</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</span><br><span class="line"></span><br><span class="line">//image-set设计Rentina背景图</span><br><span class="line"><span class="selector-tag">image-set</span>,<span class="selector-tag">webkit</span>私有属性，也是<span class="selector-tag">CSS4</span>的属性，为解决<span class="selector-tag">Rentina</span>屏幕下的图像而生。</span><br><span class="line"><span class="selector-class">.css</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(images/bg.jpg) no-repeat center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-image-set</span>(</span><br><span class="line">    url(images/bg.jpg) <span class="number">1</span>x,     //支持image-set普通屏</span><br><span class="line">    url(images/bg-2x.jpg) 2x); //支持image-set的Rentinan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="点击元素产生背景或边框怎么去掉"><a href="#点击元素产生背景或边框怎么去掉" class="headerlink" title="点击元素产生背景或边框怎么去掉"></a>点击元素产生背景或边框怎么去掉</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；</span><br><span class="line">//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；</span><br><span class="line">//winphone系统,点击标签产生的灰色半透明背景，能通过设置<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span>去掉；</span><br><span class="line">//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签</span><br><span class="line">a,button,input,textarea &#123; </span><br><span class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0); </span><br><span class="line">    -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符</span><br><span class="line">&#125;   </span><br><span class="line">// 也可以 </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">* &#123; <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0); &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">//winphone下</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="美化表单元素"><a href="#美化表单元素" class="headerlink" title="美化表单元素"></a>美化表单元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//一、使用appearance改变webkit浏览器的默认外观</span><br><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">select</span> &#123; <span class="attribute">-webkit-appearance</span>:none; <span class="attribute">appearance</span>: none; &#125;</span><br><span class="line"></span><br><span class="line">//二、winphone下，使用伪元素改变表单元素默认外观</span><br><span class="line">//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰</span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123; <span class="attribute">display</span>:none; &#125;</span><br><span class="line"></span><br><span class="line">//2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">::-ms-check</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">::-ms-check</span> &#123; <span class="attribute">display</span>:none; &#125;</span><br><span class="line"></span><br><span class="line">//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">::-ms-clear</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=tel]</span><span class="selector-pseudo">::-ms-clear</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=number]</span><span class="selector-pseudo">::-ms-clear</span> &#123; <span class="attribute">display</span>:none; &#125;</span><br></pre></td></tr></table></figure><h4 id="移动端字体单位font-size选择px还是rem"><a href="#移动端字体单位font-size选择px还是rem" class="headerlink" title="移动端字体单位font-size选择px还是rem"></a>移动端字体单位font-size选择px还是rem</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如需适配多种移动设备，建议使用rem。以下为参考值：</span><br><span class="line">html &#123; font-size: 62.5%; &#125;   //10*16 = 62.5%</span><br><span class="line">//设置12px字体   这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">font-size</span>:<span class="number">1.2rem</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="超实用的CSS样式"><a href="#超实用的CSS样式" class="headerlink" title="超实用的CSS样式"></a>超实用的CSS样式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//去掉webkit的滚动条——display: none;</span><br><span class="line">//其他参数</span><br><span class="line">::-webkit-scrollba //滚动条整体部分</span><br><span class="line">::-webkit-scrollbar-thumb   //滚动条内的小方块</span><br><span class="line">::-webkit-scrollbar-track   //滚动条轨道</span><br><span class="line">::-webkit-scrollbar-button  //滚动条轨道两端按钮</span><br><span class="line">::-webkit-scrollbar-track-piece  //滚动条中间部分，内置轨道</span><br><span class="line">::-webkit-scrollbar-corner       //边角，两个滚动条交汇处</span><br><span class="line">::-webkit-resizer            //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</span><br><span class="line"></span><br><span class="line">// 禁止长按链接与图片弹出菜单</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span> &#123; <span class="attribute">-webkit-touch-callout</span>: none &#125;    </span><br><span class="line"></span><br><span class="line">// 禁止ios和android用户选中文字</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;<span class="attribute">-webkit-user-select</span>:none; <span class="attribute">user-select</span>: none; &#125;</span><br><span class="line"></span><br><span class="line">// 改变输入框placeholder的颜色值</span><br><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="comment">/* WebKit browsers */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#999</span>; &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123; <span class="attribute">color</span>:<span class="number">#999</span>; &#125;</span><br><span class="line"></span><br><span class="line">// android上去掉语音输入按钮</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;<span class="attribute">display</span>: none&#125;</span><br><span class="line"></span><br><span class="line">// 阻止windows Phone的默认触摸事件</span><br><span class="line"><span class="comment">/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/</span></span><br><span class="line">html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件</span><br></pre></td></tr></table></figure><h4 id="取消input在ios下，输入的时候英文首字母的默认大写"><a href="#取消input在ios下，输入的时候英文首字母的默认大写" class="headerlink" title="取消input在ios下，输入的时候英文首字母的默认大写"></a>取消input在ios下，输入的时候英文首字母的默认大写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="手机拍照和上传图片"><a href="#手机拍照和上传图片" class="headerlink" title="手机拍照和上传图片"></a>手机拍照和上传图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"images/*"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"video/*"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="屏幕旋转的事件和样式"><a href="#屏幕旋转的事件和样式" class="headerlink" title="屏幕旋转的事件和样式"></a>屏幕旋转的事件和样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//JS处理</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">orientInit</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> orientChk = <span class="built_in">document</span>.documentElement.clientWidth &gt; <span class="built_in">document</span>.documentElement.clientHeight?<span class="string">'landscape'</span>:<span class="string">'portrait'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(orientChk ==<span class="string">'lapdscape'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里是横屏下需要执行的事件</span></span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里是竖屏下需要执行的事件</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">orientInit();</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'onorientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span>?<span class="string">'orientationchange'</span>:<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    setTimeout(orientInit, 100);</span></span><br><span class="line"><span class="actionscript">&#125;,<span class="literal">false</span>)    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">//CSS处理</span></span><br><span class="line"><span class="undefined">//竖屏时样式</span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> all and (orientation:portrait)&#123;   &#125;</span></span><br><span class="line"><span class="undefined">//横屏时样式</span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> all and (orientation:landscape)&#123;   &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="audio元素和video元素在ios和andriod中无法自动播放"><a href="#audio元素和video元素在ios和andriod中无法自动播放" class="headerlink" title="audio元素和video元素在ios和andriod中无法自动播放"></a>audio元素和video元素在ios和andriod中无法自动播放</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//音频，写法一</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"music/bg.mp3"</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span>你的浏览器还不支持哦<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//音频，写法二</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/bg.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"music/bg.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    优先播放音乐bg.ogg，不支持在播放bg.mp3</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//JS绑定自动播放（操作window时，播放音乐）</span></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">window</span>).one(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">    music.play();</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//微信下兼容处理</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    music.play();</span></span><br><span class="line"><span class="actionscript">&#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//小结</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="重力感应事件"><a href="#重力感应事件" class="headerlink" title="重力感应事件"></a>重力感应事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运用HTML5的deviceMotion，调用重力感应事件</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.DeviceMotionEvent)&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'devicemotion'</span>, deviceMotionHandler, <span class="literal">false</span>)</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speed = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> x = y = z = lastX = lastY = lastZ = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deviceMotionHandler</span>(<span class="params">eventData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> acceleration = event.accelerationIncludingGravity;</span><br><span class="line">    x = acceleration.x;</span><br><span class="line">    y = acceleration.y; </span><br><span class="line">    z = acceleration.z;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(x-lastX)&gt;speed || <span class="built_in">Math</span>.abs(y-lastY)&gt;speed || <span class="built_in">Math</span>.abs(z-lastZ)&gt;speed )&#123;</span><br><span class="line">        <span class="comment">//这里是摇动后要执行的方法 </span></span><br><span class="line">        yaoAfter();</span><br><span class="line">    &#125;</span><br><span class="line">    lastX = x;</span><br><span class="line">    lastY = y;</span><br><span class="line">    lastZ = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yaoAfter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整"><a href="#微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整" class="headerlink" title="微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整"></a>微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(WeixinJSBridge) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>, &#123; <span class="string">'fontSize'</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        WeixinJSBridge.invoke(<span class="string">'setFontSizeCallback'</span>, &#123; <span class="string">'fontSize'</span>:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小</span></span><br><span class="line">body &#123; -webkit-text-size-adjust:<span class="number">100</span>%!important; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最好的解决方案：最好使用rem或百分比布局</span></span><br></pre></td></tr></table></figure><h4 id="定位的坑"><a href="#定位的坑" class="headerlink" title="定位的坑"></a>定位的坑</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//fixed定位</span><br><span class="line">//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</span><br><span class="line">//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</span><br><span class="line">//3.ios4下不支持position:fixed</span><br><span class="line">//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">               .....</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"iscroll.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> myscroll;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">loaded</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        myscroll=<span class="keyword">new</span> iScroll(<span class="string">"wrapper"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>,loaded,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//position定位</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//Android下弹出软键盘弹出时，影响absolute元素定位</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//解决方案:</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> ua = navigator.userAgent.indexOf(<span class="string">'Android'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(ua&gt;<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.ipt'</span>).on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.css'</span>).css(&#123;<span class="string">'visibility'</span>:<span class="string">'hidden'</span>&#125;)</span></span><br><span class="line"><span class="actionscript">    &#125;).on(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.css'</span>).css(&#123;<span class="string">'visibility'</span>:<span class="string">'visible'</span>&#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="播放视频不全屏"><a href="#播放视频不全屏" class="headerlink" title="播放视频不全屏"></a>播放视频不全屏</h4><figure class="highlight xml"><figcaption><span>lang:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.ios7+支持自动播放</span></span><br><span class="line"><span class="comment">2.支持Airplay的设备（如：音箱、Apple TV)播放</span></span><br><span class="line"><span class="comment">x-webkit-airplay="true" </span></span><br><span class="line"><span class="comment">3.播放视频不全屏</span></span><br><span class="line"><span class="comment">webkit-playsinline="true" </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">x-webkit-airplay</span>=<span class="string">"true"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">autoplay</span> <span class="attr">src</span>=<span class="string">"http://"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS判断设备"><a href="#JS判断设备" class="headerlink" title="JS判断设备"></a>JS判断设备</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deviceType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">var</span> agent = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>, <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>, <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len,len = agent.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ua.indexOf(agent[i])&gt;<span class="number">0</span>)&#123;         </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deviceType();</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    deviceType();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="JS判断微信浏览器"><a href="#JS判断微信浏览器" class="headerlink" title="JS判断微信浏览器"></a>JS判断微信浏览器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWeixin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">'micromessenger'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="android-4-x-bug"><a href="#android-4-x-bug" class="headerlink" title="android 4.x bug"></a>android 4.x bug</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写</span></span><br><span class="line"><span class="comment">//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分</span></span><br><span class="line"><span class="comment">//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色</span></span><br><span class="line"><span class="comment">//4.android无法同时播放多音频audio</span></span><br></pre></td></tr></table></figure><h4 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.css</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开启硬件加速"><a href="#开启硬件加速" class="headerlink" title="开启硬件加速"></a>开启硬件加速</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。</span><br><span class="line"><span class="selector-class">.css</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.禁止使用iframe（阻塞父文档onload事件）</span></span><br><span class="line"><span class="comment">//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</span></span><br><span class="line"><span class="comment">//使用CSS3代码代替JS动画；</span></span><br><span class="line"><span class="comment">//开启GPU加速；</span></span><br><span class="line"><span class="comment">//使用base64位编码图片(不小图而言，大图不建议使用)</span></span><br><span class="line">    <span class="comment">// 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于：</span></span><br><span class="line">    <span class="comment">//1.减少HTTP请求；</span></span><br><span class="line">    <span class="comment">//2.避免文件跨域；</span></span><br><span class="line">    <span class="comment">//3.修改及时生效；</span></span><br></pre></td></tr></table></figure><h4 id="腾讯方案"><a href="#腾讯方案" class="headerlink" title="腾讯方案"></a>腾讯方案</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> autoScale = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ratio = <span class="number">320</span>/<span class="number">504</span>,   <span class="comment">//这是设计稿的宽高比（504是Iphone的高度去掉标题栏高度）</span></span><br><span class="line">        winW = <span class="built_in">document</span>.getElement.clientWidth,</span><br><span class="line">        winH = <span class="built_in">document</span>.getElement.clientHeight,</span><br><span class="line">        ratio2 = winW/winH,</span><br><span class="line">        scale;</span><br><span class="line">    <span class="keyword">if</span>(ratio&lt;ratio2)&#123;</span><br><span class="line">        scale = (winH/<span class="number">504</span>).toString().substring(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        scale = (winW/<span class="number">320</span>).toString().substring(<span class="number">0</span>, <span class="number">6</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> cssText = <span class="string">'-webkit-transform: scale('</span>+scale+<span class="string">');-webkit-transform-origin: top; opacity:1;'</span>  </span><br><span class="line">    $(<span class="string">'.wrap'</span>).attr(<span class="string">'style'</span>, cssText);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.clientWidth/<span class="built_in">document</span>.documentElement.clientHeight !== <span class="number">320</span>/<span class="number">504</span>)&#123;</span><br><span class="line">        autoScale();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">'.page'</span>).css(&#123;<span class="string">'opacity'</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">300</span>)  <span class="comment">//添加一定时长以确保宽高获取正确</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'onorientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span>?<span class="string">'orientationchange'</span>:<span class="string">'resize'</span>, autoScale, <span class="literal">false</span>)&#123;</span><br><span class="line">        detectOrientatioin();</span><br><span class="line">&#125;   <span class="comment">//切换横竖屏</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detectOrientatioin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.orientation==<span class="number">180</span> || <span class="built_in">window</span>.orientation==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//竖屏</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.orientation==<span class="number">90</span> || <span class="built_in">window</span>.orientation==<span class="number">-90</span>)&#123;</span><br><span class="line">        <span class="comment">//横屏</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="张叶兮的群"><a href="#张叶兮的群" class="headerlink" title="张叶兮的群"></a>张叶兮的群</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有问必答社区，懂得人来，自己的群以前闹着玩弄得</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> uname = name || <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> come = <span class="built_in">unescape</span>(<span class="string">"%u963F%u91CC%u4EBA%u521B%u5EFA%u7684%u524D%u7AEF%u5171%u4EAB%u5C0F%u7FA4%2Cwill%20join%20us%3F"</span>);</span><br><span class="line"><span class="keyword">let</span> mima = <span class="string">"62017~72017~32017~12017~42017~42017~62017~52017~5"</span>;</span><br><span class="line"><span class="keyword">let</span>   js = mima.split(<span class="string">"2017~"</span>).reverse().join(<span class="string">""</span>);<span class="comment">//will you?</span></span><br><span class="line">    <span class="keyword">return</span> come+<span class="string">" "</span>+uname+<span class="string">" come on~ "</span>+js;</span><br><span class="line">&#125;)(<span class="string">"friends"</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>根据多方资料整理 欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> h5 </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析linux chmod命令</title>
      <link href="/posts/82735d62/"/>
      <url>/posts/82735d62/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一同事问我怎么快速的给文件夹加密，我寻思着这货又收集什么见不得人的机密了，给文件夹或者文件加密的方式有很多，要钱的不要钱的就说你想要什么样的吧。得，整了半天给我来句只要别人没权限打开就成，那这不好办么，直接设个权限不就完事了么，暂时糊弄糊弄一些生瓜蛋子做到打不开就死心还是可以的。最近正好遇到一些涉及到权限问题的事，就在这捋一捋，认识认识新词。<br>linux有个命令叫<code>chmod</code>，就是更改权限的作用。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-cfvR] [--help] [--version]  mode  file...</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>说明</strong> :<br>Linux/Unix 的档案存取权限用户群体分为三级 : <code>拥有者</code>、<code>群组</code>、<code>其他</code>。利用 chmod 可以控制档案如何被他人所存取。<br>mode : 权限设定字串，让你看写啊删啊执行啊都在这设置<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">ugoa...</span>][<span class="symbol">[+-=</span>][<span class="string">rwxX</span>]...][,...]</span><br></pre></td></tr></table></figure></p><p>细细表来上面都是些什么东东：</p><blockquote><p>u:表示该档案的拥有者<br>g: 表示与该档案的拥有者属于同一个群体(group)者<br>o :表示其他以外的人<br>a: 表示这三者皆是<br>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。<br>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。<br>-c : 若该档案权限确实已经更改，才显示其更改动作<br>-f : 若该档案权限无法被更改也不要显示错误讯息<br>-v : 显示权限变更的详细资料<br>-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>–help : 显示辅助说明<br>–version : 显示版本</p></blockquote><p><strong>范例</strong> :<br>将老同事的 xx.avi 设为所有人皆可读取（不厚道的笑了）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> <span class="selector-tag">ugo</span>+<span class="selector-tag">r</span> <span class="selector-tag">xx</span><span class="selector-class">.avi</span></span><br></pre></td></tr></table></figure></p><p>另一种写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> <span class="selector-tag">a</span>+<span class="selector-tag">r</span> <span class="selector-tag">xx</span><span class="selector-class">.avi</span></span><br></pre></td></tr></table></figure><p>现在将老同事的 xx.avi 与 some.jpg 权限设为他与其所属同一个群体者可写入，比如做一些文本编辑图片处理啊什么的，但其他以外的人则不可写入，但是他们可以读取的到。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> <span class="selector-tag">ug</span>+<span class="selector-tag">w</span>,<span class="selector-tag">o-w</span> <span class="selector-tag">file1</span><span class="selector-class">.txt</span> <span class="selector-tag">file2</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>将 ex1.py 设定为只有该档案拥有者可以执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> <span class="selector-tag">u</span>+<span class="selector-tag">x</span> <span class="selector-tag">ex1</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><p>将目前目录下的所有档案与子目录皆设为任何人可读取</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R <span class="keyword">a</span>+r *</span><br></pre></td></tr></table></figure><p>此外chmod也可以用数字来表示权限如 <code>chmod 777 file</code> ，这是更简便更有逼格的写法了，懂得人自然会心一笑，不懂得人一脸懵X。<br>语法为：<code>chmod ugo xx.file</code><br>其中<code>u</code>,<code>g</code>,<code>o</code>各为一个数字，分别表示User、Group、及Other的权限。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  u  -   g  -   o</span><br><span class="line">r<span class="number">4</span>w<span class="number">2</span><span class="keyword">x</span><span class="number">1</span>-r<span class="number">4</span>w<span class="number">2</span><span class="keyword">x</span><span class="number">1</span>-r<span class="number">4</span>w<span class="number">2</span><span class="keyword">x</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>心法都在这了，领走闭关练练</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r=<span class="number">4</span> (二进制 <span class="number">100</span> )，w=<span class="number">2</span> (二进制 <span class="number">010</span> )，x=<span class="number">1</span> (二进制 <span class="number">001</span> )</span><br><span class="line">若要rwx属性则<span class="number">4</span>+<span class="number">2</span>+<span class="number">1</span>=<span class="number">7</span>；</span><br><span class="line">若要rw-属性则<span class="number">4</span>+<span class="number">2</span>=<span class="number">6</span>；</span><br><span class="line">若要r-x属性则<span class="number">4</span>+<span class="number">1</span>=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>给个栗子：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="keyword">a</span>=rwx <span class="built_in">file</span></span><br><span class="line">等同于</span><br><span class="line">chmod <span class="number">777</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod ug=rwx,o=x <span class="built_in">file</span></span><br><span class="line">等同于</span><br><span class="line">chmod <span class="number">771</span> <span class="built_in">file</span></span><br></pre></td></tr></table></figure><p>若用<code>chown 4755 filename</code>可使此程式具有root的权限<br>指令名称 : <code>chown</code><br>使用权限 : <code>root</code></p><p>使用方式 </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure><p><strong>说明</strong> : Linux/Unix 是多人多工作业系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才有这样的权限。</p><p><code>user :</code> 新的档案拥有者的使用者 IDgroup :<br>新的档案拥有者的使用者群体(group)-c :<br>若该档案拥有者确实已经更改，才显示其更改动作-f :<br>若该档案拥有者无法被更改也不要显示错误讯息-h :<br>只对于连结(link)进行变更，而非该 link 真正指向的档案-v :<br>显示拥有者变更的详细资料-R :<br>对目前目录下的所有档案与子目录进行相同的拥有者变更(即以递回的方式逐个变更)<br><code>–help</code> : 显示辅助说明<br><code>–version</code> : 显示版本</p><p><strong>举个栗子</strong> :<br>将档案 file1.txt 的拥有者设为 users 群体的使用者 tommy :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chown</span> <span class="selector-tag">tommy</span><span class="selector-pseudo">:users</span> <span class="selector-tag">file1</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>将目前目录下的所有档案与子目录的拥有者皆设为 users 群体的使用者 dannie(ahaahaha) :</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">chmod</span> <span class="literal">-</span><span class="comment">R</span> <span class="comment">dannie:users</span> <span class="comment">*</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">(600)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">只有属主有读写权限。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rw</span> <span class="literal">-</span><span class="comment">r</span><span class="literal">-</span> <span class="literal">-</span><span class="comment">r</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">(644)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">只有属主有读写权限；而属组用户和其他用户只有读权限。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rwx</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">(700)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">只有属主有读、写、执行权限。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rwx</span> <span class="comment">r</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">r</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">(755)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rwx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">x</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">x</span> <span class="comment">(711)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">属主有读、写、执行权限；而属组用户和其他用户只有执行权限。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rw</span><span class="literal">-</span> <span class="comment">rw</span><span class="literal">-</span> <span class="comment">rw</span><span class="literal">-</span> <span class="comment">(666)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">所有用户都有文件读、写权限。这种做法不可取。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">rwx</span> <span class="comment">rwx</span> <span class="comment">rwx</span> <span class="comment">(777)</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">所有用户都有读、写、执行权限。更不可取的做法</span></span><br></pre></td></tr></table></figure><p>以下是对目录的两个普通设定:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">d</span> <span class="string">rwx</span> <span class="meta">---</span> <span class="meta">---</span> <span class="string">(700)</span>   <span class="string">只有属主可在目录中读、写。</span></span><br><span class="line"><span class="string">d</span> <span class="string">rwx</span> <span class="string">r-x</span> <span class="string">r-x</span> <span class="string">(755)</span>  <span class="string">所有用户可读该目录，但只有属主才能改变目录中的内容</span></span><br><span class="line"><span class="string">suid的代表数字是4，比如4755的结果是-rws</span> <span class="string">r-x</span> <span class="string">r-x</span></span><br><span class="line"><span class="string">sgid的代表数字是2，比如6755的结果是-rws</span> <span class="string">r-s</span> <span class="string">r-x</span></span><br><span class="line"><span class="string">sticky位代表数字是1，比如7755的结果是-rws</span> <span class="string">r-s</span> <span class="string">r-t</span></span><br></pre></td></tr></table></figure><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> chmod </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础核心梳理之Video</title>
      <link href="/posts/ad164cf7/"/>
      <url>/posts/ad164cf7/</url>
      
        <content type="html"><![CDATA[<p>最近在做H5的播放器video，随带着查查资料研究下flash工具和H5技术标准现在的情况。相比较于flash,H5在越来越明朗的移动市场上更具有光明的前景，youtube、apple的无flash产品线似乎已经引领了某种趋势，即使在pc上随着现代浏览器厂商的对H5的支持越来越全面，H5也能占据一席之地。原生的api video audio canvas等普及，H5这个新技术标准会把web动画视频游戏领域带入另一个高潮。<br><a id="more"></a><br><blockquote><p>Adobe太封闭了，产品100%私有。<br>Flash影片大多遵循H.264格式，这种格式苹果是支持的；至于没有Flash游戏，不足以错过APP Store里精彩的游戏人生。<br>一旦支持Flash，苹果移动设备的稳定性、安全性会大大降低。<br>Flash非常耗电。<br>想让Flash适应触控设计，你得重写代码，还不如用更先进的HTML5。<br>最后也是最重要的，完全依赖第三方软件开发，会延误我们所有人使用其他产品的新功能。</p><footer><strong>乔布斯 《Flash之我见》</strong></footer></blockquote></p><p>上面整理了乔帮主怼flash的文章的截取，这里就知道为什么flash会衰落，HTML5会兴起的原因了，后来谷歌帝国、脸书帝国、油管帝国都在慢慢的嫌弃flash的道路上越走越远，移动端的flash的停更说明连Adobe自己也看不下去这个产品了，这个现象就像多米诺骨牌，让我们这些当年的吃瓜群众纷纷侧目，怀疑某个兴盛的时代是不是说变就变了。我感觉到国际巨头互联网企业想推一个产品而且是正确的时代产品，这个产品就是这个领域的未来。<br>那到底啥是flash,Flash是一种交互式矢量图与Web动画标准，因为体积小、易于传输、不失真等优点，契合2000年前后小带宽的互联网环境，迅速在全球崛起，简直就是时代骄子，横跨影视、游戏、广告领域，说是霸主简直都是在污蔑他的影响力，市场占有率几乎100%，然而一个朝代故步自封，不思进取也会被新的王朝替代，所以flash最终被H5还是其他的产品挤下神坛都是迟早的事，就看谁能在flash的棺材班上钉上最后一颗钉子。<br>那么废话结束了，唉，还是要学点东西才能赶上他们眼里的旧时代，这日子没法过了。<br>先列个video的基础api梳理，毕竟是最近做的事，以后专门再开个canvas专题、websocket专题把踩坑记录心得拿上来记一记。</p><h4 id="Video-对象属性"><a href="#Video-对象属性" class="headerlink" title="Video 对象属性"></a>Video 对象属性</h4><p><code>src</code> 设置或返回视频的 src 属性的值。</p><p><code>height</code> 设置或返回视频的 height 属性的值。</p><p><code>width</code> 设置或返回视频的 width 属性的值。</p><p><code>controls</code> 设置或返回视频是否应该显示控件（比如播放/暂停等）。</p><p><code>loop</code> 设置或返回视频是否应在结束时再次播放。</p><p><code>autoplay</code> 设置或返回是否在就绪（加载完成）后随即播放视频。</p><p><code>poster</code> 设置或返回视频的 poster 属性的值,不播放视频时显示的图片。</p><p><code>muted</code> 设置或返回是否关闭声音。</p><p><code>defaultMuted</code> 设置或返回视频默认是否静音。</p><p><code>ended</code> 返回视频的播放是否已结束。</p><p><code>volume</code> 设置或返回视频的音量。</p><p><code>defaultPlaybackRate</code> 设置或返回视频的默认播放速度。</p><p><code>playbackRate</code> 设置或返回视频播放的速度。</p><p><code>preload</code> 设置或返回视频的 preload 属性的值，提前加载视频 none auto metadata。</p><p><code>duration</code> 返回视频的长度（以秒计）。</p><p><code>currentTime</code> 设置或返回视频中的当前播放位置（以秒计）。</p><p><code>currentSrc</code> 返回当前视频的 URL。</p><p><code>readyState</code> 返回视频当前的就绪状态。</p><p><code>networkState</code> 返回视频的当前网络状态。</p><p><code>paused</code> 设置或返回视频是否暂停。</p><p><code>error</code> 返回表示视频错误状态的 MediaError 对象 只读。</p><p><code>seeking</code> 返回用户当前是否正在视频中进行查找。</p><p><code>played</code> 返回表示视频已播放部分的 TimeRanges 对象。</p><p><code>audioTracks</code> 返回表示可用音频轨道的 AudioTrackList 对象。</p><p><code>buffered</code> 返回表示视频已缓冲部分的 TimeRanges 对象。</p><p><code>controller</code> 返回表示视频当前媒体控制器的 MediaController 对象。</p><p><code>crossOrigin</code> 设置或返回视频的 CORS 设置。</p><p><code>mediaGroup</code> 设置或返回视频所属媒介组合的名称。</p><p><code>seekable</code> 返回表示视频可寻址部分的 TimeRanges 对象。</p><p><code>startDate</code> 返回表示当前时间偏移的 Date 对象。</p><p><code>textTracks</code> 返回表示可用文本轨道的 TextTrackList 对象。</p><p><code>videoTracks</code> 返回表示可用视频轨道的 VideoTrackList 对象。</p><h4 id="Video-对象方法"><a href="#Video-对象方法" class="headerlink" title="Video 对象方法"></a>Video 对象方法</h4><p>方法 描述</p><p><code>play()</code> 开始播放视频。</p><p><code>pause()</code> 暂停当前播放的视频。</p><p><code>addTextTrack()</code> 向视频添加新的文本轨道。</p><p><code>canPlayType()</code> 检查浏览器是否能够播放指定的视频类型。返回空串或 “maybe” “probably”</p><p><code>load()</code> 重新加载视频元素。</p><h4 id="Video-事件"><a href="#Video-事件" class="headerlink" title="Video 事件"></a>Video 事件</h4><p><code>play</code><br>即将开始播放，当执行了play方法时触发，或数据下载后元素被设为autoplay属性</p><p><code>abort</code><br>浏览器在下载完全部媒体数据之前中止获取媒体数据，但是并不是由错误引起的</p><p><code>pause</code><br>播放暂停，当执行了pause方式时触发</p><p><code>waiting</code><br>播放过程由于得不到下一帧而暂停播放（例如下一帧尚未加载完毕），但很快就能够得到下一帧</p><p><code>progress</code><br>浏览器正在获取媒体数据</p><p><code>loadeddata</code><br>事件在当前帧的数据加载完成且还没有足够的数据播放视频/音频（audio/video）的下一帧时触发。</p><p><code>error</code><br>获取媒体数据过程中出错</p><p><code>loadedmetadata</code><br>浏览器获取完毕媒体的时间长和字节数</p><p><code>timeupdate</code><br>由于播放位置被改变，可能是播放过程中的自然改变，也可能是被人为的改变，或由于播放不能连续而发生的跳变</p><p><code>ended</code><br>播放结束后停止播放</p><p><code>canplay</code><br>浏览器能够播放媒体，但估计以当前的播放速率不能直接播放完毕，播放期间需要缓冲</p><p><code>canplaythrough</code><br>浏览器能够播放媒体，而且以当前播放速率能够将媒体播放完毕，不再需要进行缓冲</p><p><code>volumechange</code><br>volume属性（音量）被改变或muted属性（静音状态）被改变</p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> video </tag>
            
            <tag> 全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html Css编码规范心得</title>
      <link href="/posts/e978f84e/"/>
      <url>/posts/e978f84e/</url>
      
        <content type="html"><![CDATA[<p>Css编码规范 Html编码规范 Css类名约定…<br><a id="more"></a></p><h4 id="Css编码规范"><a href="#Css编码规范" class="headerlink" title="Css编码规范"></a>Css编码规范</h4><p><strong>总结笔记</strong></p><blockquote><p>1.左花括号前添加空格，右花括号单独成行，声明 : 后插入空格<br>2.为选择器分组时，将单独的选择器单独放在一行<br>3.小写字母加连字符（不是下划线，也不是驼峰命名法）<br>4.需在js中使用的类名以 J_ 开头，接“大驼峰”命名，这类的class不能出现在CSS文件中<br>5.排列顺序<br>定位（position、left、right、top、bottom、z-index）<br>盒子模型（display、float、width、height、margin、padding、border、border-radius）<br>排印（font、color、background、line-height、text-align</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"J_UserType_Email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.selector</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.mod-example</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 定位 */</span></span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  right: 0;</span></span><br><span class="line"><span class="undefined">  bottom: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  z-index: 100;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 盒模型 */</span></span></span><br><span class="line"><span class="undefined">  display: block;</span></span><br><span class="line"><span class="undefined">  float: right;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  margin: 15px auto;</span></span><br><span class="line"><span class="undefined">  padding: 10px 15px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 排印 */</span></span></span><br><span class="line"><span class="undefined">  font: normal 13px "Helvetica Neue", sans-serif;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Html编码规范"><a href="#Html编码规范" class="headerlink" title="Html编码规范"></a>Html编码规范</h4><blockquote><p>1.使用简单的doctype<br>2.统一使用utf-8<br>3.html元素上指定lang属性<br>4.指定什么版本的IE渲染页面<br>5.引入css、js不需要指明type<br>6.缩进使用两个空格<br>7.标签属性名统一小写<br>8.属性引号用双引号<br>9.Boolean 属性指不需要声明取值的属性<br>10.自定义属性必须以 data- 为前缀<br>11.HTML属性顺序按class、id、name、data-*…顺序出现<br>12.不要在自动闭合标签的结尾处使用斜线<br>13.id命名，当作为 JS 钩子使用 时，以 J_ 为前缀，后面接大驼峰命名<br>14.html代码中不能出现任何关于业务相关敏感信息的注释</p></blockquote><p>建议结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"example.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"..."</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">data-modal</span>=<span class="string">"toggle"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Css类名约定-建议"><a href="#Css类名约定-建议" class="headerlink" title="Css类名约定[建议]"></a>Css类名约定[建议]</h4><p>个人总结，利用约定规则进行css命名空间冲突解决</p><p><strong>一级类名</strong><br>全局<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="string">[PROJECT]</span>-g-<span class="string">[module]</span></span><br></pre></td></tr></table></figure></p><p>页面<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="string">[PROJECT]</span>-<span class="string">[page]</span>-<span class="string">[module]</span></span><br></pre></td></tr></table></figure></p><p>页面组件<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="string">[PRJECT]</span>-<span class="string">[page]</span>-<span class="string">[module]</span></span><br></pre></td></tr></table></figure></p><p>其中PRJECT为项目标志，g为全局标志，page为页面标志，module为特定模块</p><p>项目为YT，header模块公共</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.YT-g-header</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>项目为YT，header不公共，且header里有多种情况，这时候就需要分页面去做<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.YT-index-header</span><span class="selector-class">.YT-index-mobile</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>二级类名</strong><br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[module]</span>-<span class="string">[detail]</span></span><br></pre></td></tr></table></figure></p><p>其中module为模块标志，detail为细节模块标志，<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.header[<span class="keyword">Top</span>,<span class="keyword">Bottom</span>,left,right,Nav...] </span><br><span class="line">.conter[<span class="keyword">Top</span>,<span class="keyword">Bottom</span>,<span class="keyword">Left</span>,<span class="keyword">Right</span>,Mid...]  </span><br><span class="line">.footer[<span class="keyword">Top</span>,<span class="keyword">Bottom</span>,left,right...]</span><br></pre></td></tr></table></figure></p><p>更多情况<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="string">[module]</span>-<span class="string">[detail]</span>.<span class="string">[detailA,detailB,detailC...]</span></span><br></pre></td></tr></table></figure></p><p><strong>三级四级类名</strong><br>[detail] 只要同级别之间不重复命名即可</p><p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-g-header YT-index-header YT-index-mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-g-header YT-index-trade"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-index-conter YT-index-mobile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"conter-top dog none"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"conter-top cat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"spat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desp"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"conter-mid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"conter-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-index-conter YT-index-trade"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-g-footer YT-index-mobile"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"YT-g-footer YT-index-trade"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>pub-g.css</code>一旦定下来，非common的元素类不要写进去，有特殊写在当前page的css里 通过增加.[PROJECT]-[PAGE]-[MOD]即可覆盖改写或者增加当前样式或者子元素样式。</p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础核心梳理之常用事件</title>
      <link href="/posts/64c6bd1d/"/>
      <url>/posts/64c6bd1d/</url>
      
        <content type="html"><![CDATA[<p>这里整理了一般事件、页面相关事件、表单相关事件、滚动字幕事件、滚动字幕事件、编辑事件、数据绑定的相关api,仅供参考查阅。<br><a id="more"></a><br>一般事件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onClick</span>     鼠标点击事件，多用在某个对象控制的范围内的鼠标点击</span><br><span class="line"><span class="literal">on</span>DblClick  鼠标双击事件 </span><br><span class="line"><span class="literal">on</span>MouseDown 鼠标上的按钮被按下了 </span><br><span class="line"><span class="literal">on</span>MouseUp   鼠标按下后，松开时激发的事件 </span><br><span class="line"><span class="literal">on</span>MouseOver 当鼠标移动到某对象范围的上方时触发的事件 </span><br><span class="line"><span class="literal">on</span>MouseMove 鼠标移动时触发的事件 </span><br><span class="line"><span class="literal">on</span>MouseOut  当鼠标离开某对象范围时触发的事件 </span><br><span class="line"><span class="literal">on</span>KeyPress  当键盘上的某个键被按下并且释放时触发的事件.[注意:页面内必须有被聚焦的对象] </span><br><span class="line"><span class="literal">on</span>KeyDown   当键盘上某个按键被按下时触发的事件[注意:页面内必须有被聚焦的对象] </span><br><span class="line"><span class="literal">on</span>KeyUp     当键盘上某个按键被按放开时触发的事件[注意:页面内必须有被聚焦的对象]</span><br></pre></td></tr></table></figure></p><p>页面相关事件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onAbort</span>     图片在下载时被用户中断 </span><br><span class="line"><span class="literal">on</span>BeforeUnload  当前页面的内容将要被改变时触发的事件 </span><br><span class="line"><span class="literal">on</span>Error     捕抓当前页面因为某种原因而出现的错误，如脚本错误与外部数据引用的错误 </span><br><span class="line"><span class="literal">on</span>Load      页面内空完成传送到浏览器时触发的事件，包括外部文件引入完成 </span><br><span class="line"><span class="literal">on</span>Move      浏览器的窗口被移动时触发的事件 </span><br><span class="line"><span class="literal">on</span>Resize    当浏览器的窗口大小被改变时触发的事件 </span><br><span class="line"><span class="literal">on</span>Scroll    浏览器的滚动条位置发生变化时触发的事件 </span><br><span class="line"><span class="literal">on</span>Stop      浏览器的停止按钮被按下时触发的事件或者正在下载的文件被中断 </span><br><span class="line"><span class="literal">on</span>Unload    当前页面将被改变时触发的事件</span><br></pre></td></tr></table></figure></p><p>表单相关事件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onBlur</span>      当前元素失去焦点时触发的事件 [鼠标与键盘的触发均可] </span><br><span class="line"><span class="literal">on</span>Change    当前元素失去焦点并且元素的内容发生改变而触发的事件 [鼠标与键盘的触发均可] </span><br><span class="line"><span class="literal">on</span>Focus     当某个元素获得焦点时触发的事件 </span><br><span class="line"><span class="literal">on</span>Reset     当表单中RESET的属性被激发时触发的事件 </span><br><span class="line"><span class="literal">on</span>Submit    一个表单被递交时触发的事件</span><br></pre></td></tr></table></figure></p><p>滚动字幕事件<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onBounce</span>    在Marquee内的内容移动至Marquee显示范围之外时触发的事件 </span><br><span class="line"><span class="literal">on</span>Finish    当Marquee元素完成需要显示的内容后触发的事件 </span><br><span class="line"><span class="literal">on</span>Start     当Marquee元素开始显示内容时触发的事件</span><br></pre></td></tr></table></figure></p><p>编辑事件<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span>BeforeCopy    当页面当前的被选择内容将要复制到浏览者系统的剪贴板前触发的事件 </span><br><span class="line"><span class="keyword">on</span>BeforeCut     当页面中的一部分或者全部的内容将被移离当前页面[剪贴]并移动到浏览者的系统剪贴板时触发的事件 </span><br><span class="line"><span class="keyword">on</span>BeforeEditFocus   当前元素将要进入编辑状态 </span><br><span class="line"><span class="keyword">on</span>BeforePaste   内容将要从浏览者的系统剪贴板传送[粘贴]到页面中时触发的事件 </span><br><span class="line"><span class="keyword">on</span>BeforeUpdate  当浏览者粘贴系统剪贴板中的内容时通知目标对象 </span><br><span class="line"><span class="keyword">on</span>ContextMenu   当浏览者按下鼠标右键出现菜单时或者通过键盘的按键触发页面菜单时触发的事件 </span><br><span class="line">[试试在页面中的<span class="variable">&lt;body&gt;</span>中加入<span class="keyword">on</span>ContentMenu=<span class="string">"return false"</span>就可禁止使用鼠标右键了] </span><br><span class="line"><span class="keyword">on</span>Copy          当页面当前的被选择内容被复制后触发的事件 </span><br><span class="line"><span class="keyword">on</span>Cut           当页面当前的被选择内容被剪切时触发的事件 </span><br><span class="line"><span class="keyword">on</span>Drag          当某个对象被拖动时触发的事件 [活动事件] </span><br><span class="line"><span class="keyword">on</span>DragDrop      一个外部对象被鼠标拖进当前窗口或者帧 </span><br><span class="line"><span class="keyword">on</span>DragEnd       当鼠标拖动结束时触发的事件，即鼠标的按钮被释放了 </span><br><span class="line"><span class="keyword">on</span>DragEnter     当对象被鼠标拖动的对象进入其容器范围内时触发的事件 </span><br><span class="line"><span class="keyword">on</span>DragLeave     当对象被鼠标拖动的对象离开其容器范围内时触发的事件 </span><br><span class="line"><span class="keyword">on</span>DragOver      当某被拖动的对象在另一对象容器范围内拖动时触发的事件 </span><br><span class="line"><span class="keyword">on</span>DragStart     当某对象将被拖动时触发的事件 </span><br><span class="line"><span class="keyword">on</span>Drop          在一个拖动过程中，释放鼠标键时触发的事件 </span><br><span class="line"><span class="keyword">on</span>LoseCapture   当元素失去鼠标移动所形成的选择焦点时触发的事件 </span><br><span class="line"><span class="keyword">on</span>Paste         当内容被粘贴时触发的事件 </span><br><span class="line"><span class="keyword">on</span>Select        当文本内容被选择时的事件 </span><br><span class="line"><span class="keyword">on</span>SelectStart   当文本内容选择将开始发生时触发的事件</span><br></pre></td></tr></table></figure></p><p>数据绑定<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">onAfterUpdate</span>       当数据完成由数据源到对象的传送时触发的事件 </span><br><span class="line"><span class="literal">on</span>CellChange        当数据来源发生变化时 </span><br><span class="line"><span class="literal">on</span>DataAvailable     当数据接收完成时触发事件 </span><br><span class="line"><span class="literal">on</span>DatasetChanged    数据在数据源发生变化时触发的事件 </span><br><span class="line"><span class="literal">on</span>DatasetComplete   当来子数据源的全部有效数据读取完毕时触发的事件 </span><br><span class="line"><span class="literal">on</span>ErrorUpdate       当使用<span class="literal">on</span>BeforeUpdate事件触发取消了数据传送时，代替<span class="literal">on</span>AfterUpdate事件 </span><br><span class="line"><span class="literal">on</span>RowEnter          当前数据源的数据发生变化并且有新的有效数据时触发的事件 </span><br><span class="line"><span class="literal">on</span>RowExit           当前数据源的数据将要发生变化时触发的事件 </span><br><span class="line"><span class="literal">on</span>RowsDelete        当前数据记录将被删除时触发的事件 </span><br><span class="line"><span class="literal">on</span>RowsInserted      当前数据源将要插入新数据记录时触发的事件 </span><br><span class="line"><span class="literal">on</span>AfterPrint        当文档被打印后触发的事件 </span><br><span class="line"><span class="literal">on</span>BeforePrint       当文档即将打印时触发的事件 </span><br><span class="line"><span class="literal">on</span>FilterChange      当某个对象的滤镜效果发生变化时触发的事件 </span><br><span class="line"><span class="literal">on</span>Help              当浏览者按下F1或者浏览器的帮助选择时触发的事件 </span><br><span class="line"><span class="literal">on</span>PropertyChange    当对象的属性之一发生变化时触发的事件 </span><br><span class="line"><span class="literal">on</span>ReadyStateChange  当对象的初始化属性值发生变化时触发的事件</span><br></pre></td></tr></table></figure></p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell快捷启动sublime vsCode方法</title>
      <link href="/posts/66c9f5d6/"/>
      <url>/posts/66c9f5d6/</url>
      
        <content type="html"><![CDATA[<p>最近在使用命令行去打开需要编辑的文本的时候，一直想使用自己习惯的编辑器去打开（sublimeText、vsCode都是友好型的优秀的编辑器），默认的命令行vim编辑器用的不是很习惯，于是想到使用alias方法可以做这些事，只需要简单几步，就可以实现,以下针对sublime为例。<br><strong>环境平台：mac</strong><br><a id="more"></a></p><h4 id="Step1-安装编辑器"><a href="#Step1-安装编辑器" class="headerlink" title="Step1. 安装编辑器"></a>Step1. 安装编辑器</h4><p>可直接到以下网址下载dmg安装文件：<a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text 3</a>地址戳这里<br><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vsCode</a>地址戳这里</p><h4 id="Step2-添加命令行别名"><a href="#Step2-添加命令行别名" class="headerlink" title="Step2. 添加命令行别名"></a>Step2. 添加命令行别名</h4><p>打开用户配置文件<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.bash_profile</span></span><br></pre></td></tr></table></figure></p><p>添加如下alias<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> <span class="title">subl</span>=<span class="string">"'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'"</span></span><br></pre></td></tr></table></figure></p><p>＃如果不添加别名，也可以选择将路径添加到环境变量下。<br>＃这里的路径根据实际情况可能会有所不同。<br>wq保存后回到命令行执行以下命令使其生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="Step3-命令行使用"><a href="#Step3-命令行使用" class="headerlink" title="Step3. 命令行使用"></a>Step3. 命令行使用</h4><p>这里我们假设在命令行用SublimeText打开.bash_profile，则执行如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">subl </span>~/.<span class="keyword">bash_profile</span></span><br></pre></td></tr></table></figure></p><h4 id="附-gt-fish-shell快捷启动sublime"><a href="#附-gt-fish-shell快捷启动sublime" class="headerlink" title="附-&gt;fish shell快捷启动sublime"></a>附-&gt;fish shell快捷启动sublime</h4><p>fish shell是一款极其易用上手的shell,具体安装和使用另开一篇做详细介绍。在fish shell里做alias方式如下：</p><p>1.打开fish配置目录<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> ~/.<span class="built_in">config</span>/fish</span><br></pre></td></tr></table></figure></p><p>2.创建config.fish文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">config</span>.fish</span><br></pre></td></tr></table></figure></p><p>3.在config.fish里键入<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subl</span></span></span><br><span class="line">   <span class="string">'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'</span> $argv</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><strong>注：$argv为参数</strong></p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础核心梳理之DOM操作</title>
      <link href="/posts/1c6a5067/"/>
      <url>/posts/1c6a5067/</url>
      
        <content type="html"><![CDATA[<h4 id="一、DOM创建"><a href="#一、DOM创建" class="headerlink" title="一、DOM创建"></a>一、DOM创建</h4><p>DOM节点（Node）通常对应于一个标签，一个文本，或者一个HTML属性。DOM节点有一个nodeType属性用来表示当前元素的类型，它是一个整数：</p><p>Element，元素Attribute，属性Text，文本DOM节点创建最常用的便是document.createElement和document.createTextNode方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node1 = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> node2 = <span class="built_in">document</span>.createTextNode(<span class="string">'hello world!'</span>);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="二、DOM查询"><a href="#二、DOM查询" class="headerlink" title="二、DOM查询"></a>二、DOM查询</h4><p>返回当前文档中第一个类名为 “myclass” 的元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">".myclass"</span>);</span><br></pre></td></tr></table></figure></p><p>返回一个文档中所有的class为”note”或者 “alert”的div元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">"div.note, div.alert"</span>);</span><br></pre></td></tr></table></figure></p><p>获取元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'xxx'</span>);</span><br><span class="line"><span class="keyword">var</span> els = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'highlight'</span>);</span><br><span class="line"><span class="keyword">var</span> els = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'td'</span>);</span><br></pre></td></tr></table></figure></p><p>Element也提供了很多相对于元素的DOM导航方法：<br>获取父元素、父节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有定位父级时，默认是body;但在IE7以下，如果当前元素没有定位属性，返回body，如果有，返回HTML;</span></span><br><span class="line"><span class="comment">//如果当前元素某个父级触发了haslayout，则返回触发了haslayout这个元素。</span></span><br><span class="line"><span class="keyword">var</span> parent = ele.parentElement;</span><br><span class="line"><span class="keyword">var</span> parent = ele.parentNode;<span class="comment">//只读，没有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> offsetParent=ele.offsetParent;<span class="comment">//只读，找到最近的有定位的父节点。</span></span><br><span class="line">获取子节点，子节点可以是任何一种节点，可以通过nodeType来判断</span><br><span class="line"><span class="keyword">var</span> nodes = ele.children;<span class="comment">//标准下、非标准下都只含元素类型，但对待非法嵌套的子节点，处理方式与childNodes一致。   </span></span><br><span class="line"><span class="keyword">var</span> nodes = ele.childNodes;<span class="comment">//非标准下：只包含元素类型，不会包含非法嵌套的子节点。</span></span><br><span class="line"><span class="comment">//标准下：包含元素和文本类型，会包含非法嵌套的子节点。</span></span><br></pre></td></tr></table></figure></p><p>获取元素属性列表<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attr = ele.attributes;</span><br></pre></td></tr></table></figure></p><p>查询子元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> els = ele.getElementsByTagName(<span class="string">'td'</span>);</span><br><span class="line"><span class="keyword">var</span> els = ele.getElementsByClassName(<span class="string">'highlight'</span>);</span><br></pre></td></tr></table></figure></p><p>当前元素的第一个/最后一个子元素节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = ele.firstChild;<span class="comment">//对待标准和非标准模式，如childNods</span></span><br><span class="line"><span class="keyword">var</span> el = ele.lastChild;</span><br><span class="line"><span class="keyword">var</span> el = ele.firstElementChild;<span class="comment">//非标准不支持</span></span><br><span class="line"><span class="keyword">var</span> el = ele.lastElementChild;</span><br></pre></td></tr></table></figure></p><p>下一个/上一个兄弟元素节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = ele.nextSibling;</span><br><span class="line"><span class="keyword">var</span> el = ele.previousSibling;</span><br><span class="line"><span class="keyword">var</span> el = ele.nextElementSibling;</span><br><span class="line"><span class="keyword">var</span> el = ele.previousElementSibling;</span><br></pre></td></tr></table></figure></p><p>兼容的获取第一个子元素节点方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first=ele.firstElementChild||ele.children[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><h4 id="三、DOM更改"><a href="#三、DOM更改" class="headerlink" title="三、DOM更改"></a>三、DOM更改</h4><p>添加、删除子元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ele.appendChild(el);</span><br><span class="line">ele.removeChild(el);</span><br></pre></td></tr></table></figure></p><p>替换子元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ele.replaceChild(el1, el2);</span><br></pre></td></tr></table></figure></p><p>插入子元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentElement.insertBefore(newElement, referenceElement);</span><br></pre></td></tr></table></figure></p><p>克隆元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ele.cloneNode(<span class="literal">true</span>) <span class="comment">//该参数指示被复制的节点是否包括原节点的所有属性和子节点</span></span><br></pre></td></tr></table></figure></p><h4 id="四、属性操作"><a href="#四、属性操作" class="headerlink" title="四、属性操作"></a>四、属性操作</h4><p>获取一个{name, value}的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attrs = el.attributes;</span><br></pre></td></tr></table></figure></p><p>获取、设置属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = el.getAttribute(<span class="string">'class'</span>);</span><br><span class="line">el.setAttribute(<span class="string">'class'</span>, <span class="string">'highlight'</span>);</span><br></pre></td></tr></table></figure></p><p>判断、移除属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">el.hasAttribute(<span class="string">'class'</span>);</span><br><span class="line">el.removeAttribute(<span class="string">'class'</span>);</span><br></pre></td></tr></table></figure></p><p>是否有属性设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.hasAttributes();</span><br></pre></td></tr></table></figure></p><h4 id="五、事件兼容封装"><a href="#五、事件兼容封装" class="headerlink" title="五、事件兼容封装"></a>五、事件兼容封装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">跨浏览器的事件处理程序 </span></span><br><span class="line"><span class="comment">调用时候直接用domEvent.addEvent( , , );直接调用 </span></span><br><span class="line"><span class="comment">使用时候，先用addEvent添加事件，然后在handleFun里面直接写其他函数方法，如getEvent； </span></span><br><span class="line"><span class="comment">addEventListener和attachEvent---都是dom2级事件处理程序 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> domEvent = &#123; </span><br><span class="line">  addEvent:<span class="function"><span class="keyword">function</span>(<span class="params">element,event,handleFun</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(element.addEventListener)&#123; </span><br><span class="line">      element.addEventListener(event,handleFun,<span class="literal">false</span>); </span><br><span class="line">    &#125;<span class="comment">// IE </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123; </span><br><span class="line">      element.attachEvent(<span class="string">"on"</span>+event,handleFun); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">      element[<span class="string">"on"</span>+event] = handleFun; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">  removeEvent:<span class="function"><span class="keyword">function</span>(<span class="params">element,event,handleFun</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123; </span><br><span class="line">      element.removeEventListener(event,handleFun,<span class="literal">false</span>); </span><br><span class="line">    &#125;<span class="comment">// IE </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123; </span><br><span class="line">      element.detachEvent(<span class="string">"on"</span>+event,handleFun); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">      element[<span class="string">"on"</span>+event] = <span class="literal">null</span>; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">//阻止事件冒泡 </span></span><br><span class="line">  stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(event.stopPropagation)&#123; </span><br><span class="line">      event.stopPropagation(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">      event.cancelBubble = true;#IE阻止事件冒泡，true代表阻止 </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">//阻止事件默认行为 </span></span><br><span class="line">  preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(event.preventDefault)&#123; </span><br><span class="line">      event.preventDefault(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">      event.returnValue = <span class="literal">false</span>;<span class="comment">//IE阻止事件冒泡，false代表阻止 </span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">//获得事件元素 </span></span><br><span class="line">  getElement:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">//获得事件 </span></span><br><span class="line">  getEvent:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> event? event : <span class="built_in">window</span>.event; </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">//获得事件类型 </span></span><br><span class="line">  getType:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> event.type; </span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法梳理</title>
      <link href="/posts/46199434/"/>
      <url>/posts/46199434/</url>
      
        <content type="html"><![CDATA[<p>Markdown的宗旨是易读容写，它和html标记语言有点类似，前者是一种书写格式，后者是一种发布格式。<br>这里只记录常用博客语法，不断更新中。</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>在插入处先按入两个以上的空格然后回车</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p><code>#</code> H1<br><code>##</code> H2<br><code>#####</code> H6<br><a id="more"></a></p><h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>每行的最前面加上<code>&gt;</code> ，区块引用内部可以使用其他Markdown语法。</p><blockquote><p>this is a Blockquotes</p></blockquote><p>也可以只在每个段落的首部加上<code>&gt;</code>,使<code>用&gt;</code>时要断好行，如果不断行，下面的内容会全部使用引用方式。</p><blockquote><p>this is a Blockquotes,<br>this is a Blockquotes<br>this is a Blockquotes</p></blockquote><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>无序列表使用星号、加号或是减号作为列表标记，注意符号与内容之间有个空格 * + -</p><ul><li>无序列表展示</li><li>无序列表展示</li><li>无序列表展示</li></ul><p>有序列表则使用数字接着一个英文句点<code>x.</code></p><ol><li>有序列表展示</li><li>有序列表展示</li><li>有序列表展示</li></ol><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>Markdown 会用<code>&lt;pre&gt;</code> 和<code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hexo的Next主题的用时的代码区块会更加鲜明友好,还可以通过主题配置的<code>_config.yml</code>中的<code>highlight_theme</code>进行配置相应的色调。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。<br><code>***</code><br><code>---</code><br><code>___</code></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>行内式: 只要在方块括号后面紧接着圆括号并插入网址链接即可<code>[description](link)</code><br><code>[优酷-这世界很酷](http://youku.com)</code> 优酷-这世界很酷</p><p>参考式: 在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记,暂时不用。</p><h4 id="强调和斜体"><a href="#强调和斜体" class="headerlink" title="强调和斜体"></a>强调和斜体</h4><p>使用星号<code>（</code>）和底线<code>（_</code>）作为标记强调字词的符号，被 或 包围的字词会被转成用 <code>&lt;em&gt;</code>标签包围，用两个<code>*</code> 或 包起来的话，则会被转成<code>&lt;strong&gt;</code></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果要标记一小段行内代码，你可以用反引号把它包起来</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>惊叹号加上方块括号后面紧接着圆括号并插入网址链接<code>![title](link)</code></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>利用反斜杠来插入一些在语法中有其它意义的符号<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号<br><code>\ 反斜线</code><br><code>` 反引号</code><br><code>* 星号</code><br><code>_ 底线</code><br><code>{} 花括号</code><br><code>[] 方括号</code><br><code>() 括弧</code><br><code># 井字号</code><br><code>+ 加号</code><br><code>- 减号</code><br><code>. 英文句点</code><br><code>! 惊叹号</code></p><blockquote><p>欢迎交流转载请注明出处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
